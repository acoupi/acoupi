{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#acoupi","title":"acoupi","text":""},{"location":"#what_is_acoupi","title":"What is acoupi?","text":"<p>acoupi is an open-source Python package that streamlines bioacoustic classifier deployment on edge devices like the Raspberry Pi. It integrates and standardises the entire bioacoustic monitoring workflow, from recording to classification. With various components and templates, acoupi simplifies the creation of custom sensors, handling audio recordings, processing, classifications, detections, communication, and data management.</p> An overview of acoupi software. Input your recording settings and deep learning model of choice, and acoupi handles the rest, sending detections where you need them."},{"location":"#requirements","title":"Requirements","text":"<p>acoupi has been designed to run on single-board computer devices like the Raspberry\u00a0Pi (RPi). Users should be able to download and test acoupi software on any Linux-based machines with Python version &gt;=3.8,&lt;3.12 installed.</p> <ul> <li>A Linux-based single board computer such as the Raspberry Pi 4B.</li> <li>A SD Card with 64-bit Lite OS version installed.</li> <li>A USB Microphone such as an AudioMoth\u00a0USB\u00a0Microphone or an Ultramic 192K/250K.</li> </ul> Recommended Hardware <p>The software has been extensively developed and tested with the RPi 4B. We advise users to select the RPi 4B or a device featuring similar specifications.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install and use the bare-bone framework of acoupi on your embedded device follow these steps: </p> <p>Step 1: Install acoupi and its dependencies.</p> <p>CLI Command: acoupi installation</p> <pre><code>curl -sSL https://github.com/acoupi/acoupi/raw/main/scripts/setup.sh | bash\n</code></pre> <p>Step 2: Configure an acoupi program.</p> <p>CLI Command: acoupi configuration</p> <pre><code>acoupi setup --program `program-name`\n</code></pre> <p><code>acoupi</code> includes two pre-built programs; a <code>default</code> and a <code>connected</code> program. The <code>default</code> program only records and saves audio files based on users' settings. This program does not do any audio processing neither send any messages, being comparable to an AudioMoth. The <code>connected</code> program is similar to the <code>default</code> program but with the added capability of sending messages to a remote server. </p> <p>CLI Command: configure acoupi <code>default</code> program</p> <pre><code>acoupi setup --program acoupi.programs.default\n</code></pre> <p>CLI Command: configure acoupi <code>connected</code> program</p> <pre><code>acoupi setup --program acoupi.programs.connected\n</code></pre> <p>Step 3: Start the deployment of your acoupi's configured program.</p> <p>CLI Command: acoupi deployment</p> <pre><code>acoupi deployment start\n</code></pre> Using acoupi from the command line <p>To check what are the available commands for acoupi, enter <code>acoupi --help</code>. Also look at the CLI documentation for further info.</p>"},{"location":"#ready_to_use_ai_bioacoustic_classifiers","title":"Ready to use AI Bioacoustic Classifiers \ud83d\ude80","text":"<p>acoupi simplifies the use and implementation of open-source AI bioacoustic models. Currently, it supports two classifiers: the <code>BatDetect2</code>, developed by @macodha\u00a0and\u00a0al., and the <code>BirdNET-Lite</code>, developed by @kahst\u00a0and\u00a0al..</p> Licenses and Usage <p>Before using a pre-trained AI bioacoustic classifier, review its license to ensure it aligns with your intended use. <code>acoupi</code> programs built with these models inherit the corresponding model licenses. For further licensing details, refer to the FAQ section.</p> Model Output Reliability <p>Please note that <code>acoupi</code> is not responsible for the accuracy or reliability of model predictions. It is crucial to understand the performance and limitations of each model before using it in your project.</p>"},{"location":"#batdetect2","title":"BatDetect2 \ud83e\udd87","text":"<p>The BatDetect2 bioacoustic DL model has been trained to detect and classify UK bats species. The acoupi_batdetect2 repository provides users with a pre-built acoupi program that can be configured and tailored to their use cases.</p> <p>CLI Command: Install acoupi_batdetect2 program.</p> <pre><code>pip install acoupi_batdetect2\n</code></pre> <p>CLI Command: Setup and configure acoupi_batdetect2 program.</p> <pre><code>acoupi setup --program acoupi_batdetect2.program\n</code></pre>"},{"location":"#birdnet-lite_coming_soon","title":"BirdNET-Lite \ud83e\udd9c (COMING SOON!)","text":"<p>The BirdNET-Lite bioacoustic DL model has been trained to detect and classify a large number of bird species. The acoupi_birdnet repository provides users with a pre-build acoupi program that can be configured and tailored to their use cases of birds monitoring.</p> <p>CLI Command: Install acoupi_birdnet program.</p> <pre><code>pip install acoupi_birdnet\n</code></pre> <p>CLI Command: Setup and configure acoupi_birdnet program.</p> <pre><code>acoupi setup --program acoupi_birdnet.program\n</code></pre>"},{"location":"#in_development","title":"In development \ud83d\udc33\ud83d\udc18\ud83d\udc1d","text":"<p>Interested in sharing your AI bioacoustic model with the community?</p> <p>acoupi allows you to integrate your own bioacoustic classifier model. If you already have a model and would like to share it with the community, we'd  love to hear from you! We are happy to offer guidance and support to help include your classifier in the acoupi list of \"ready-to-use\" AI bioacoustic classifiers. </p>"},{"location":"#navigate_the_docs","title":"Navigate the docs \ud83d\udcd6","text":"<p>Get to know acoupi better by exploring the following sections of the documentation.</p> Tutorials <p>Step-by-step information on how to install, configure and deploy acoupi for new users.</p> How-To Guides <p>Guides to learn how to customise and built key elements of acoupi.</p> Explanation <p>Overview of the key elements of acoupi: what they are and how they work.</p> Reference <p>Technical information refering to acoupi code.</p> <p>Important</p> <p>We would love to hear your feedback about the documentation. We are always looking to hearing suggestions to improve readability and user's ease of navigation. Don't hesitate to reach out if you have comments!</p>"},{"location":"authors/","title":"Authors","text":""},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#contributor_covenant_code_of_conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our_pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our_standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our_responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Acoupi is a community effort to facilitate access to bioacoustic models and ease their on-device deployment for field surveys. </p> <p>We warmly welcome contributions, suggestions, fixes and constructive feedback to both acoupi code and documentation.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#frequently_asked_questions","title":"Frequently asked questions","text":""},{"location":"faq/#technical","title":"Technical","text":""},{"location":"faq/#what_is_acoupi","title":"What is acoupi?","text":"<p>acoupi is an open-source Python toolkit that's designed to make it easy to create bioacoustic sensors on edge devices like the Raspberry Pi. acoupi integrates and standardises the entire workflow of bioacoustic monitoring, combining both autonomous recording and classification units. acoupi ensures standardisation of data while providing flexibility of configuration by defining attributes with specific characteristics, the data schema and establishing a set of methods showcasing several behaviours, the components. When configuring acoupi, users configure the set of acoupi components that suit their use case.</p>"},{"location":"faq/#what_acoupi_isnt","title":"What acoupi isn't?","text":"<p>While acoupi provides modular components to build your own autonomous recording and classification units, it is not a tool for training bioacoustic AI classifiers. acoupi integrates already trained and well-tested AI bioacoustic models through its pre-built programs that you can use to perform on-device bioacoustic classification.</p>"},{"location":"faq/#why_acoupi","title":"Why acoupi?","text":"<p>Passive acoustic monitoring (PAM) has emerged as a practical and helpful tool for biodiversity monitoring and conservation. Combining PAM with on-device domain-specific deep-learning bioacoustic classifiers provides opportunities for extending the scale and length of data collection while alleviating downstream data storage and processing burdens. However, deploying and adapting existing solutions for its own use still requires substantial technical expertise.</p> <p>acoupi aims to provide an all-in-one Python toolkit to make it easy to create your smart bioacoustic sensors on edge devices like the Raspberry Pi. With acoupi, you can either use one of the provided programs or build your custom program using the various tools and components that are included.</p>"},{"location":"faq/#what_are_the_available_acoupi_programs","title":"What are the available acoupi programs?","text":"<ul> <li> <p>default: The acoupi default program is the most simplest program, handling only two tasks: recording and managing audio files.</p> </li> <li> <p>connected: The acoupi connected program extends the default program by adding messaging capabilities, allowing users to send messages to a remote server.</p> </li> <li> <p>acoupi_batdetect2:</p> </li> <li> <p>acoupi_birdnet:</p> </li> </ul>"},{"location":"faq/#usage","title":"Usage","text":""},{"location":"faq/#who_can_use_acoupi","title":"Who can use acoupi?","text":"<p>acoupi is particularly well-suited for researchers in the field of bioacoustics, but it's also a great option for environmental consultants who are looking to set up their own bioacoustic monitoring systems.</p>"},{"location":"faq/#is_acoupi_free","title":"Is acoupi free?","text":"<p>Yes, acoupi is free and is licensed under the GNU\u00a0GPL-3.0. This means that acoupi will always be free to use, and free to customise for your own purpose. Please do check the license for more detailed information.</p>"},{"location":"faq/#i_want_to_use_acoupi_but","title":"I want to use acoupi, but ...","text":"<ul> <li> <p>I don't know Python. No problem.     While acoupi is built in Python, it includes a variety of pre-built programs that you can use right out of the box.     Follow the Tutorials\u00a0Section to get started.</p> </li> <li> <p>I don't have access to WiFi. acoupi does not require access to WiFi or any other wireless network.     You can use acoupi as a standalone device, the audio recordings and audio classification results will be saved on the device's internal storage (i.e., the SD card).</p> </li> </ul>"},{"location":"faq/#licensing","title":"Licensing","text":""},{"location":"faq/#can_i_use_acoupi_for_commercial_purposes","title":"Can I use acoupi for commercial purposes?","text":"<p>Yes, absolutely! acoupi is licensed under the GNU\u00a0GPL-3.0, which explicitly permits commercial use. However, the GPL-3.0 is a \"copyleft\" license. This means that if you modify acoupi or create a new work based on it (whether for commercial or non-commercial purposes), you must make your derived work available under the same GPL-3.0 license. Essentially, this requires you to keep your source code open and freely available.</p>"},{"location":"faq/#does_the_license_apply_to_the_recordings_produced_by_acoupi","title":"Does the license apply to the recordings produced by acoupi?","text":"<p>No, the GPL-3.0 license doesn't apply to the audio recordings themselves. Copyright law governs those. You own the copyright to any recordings you make using acoupi and are free to use them as you wish.</p>"},{"location":"faq/#does_the_license_apply_to_the_detections_produced_by_acoupi","title":"Does the license apply to the detections produced by acoupi?","text":"<p>This is a bit more nuanced. acoupi itself doesn't provide detection models; it provides the framework for running them. The license of the detection model you use will determine how you can use the detections. If you use a pre-trained model, carefully check its license. Some models may be open source, allowing free use of the detections. Others may have restrictions, especially for commercial use. It's always best to consult with a legal professional for specific advice on licensing and copyright matters, especially when commercial use is involved.</p>"},{"location":"faq/#contributing","title":"Contributing","text":""},{"location":"faq/#does_acoupi_accept_outside_contributions","title":"Does acoupi accept outside contributions?","text":"<p>Yes absolutely, we welcome all contributions: bug reports, bug fixes, documentation improvements, and feature requests.</p>"},{"location":"faq/#i_want_to_contribute_where_do_i_start","title":"I want to contribute. Where do I start?","text":"<p>Amazing! We are always looking for contributors. Make sure to read the contribution guidelines and code of conduct to get started.</p>"},{"location":"license/","title":"License","text":"<pre><code>                GNU GENERAL PUBLIC LICENSE\n                   Version 3, 29 June 2007\n</code></pre> <p>Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The GNU General Public License is a free, copyleft license for software and other kinds of works.</p> <p>The licenses for most software and other practical works are designed to take away your freedom to share and change the works.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users.  We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors.  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.</p> <p>To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights.  Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.</p> <p>For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software.  For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.</p> <p>Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so.  This is fundamentally incompatible with the aim of protecting users' freedom to change the software.  The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable.  Therefore, we have designed this version of the GPL to prohibit the practice for those products.  If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.</p> <p>Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary.  To prevent this, the GPL assures that patents cannot be used to render the program non-free.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                   TERMS AND CONDITIONS\n</code></pre> <ol> <li>Definitions.</li> </ol> <p>\"This License\" refers to version 3 of the GNU General Public License.</p> <p>\"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.</p> <p>\"The Program\" refers to any copyrightable work licensed under this License.  Each licensee is addressed as \"you\".  \"Licensees\" and \"recipients\" may be individuals or organizations.</p> <p>To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy.  The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work.</p> <p>A \"covered work\" means either the unmodified Program or a work based on the Program.</p> <p>To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy.  Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.</p> <p>To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies.  Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.</p> <p>An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License.  If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.</p> <ol> <li>Source Code.</li> </ol> <p>The \"source code\" for a work means the preferred form of the work for making modifications to it.  \"Object code\" means any non-source form of a work.</p> <p>A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.</p> <p>The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form.  A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.</p> <p>The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities.  However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work.  For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.</p> <p>The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.</p> <p>The Corresponding Source for a work in source code form is that same work.</p> <ol> <li>Basic Permissions.</li> </ol> <p>All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met.  This License explicitly affirms your unlimited permission to run the unmodified Program.  The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work.  This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.</p> <p>You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force.  You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright.  Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.</p> <p>Conveying under any other circumstances is permitted solely under the conditions stated below.  Sublicensing is not allowed; section 10 makes it unnecessary.</p> <ol> <li>Protecting Users' Legal Rights From Anti-Circumvention Law.</li> </ol> <p>No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.</p> <p>When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.</p> <ol> <li>Conveying Verbatim Copies.</li> </ol> <p>You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.</p> <p>You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.</p> <ol> <li>Conveying Modified Source Versions.</li> </ol> <p>You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:</p> <pre><code>a) The work must carry prominent notices stating that you modified\nit, and giving a relevant date.\n\nb) The work must carry prominent notices stating that it is\nreleased under this License and any conditions added under section\n7.  This requirement modifies the requirement in section 4 to\n\"keep intact all notices\".\n\nc) You must license the entire work, as a whole, under this\nLicense to anyone who comes into possession of a copy.  This\nLicense will therefore apply, along with any applicable section 7\nadditional terms, to the whole of the work, and all its parts,\nregardless of how they are packaged.  This License gives no\npermission to license the work in any other way, but it does not\ninvalidate such permission if you have separately received it.\n\nd) If the work has interactive user interfaces, each must display\nAppropriate Legal Notices; however, if the Program has interactive\ninterfaces that do not display Appropriate Legal Notices, your\nwork need not make them do so.\n</code></pre> <p>A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit.  Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.</p> <ol> <li>Conveying Non-Source Forms.</li> </ol> <p>You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:</p> <pre><code>a) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by the\nCorresponding Source fixed on a durable physical medium\ncustomarily used for software interchange.\n\nb) Convey the object code in, or embodied in, a physical product\n(including a physical distribution medium), accompanied by a\nwritten offer, valid for at least three years and valid for as\nlong as you offer spare parts or customer support for that product\nmodel, to give anyone who possesses the object code either (1) a\ncopy of the Corresponding Source for all the software in the\nproduct that is covered by this License, on a durable physical\nmedium customarily used for software interchange, for a price no\nmore than your reasonable cost of physically performing this\nconveying of source, or (2) access to copy the\nCorresponding Source from a network server at no charge.\n\nc) Convey individual copies of the object code with a copy of the\nwritten offer to provide the Corresponding Source.  This\nalternative is allowed only occasionally and noncommercially, and\nonly if you received the object code with such an offer, in accord\nwith subsection 6b.\n\nd) Convey the object code by offering access from a designated\nplace (gratis or for a charge), and offer equivalent access to the\nCorresponding Source in the same way through the same place at no\nfurther charge.  You need not require recipients to copy the\nCorresponding Source along with the object code.  If the place to\ncopy the object code is a network server, the Corresponding Source\nmay be on a different server (operated by you or a third party)\nthat supports equivalent copying facilities, provided you maintain\nclear directions next to the object code saying where to find the\nCorresponding Source.  Regardless of what server hosts the\nCorresponding Source, you remain obligated to ensure that it is\navailable for as long as needed to satisfy these requirements.\n\ne) Convey the object code using peer-to-peer transmission, provided\nyou inform other peers where the object code and Corresponding\nSource of the work are being offered to the general public at no\ncharge under subsection 6d.\n</code></pre> <p>A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.</p> <p>A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling.  In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage.  For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product.  A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.</p> <p>\"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source.  The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.</p> <p>If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information.  But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).</p> <p>The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed.  Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.</p> <p>Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.</p> <ol> <li>Additional Terms.</li> </ol> <p>\"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law.  If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.</p> <p>When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it.  (Additional permissions may be written to require their own removal in certain cases when you modify the work.)  You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.</p> <p>Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:</p> <pre><code>a) Disclaiming warranty or limiting liability differently from the\nterms of sections 15 and 16 of this License; or\n\nb) Requiring preservation of specified reasonable legal notices or\nauthor attributions in that material or in the Appropriate Legal\nNotices displayed by works containing it; or\n\nc) Prohibiting misrepresentation of the origin of that material, or\nrequiring that modified versions of such material be marked in\nreasonable ways as different from the original version; or\n\nd) Limiting the use for publicity purposes of names of licensors or\nauthors of the material; or\n\ne) Declining to grant rights under trademark law for use of some\ntrade names, trademarks, or service marks; or\n\nf) Requiring indemnification of licensors and authors of that\nmaterial by anyone who conveys the material (or modified versions of\nit) with contractual assumptions of liability to the recipient, for\nany liability that these contractual assumptions directly impose on\nthose licensors and authors.\n</code></pre> <p>All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10.  If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term.  If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.</p> <p>If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.</p> <p>Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.</p> <ol> <li>Termination.</li> </ol> <p>You may not propagate or modify a covered work except as expressly provided under this License.  Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).</p> <p>However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.</p> <p>Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.</p> <p>Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License.  If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.</p> <ol> <li>Acceptance Not Required for Having Copies.</li> </ol> <p>You are not required to accept this License in order to receive or run a copy of the Program.  Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance.  However, nothing other than this License grants you permission to propagate or modify any covered work.  These actions infringe copyright if you do not accept this License.  Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.</p> <ol> <li>Automatic Licensing of Downstream Recipients.</li> </ol> <p>Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License.  You are not responsible for enforcing compliance by third parties with this License.</p> <p>An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations.  If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.</p> <p>You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License.  For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.</p> <ol> <li>Patents.</li> </ol> <p>A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based.  The work thus licensed is called the contributor's \"contributor version\".</p> <p>A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version.  For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.</p> <p>Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.</p> <p>In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement).  To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.</p> <p>If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients.  \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.</p> <p>If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.</p> <p>A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License.  You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.</p> <p>Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.</p> <ol> <li>No Surrender of Others' Freedom.</li> </ol> <p>If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all.  For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.</p> <ol> <li>Use with the GNU Affero General Public License.</li> </ol> <p>Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work.  The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.</p> <ol> <li>Revised Versions of this License.</li> </ol> <p>The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> <p>Each version is given a distinguishing version number.  If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.</p> <p>If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program.</p> <p>Later license versions may give you additional or different permissions.  However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.</p> <ol> <li>Disclaimer of Warranty.</li> </ol> <p>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> <ol> <li>Limitation of Liability.</li> </ol> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <ol> <li>Interpretation of Sections 15 and 16.</li> </ol> <p>If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.</p> <pre><code>                 END OF TERMS AND CONDITIONS\n\n        How to Apply These Terms to Your New Programs\n</code></pre> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>&lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\nThis program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate parts of the General Public License.  Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\".</p> <p>You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/.</p> <p>The GNU General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.  But first, please read https://www.gnu.org/licenses/why-not-lgpl.html.</p>"},{"location":"terms/","title":"Terminology","text":""},{"location":"terms/#terminology_definitions","title":"Terminology &amp; Definitions","text":"<p>framework: the elements constituing the acoupi software. The acoupi framework provides the building blocks also refered to as templates for developing a smart bioacoutics sensor. </p> <p>system: the set of code responsible to execute and manage an acoupi program on an edge device. </p>"},{"location":"terms/#using_acoupi","title":"Using acoupi","text":"<p>program: a set of instructions that dictate the behaviour of a smart bioacoutics sensor. A program defines the tasks the sensor performs, how those tasks are configured, and how they are being executed. It encompasses three key elements: tasks, configuration schema, </p> <p>pre-built program: a program that has been built with a selective set of instructions to behave in a specific manner. A pre-built program is an acoupi program that can be configured by users through the command line interface. Current pre-built programs are listed in explanation: programs.</p> <p>task: an individual unit of work carried out by a program. Each task perform specific actions, relate to other tasks in a program, and have a defined schedule. </p>"},{"location":"terms/#developing_acoupi","title":"Developing acoupi","text":"<p>custom program: an acoupi program that does not yet exist, as opposed to an acoupi pre-built program. A custom program refers to the steps involved in buildling a pre-built program. The how-to guide: create a custom program detailed the instructions for users to follow to create a custom program</p>"},{"location":"explanation/","title":"Acoupi Explanation","text":""},{"location":"explanation/#acoupi_explanation","title":"Acoupi Explanation","text":"<p>Welcome to the Explanation Section of acoupi package.</p> <p>This section of the documentation is intended for users who wish to better understand how acoupi has been designed and architected. The different sections of this Explanation guide will enable you to get a better understanding of the different building blocks forming the acoupi framework and how it is configured and deployed into a running acoupi application.</p> Explanation Section What it is? Architecture Overview of the architecture supporting the deployment of acoupi Framework Learn about the different elements of acoupi (data, components, tasks, programs) System Understand the inner-workings of a running acoupi application <p>New to acoupi?</p> <p>If you want to get started with acoupi, look at the Tutorials section providing step-by-step information to help you install, configure, and deploy acoupi.</p> <p>How-To guides</p> <p>If you have a specific goal, and are already familiar with acoupi, the How-to\u00a0Guides will have more in-depth detail information to help you tailor acoupi to your personal use case.</p> <p>acoupi Reference</p> <p>Take a look at the Reference section of the documentation to get insights into the python code and learn about the parameters and options available to customise acoupi.</p>"},{"location":"explanation/architecture/","title":"Architecture","text":""},{"location":"explanation/architecture/#architecture","title":"Architecture","text":"<p>acoupi is designed with the primary goal of simplifying the creation of smart bioacoustic sensors on edge devices. We aim to provide a user-friendly framework that allows you to focus on defining your program's behaviour\u2014specifying which models to execute, recording triggers, etc.\u2014without being burdened by the intricacies of program execution and task orchestration. To achieve this, acoupi is made of two parts:</p> <ul> <li>Program\u00a0Specification: This part focuses on empowering users to specify their desired program behaviour with minimal input.</li> <li>System: This part handles the execution and management of your defined program.</li> </ul> <p>In the following sections, we'll provide a high-level overview of each part before delving deeper into their respective functionalities and implementation details.</p>"},{"location":"explanation/architecture/#program_specification","title":"Program Specification","text":"<p>In acoupi, a \"program\" encompasses the complete behaviour of a deployed bioacoustic sensor, including recording triggers, AI models used, data storage and communication protocols, and more. To strike a balance between ease of use and flexibility, acoupi offers multiple tiers for specifying your desired program, catering to varying levels of customisation and complexity.</p> What is a Program? <p>For more details on what a program is in the context of acoupi, read the Programs Section.</p> <p>Ideally, most users should be able to achieve their goals by simply modifying a high-level configuration layer. However, for technically oriented users, acoupi provides the ability to customise every aspect of the sensor program while still benefiting from the underlying management layer.</p>"},{"location":"explanation/architecture/#methods_of_program_specification","title":"Methods of Program Specification","text":"<p>For ease of use, acoupi offers pre-built programs that can be configured to meet specific user requirements. This approach is ideal for users who want to replicate established monitoring protocols with minor adjustments to accommodate their setup.</p> <p>However, in cases where creating a new program from scratch is necessary, acoupi provides several tools to simplify this process:</p> <ul> <li> <p>Program Templates: When you primarily need to change the AI model or make minor modifications while retaining most of the default behaviour, program templates offer a quick and easy way to create a new program.</p> </li> <li> <p>Task Templates: acoupi programs consist of various tasks, such as recording, messaging, and file management.     Task templates provide a streamlined approach to create these common tasks with customisable sections, further simplifying program development.</p> </li> <li> <p>Pre-defined Components: acoupi offers a collection of pre-defined components that provide specific functionalities, such as sending messages to a server or recording audio.     These components are designed for easy integration into program tasks.</p> </li> <li> <p>Custom Components: For scenarios requiring more specialised behaviour, acoupi enables the creation of custom components through templates or interfaces.     These ensure seamless integration with the rest of the program while providing the flexibility to tailor functionality to your exact needs.</p> </li> </ul>"},{"location":"explanation/architecture/#program_configuration","title":"Program Configuration","text":"<p>To enhance the reusability of created programs, acoupi promotes easy configurability. When creating a program, users are encouraged to specify a configuration schema, which outlines all configurable parameters. To streamline this process and ensure that provided configurations adhere to the schema, we leverage Pydantic. This guarantees that program users can confidently provide configurations that align with the program creator's intentions.</p>"},{"location":"explanation/architecture/#data_standardisation","title":"Data Standardisation","text":"<p>To ensure consistency and facilitate data flow between components and tasks, acoupi uses clearly defined data\u00a0structures for commonly handled bioacoustic sensor data, such as \"Recording\" and \"Detection\". This standardisation improves program clarity and understanding, promoting a more uniform and predictable data handling process throughout.</p> Example of a simplified acoupi program. An acoupi program illustrating some of the most important data schema, components, and tasks."},{"location":"explanation/architecture/#system","title":"System","text":"<p>The acoupi System is responsible for executing and managing user-defined programs. It facilitates user interaction to specify program selection, configuration, and deployment. Additionally, it handles configuration and program file management, ensuring the program's state remains healthy and operational. The system also guarantees robust and timely execution of program tasks.</p> <p>Key functionalities include:</p> <ul> <li> <p>Command-Line Interface (CLI): acoupi provides a CLI enabling users to instruct acoupi to execute specific programs, modify configurations, check device status, and most importantly, initiate and terminate device deployments.</p> </li> <li> <p>Management: acoupi tracks the running program, its configurations, and execution logs.     This enables observation of sensor functionality and facilitates error tracking.</p> </li> <li> <p>Orchestration: acoupi leverages Celery, an orchestration framework, to execute all tasks concurrently and in a fault-tolerant manner.     This ensures efficient and reliable program operation.</p> </li> </ul> The series of steps required to start an acoupi application.To have an acoupi application running on a device, three steps are required: (1) Installation of the acoupi package, (2) User configuration of an acoupi program, (3) Start of a deployment."},{"location":"explanation/architecture/#our_tools","title":"Our tools","text":"<p>To prioritise robustness and reliability, acoupi leverages a selection of established tools and frameworks, entrusting complex functionalities to battle-tested solutions. The acoupi package is built upon a foundation of other Python packages. The most crucial packages and their functions are summarised below. For detailed information about each package, please refer to their respective documentation.</p> <ul> <li>uv: Manages package dependencies and the development process.</li> <li>Pydantic: Handles data validation and schema enforcement.</li> <li>Pytest: Serves as the testing framework for ensuring code quality and correctness.</li> <li>Pony-ORM: Simplifies database queries and interactions.</li> <li>Celery: Manages the processing and orchestration of tasks.</li> <li>Jinja: Facilitates text templating for generating dynamic content.</li> </ul>"},{"location":"explanation/components/","title":"Components","text":""},{"location":"explanation/components/#components_acoupi_framework","title":"Components (acoupi framework)","text":"<p>The components are the building blocks of all acoupi functionality. Each component is designed to perform a specific action, such as recording audio, processing recordings, or sending messages to a remote server. They have a single responsibility and are designed to be reusable and modular.</p> <p>The set of components available in the acoupi software package was chosen to reflect the diversity of configurations across bioacoustic surveys. When researchers plan a bioacoustic survey, they are confronted with a series of questions related to the workflow of their bioacoustic sensors. Examples of questions assigned to acoupi components are:</p> <ul> <li>RecordingConditions: \u201cAt what time of the day should audio recordings be collected?\u201d</li> <li>RecordingSchedulers: \u201cHow long should the audio recordings last?\u201d</li> <li>AudioRecorder: \u201cWhat type of microphone should be used?\u201d, \u201cAt which frequency should the recordings be recorded?\u201d</li> <li>Models: \u201cHow will audio files be processed?\u201d, \u201cWhat kind of automated bioacoustic classifiers can be used?\u201d</li> <li>ModelOutputCleaners: \u201cWhich information should be kept? \u201d, \u201cWhat detection threshold should be used?\u201d</li> <li>Messengers: \"What type of network connectivity is available: WiFi, Ethernet, LoRa, Satellite?\u201d, \u201cWhat messaging protocol is used: HTTP, MQTT?\u201d, \u201cWhen should connectivity be enabled: one an hour/day/week, every positive detection?\u201d</li> <li>Saving\u00a0Managers: \u201cShould all the audio recordings be saved?\u201d</li> <li>Saving\u00a0Filters: \u201cWhat filters should be used for saving audio recordings: time based, detections based, species based?</li> <li>Store: \u201cWhere should the audio recordings and audio classifications results be saved?\u201d \u201cHow should the recordings, classifications results be saved?\u201d</li> <li>Summariser: \u201cShould a summary of the deployment, recordings, detections be created?\u201d</li> </ul>"},{"location":"explanation/components/#overview_components","title":"Overview Components","text":"Building you own components <p>Please check the How\u00a0To\u00a0Guides:\u00a0Components\u00a0Section for a step-by-step guide about building your own component, if none of the acoupi pre-built component suit your needs.</p> <p>The components mentioned aboved are abstract components (i.e., Python classes). They are examples of the abstraction concept. These abstract component classes are templates that are used by the implemented components (i.e, subclasses) of a deployed acoupi program. The implemented components are called \u201csubclasses\u201d, as they inherit from the abstract component classes.</p> <p>Below we provide details about each of the abstract components and mentioned the currently available pre-built subclasses for each.</p>"},{"location":"explanation/components/#recording_conditions","title":"Recording Conditions","text":"<p>The types.RecordingConditions component is in charge of verifying if a certain condition for recording is met, such as checking whether or not it is time for the system to record audio files. Acoupi comes with the class <code>IsInIntervals</code> configured. The class implement the <code>should_record()</code> method that takes datetime.datetime objects <code>start_recording</code> and <code>end_recording</code> and returns a boolean indicating if a recording should be made at that time.</p>"},{"location":"explanation/components/#recording_schedulers","title":"Recording Schedulers","text":"<p>The types.RecordingSchedulers component defines how often recordings should be made. This is useful for example if you want to record at a constant interval, or if you want to record at a variable interval, such as every 10 minutes during the day and every 30 minutes at night. The Recording Schedulers implement the <code>time_until_next_recording()</code> method, which returns the time in seconds until the next recording should be made.</p>"},{"location":"explanation/components/#audio_recorder","title":"Audio Recorder","text":"<p>The types.AudioRecorder component defines how to record audio files. The AudioRecorde' subclass called <code>PyAudioRecorder</code> configures the parameters of recordings. It uses multiple arguments such as the recording duration <code>audio_duration</code>, the sample rate <code>samplerate</code>, the number of audio_channels <code>audio_channels</code>, the device index <code>device_index</code> and the audio chunk size <code>chunksize</code>. The class and subclass implement the <code>record()</code> method.</p>"},{"location":"explanation/components/#model","title":"Model","text":"<p>The types.Model component is in charge of processing a recording and generating predictions. This includes running machine learning models to detect specific sounds or patterns in the audio. Define the model that is employed to analyse audio recordings. Here, the class name refers to the bioacoustic model name that detect, classify or identify related species in audio recordings. Acoupi comes with two pre-built models BatDetect2 for UK Bat species detection and BirdNET for bird species classification. The <code>Model</code> class should implement the <code>run()</code> method that takes the path of the audio recording files.</p>"},{"location":"explanation/components/#model_output_cleaners","title":"Model Output Cleaners","text":"<p>The types.ModelOutputCleaners component defines how a recording and its associated detections should be handled. The subclass <code>ThresholdDetectionFilter</code> takes as argument a threshold value to determine how to clean the raw detections. The detections below the threshold are deleted, the detections above the threshold are kept.</p>"},{"location":"explanation/components/#recording_saving_filters","title":"Recording Saving Filters","text":"<p>The types.RecordingSavingFilters component defines conditions for saving the audio recordings. The class implements many subclasses such as <code>BeforeDawnDusk</code>, <code>AfterDawnDusk</code>, <code>SaveIfInInterval</code>, <code>FrequencySchedule</code>, <code>FocusSpeciesRecordingFilter</code>. The SavingFilters class is optional. If not defined, audio files by default will not be saved.</p>"},{"location":"explanation/components/#recording_saving_managers","title":"Recording Saving Managers","text":"<p>The types.RecordingSavingManagers component defines where and how the audio recordings should be saved such as saving recordings into a specific format and at a specific location (i.e., RPi SDcard, external harddrive, folder XX/YY). The class implements two subclasses <code>IDFileManager</code> and <code>DateFileManager</code>.</p>"},{"location":"explanation/components/#messengers","title":"Messengers","text":"<p>The types.Messengers component defines how to send detections (i.e., clean model outputs) to a remote server. The class implements two subclasses <code>MQTTMessenger</code> and <code>HTTPMessenger</code>.</p>"},{"location":"explanation/components/#stores","title":"Stores","text":"<p>The types.Stores component is in charge of storing the information ofwhat recordings and detections have been made. This includes storing metadata about the recordings and detections, such as the date and time of the recording, and the type of animal or sound detected. The class implements the subclass <code>SqliteStore</code>.</p>"},{"location":"explanation/components/#message_stores","title":"Message Stores","text":"<p>The types.MessageStores component is charge of storing information about which messages have been successfully sent or are missing. This allows retrying sending messages if they fail to send, or that can log the status of messages for later analysis.</p> <p>By combining these categories of components, it is possible to create complex programs that can perform a wide variety of monitoring tasks. Each component can be configured to operate in a specific way, and can be combined with other components to create customised functionality.</p>"},{"location":"explanation/components/#summarisers","title":"Summarisers","text":"<p>The types.Summariser component is responsible for summarising information related to the deployment of acoupi, its recordings and detections. The class implement two subclasses <code>StatisticsDetectionsSummariser</code> and <code>ThresholdsDetectionsSummariser</code>.</p>"},{"location":"explanation/data_schema/","title":"Data Schema","text":""},{"location":"explanation/data_schema/#data_acoupi_framework","title":"Data (acoupi framework)","text":"<p>The data layer is the most basic layer of the acoupi framework. It is responsible for defining the relevant bits of information about the functionality of the device and the information it collects. <code>acoupi</code> uses Python's\u00a0type\u00a0hinting extensively to clearly indicate the kinds of objects handled and produced by different parts of the system. The data layer ensures that the data handled by the other layers of acoupi is validated and the flow of information between layers is consistent and easy to understand.</p>"},{"location":"explanation/data_schema/#why_is_the_data_layer_important","title":"Why is the Data Layer Important?","text":"<p>Understanding the data layer is crucial when you're customising acoupi components or building your own tasks. It provides a clear and consistent structure for the information flowing through your program.</p> <p>Think of it like this: the data layer defines the \"language\" that different parts of your acoupi program use to communicate. By using specific data objects with defined types, you ensure that everyone is on the same page.</p> <p>For example, consider the definition of a <code>Model</code> in acoupi:</p> <pre><code>from acoupi import data\n\nclass Model:\n    def run(self, recording: data.Recording) -&gt; data.ModelOutput:\n        ...\n</code></pre> <p>This tells us that a <code>Model</code> in acoupi takes a <code>Recording</code> object as input and produces a <code>ModelOutput</code> object. The data layer defines exactly what information these objects contain and how they're structured. This makes development much easier because:</p> <ul> <li>You know what to expect: You can rely on the data objects having specific attributes and types.</li> <li>Code completion helps: Your code editor can assist you by autocompleting data fields and catching potential errors.</li> <li>Collaboration is smoother: Everyone working with acoupi understands the shared data structure.</li> </ul>"},{"location":"explanation/data_schema/#acoupi_data_objects","title":"acoupi Data Objects","text":"<p>acoupi comes with pre-built data objects. These are defined in the <code>acoupi.data</code> module. Below is an overview of a short selection of them.</p>"},{"location":"explanation/data_schema/#deployment","title":"Deployment","text":"<p>A deployment object holds all the information about a specific deployment. This includes information about the device, the location where the device is deployed, and the starting date. A deployment can be created by instantiating a <code>data.Deployment</code> class.</p>"},{"location":"explanation/data_schema/#recording","title":"Recording","text":"<p>A recording object represents a single recording made by the device. It contains information about the recording, such as the date and time when the recording was made, the duration and samplerate of the recording, and an optional path to the audio file. A recording can be created by instantiating the <code>data.Recording</code> class.</p>"},{"location":"explanation/data_schema/#tag_predicted_tag_boundingbox_and_detection","title":"Tag, Predicted Tag, BoundingBox, and Detection","text":"<p>AI bioacoustic models have different methods of handling audio files.</p> <p>A bounding box object represents the location of a sound event in time and frequency. It contains information about the start time and end time in seconds and the low frequency and high frequency in Hz of a sound event.</p> <p>A detection object represents a single detection made by a model. It contains information about the specific recording the detection was made, the species that were detected using the <code>data.PredictedTag</code> class, and the score of the detection. A detection can be created by instantiating a <code>data.Detection</code> class.</p> <p>A predicted tag object represents the label predicted by a model. It consists of a <code>data.Tag</code> object made of a key and a value, and a confidence score.</p>"},{"location":"explanation/data_schema/#messages","title":"Messages","text":"<p>A message object represents a single message sent by the device. It contains information about the message, such as the date and time when the message was created, the type of the message, and the content of the message. A message can be created by instantiating a <code>data.Message</code> class.</p>"},{"location":"explanation/data_schema/#response","title":"Response","text":"<p>A response object represents a single response received by the device when sending a message. It contains information about the response, such as the date and time when the message was sent, the status of the response (i.e. success, failed, error, timeout), and the content of the response. A response can be created by instantiating a <code>data.Response</code> class.</p> Leveraging Pydantic for defining data schemas <p>We use the Pydantic library to build acoupi data objects.</p>"},{"location":"explanation/programs/","title":"Programs","text":""},{"location":"explanation/programs/#programs_acoupi_framework","title":"Programs (acoupi framework)","text":"<p>An acoupi program is a set of instructions that dictate the behaviour of a smart bioacoutics sensor.  It defines the tasks the sensor performs, how those tasks are configured, and the underlying execution environment. The program is the heart of an acoupi application.</p>"},{"location":"explanation/programs/#elements_of_programs","title":"Elements of Programs","text":"<p>An acoupi program include three essential elements: tasks, configuration schema, and worker configuration. Tasks outline the operations within the program. A configuration schema defines the program's configuration structure, and worker configuration governs task execution.</p> <ul> <li> <p>Tasks outline the operations of a program, these are individual units of work performing a set of specific actions. Tasks are orchestrated by an acoupi program by specifying the task function, its schedule and dependencies.</p> <ul> <li>Function: The functionality of the task. This is the sequence of acoupi components specifiying what actions the task perform.</li> <li>Schedule: When and how often the task runs (e.g., continuously, at specific intervals, triggered by an event).</li> <li>Dependencies: How the task relates to other tasks in the program (e.g., does it need to run before or after another task?).</li> </ul> </li> <li> <p>Configuration Schema: This acts as a blueprint for customising your program.     It defines the parameters and options that users can modify to adjust the program's behavior.     A well-defined schema ensures your program is flexible and adaptable to different needs and scenarios.</p> </li> <li> <p>Worker Configuration: This encompasses lower-level settings related to how the program runs on the device.     For simplicity, this guide uses the default worker configuration, allowing you to focus on the core aspects of program design.</p> </li> </ul> <p>To represent these program elements in code, acoupi defines a Python class called <code>AcoupiProgram</code> (<code>acoupi.programs.AcoupiProgram</code>). This class encapsulates all the necessary information for acoupi to execute a program on a device.</p> Overview of an acoupi application. A configuration schema provides the settings to run acoupi program's tasks. Acoupi workers are configured to orchestrate and execute the tasks.  <p>Tip</p> <p>Acoupi offers users the flexibility to either develop your own custom programs or deploy existing ones. Please refer to the Tutorials for step-by-step instructions on how to configure and deploy pre-built programs, and the How-to\u00a0Guides:\u00a0Programs for a detailed guide on how to create your own custom program.</p>"},{"location":"explanation/programs/#program_configuration","title":"Program Configuration","text":"<p>Each program within acoupi is accompanied by a configuration schema. This schema serves as a blueprint, delineating the structure and data types of the configuration variables. Implementation of the schema is realized through a <code>pydantic.BaseModel</code> object.</p> <p>When configuring a program for execution within the acoupi framework, the associated configuration schema plays a crucial role. The schema guides the user through the definition of essential fields, facilitated by the utilisation of <code>acoupi.system.parse_config_from_args()</code> function. These configurations are subsequently stored for reference.</p> <p>During program execution, acoupi leverages the stored configurations. As the program starts, these configurations are loaded and provided to the program using the <code>acoupi.system.AcoupiProgram.setup()</code> method. This instantiation process ensures that the program is equipped with accurate and pertinent configurations.</p> <p>a dummy program</p> <pre><code>from typing import Optional\n\nfrom pydantic import BaseModel, Field\n\nfrom acoupi import components, data, tasks\nfrom acoupi.components import types\nfrom acoupi.programs.core import (\n    AcoupiProgram, \n    AcoupiWorker, \n    WorkerConfig,\n)\n\nclass DummyConfig(BaseModel):\n    key: str\n    value: int\n\nclass Dummy_ConfigSchema(BaseModel):\n    dummy: DummyConfig = Field(default_factory=DummyConfig)\n\nclass Program(AcoupiProgram[Dummy_ConfigSchema]):\n\n    configuration_schema: Dummy_ConfigSchema\n    \"\"\"Configuration Schema for a basic program.\"\"\"\n\n    worker_config =  Optional[WorkerConfig] = WorkerConfig()\n    \"\"\"Configuration for acoupi workers.\"\"\"\n\n    dummy_component: types.DummyComponent\n\n    def setup(self, config: Dummy_ConfigSchema):\n        \"\"\"Initialise program component.\"\"\"\n        self.dummy_component = self.configure_dummycomponent(config)\n        self.register_task(config)\n        super().setup(config)\n\n        def configure_dummycomponent(self, config) -&gt; types.DummyComponent:\n            return components.DefaultDummy(\n                key=config.dummy.key,\n                value=config.dummy.value,\n            )\n        \n        def create_task(self, config):\n            task_configuration = self.configure_task(config)\n            return tasks.generate_task(\n                component=self.dummy_component, \n                logger=self.logger.getChild(\"task_name\"),\n            )\n        \n        def register_task(self, config: ProgramConfig):\n            dummy_task = self.create_task(self)\n            self.add_task(\n                function=dummy_task,\n                schedule=datetime.timedelta(),\n                queue=\"queue_name\"\n            )\n</code></pre>"},{"location":"explanation/programs/#pre-built_programs","title":"Pre-Built Programs","text":"<p>acoupi provides currently a small number of pre-built programs that users can configure and deploy from a command-line interface.</p> <ul> <li> <p>default: The acoupi default program is the most basic acoupi program. This program only performs two actions, the recording and management of audio files. </p> </li> <li> <p>connected: The acoupi connected program adds messaging capabilities to the acoupi default program. This program allows users to configure a messenger to send messages to a remote server.</p> </li> <li> <p>batdetect2: The acoupi_batdetect2 program is a fully configurable program performing, recording, detection, management, and messaging actions. This program incorporates the BatDetect2 deep-learning classifier that is trained to detect and classify UK Bats species.</p> </li> <li> <p>birdnet: The acoupi_birdnet program is a fully configurable program performing, recording, detection, management, and messaging actions. This program incorporates the BirdNET deep-learning classifier that is trained to detect and classify bird species.</p> </li> </ul>"},{"location":"explanation/system/","title":"System","text":""},{"location":"explanation/system/#system","title":"System","text":"<p>This section provides an in-depth exploration of acoupi's System module. The System is responsible for ensuring the accurate execution of user-defined programs.</p> Intended Audience <p>This section is geared towards individuals interested in understanding or modifying low-level settings or contributing to acoupi's core development.</p> Pre-requisites <p>Before proceeding, please ensure you have familiarised yourself with the following sections of the Explanation:</p> <ul> <li>Data Schema</li> <li>Components</li> <li>Tasks</li> <li>Programs</li> </ul>"},{"location":"explanation/system/#overview","title":"Overview","text":"<p>As outlined in the architecture section, the acoupi system can be conceptually divided into three interconnected parts:</p> <ul> <li> <p>CLI: This provides a user interface for selecting and configuring the desired program, deploying the device with the setup program, and checking its status.</p> </li> <li> <p>Management Layer: This layer manages program and configuration files, ensuring proper setup for program execution, and maintains logs and tracks the program's state.</p> </li> <li> <p>Orchestration: This part handles the robust execution of the program.</p> </li> </ul> <p>In the following sections, we'll elaborate on how these parts work together to enable users to run their programs.</p> Overview of the inner-working of an acoupi application. An acoupi program is executed using the Celery framework. Celery works in the background to organise the execution of acoupi tasks using queues and workers."},{"location":"explanation/system/#1_cli","title":"1. CLI","text":"<p>The acoupi CLI serves as the primary interface between the users and acoupi systems. It empowers users to perform the following key actions:</p> <ul> <li>Program Selection: Users can define the desired program and its associated configurations.</li> <li>Configuration Management: The CLI allows users to view, modify, and fine-tune configurations.</li> <li>Configuration Validation: A crucial step before deployment, the CLI enables users to verify the correctness of their current configurations.</li> <li>Device Deployment: Users can initiate device deployment with the specified program and configurations.</li> <li>Status Monitoring: The CLI provides a means to check the current status of acoupi.</li> <li>Deployment Termination: Users can gracefully stop the ongoing deployment.</li> </ul> <p>The acoupi CLI offers step-by-step configuration wizards and provides valuable feedback on user inputs. For a comprehensive list of available commands and their usage instructions, refer to the documentation for the <code>acoupi.cli</code> module. The CLI is built using the Click framework.</p>"},{"location":"explanation/system/#2_management","title":"2. Management","text":"<p>The acoupi System manages the system setup to align with user needs. This involves tracking the selected program, configurations, and deployment details. Furthermore, the System actively maintains synchronization of the files necessary for program execution. To facilitate observability and error identification, acoupi maintains comprehensive logs.</p>"},{"location":"explanation/system/#home_directory","title":"Home Directory","text":"<p>acoupi centralizes all essential data and files within the <code>ACOUPI_HOME</code> directory. By default, this directory is set to <code>$HOME/.acoupi</code>, but users can customise its location by modifying the <code>ACOUPI_HOME</code> environment variable.</p> <p>Warning</p> <p>It's important to note that the user need not actively interact with these files, and their existence is ideally kept hidden to prevent unintended modifications that might disrupt system functionality.</p> <p>Here's a concise overview of the files and structure within the acoupi home directory:</p> <pre><code>.\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 bin\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 acoupi-beat.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 acoupi-workers-restart.sh\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 acoupi-workers-start.sh\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 acoupi-workers-stop.sh\n\u251c\u2500\u2500 config\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 celery.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 program.json\n\u251c\u2500\u2500 log\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 default.log\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 recording.log\n\u2514\u2500\u2500 run\n\u00a0\u00a0\u00a0 \u251c\u2500\u2500 celery-beat.pid\n\u00a0\u00a0\u00a0 \u2514\u2500\u2500 celery-worker-1.pid\n</code></pre>"},{"location":"explanation/system/#tracking_program_and_configurations","title":"Tracking Program and Configurations","text":"<p>When the user specifies the program to run and/or modifies configurations, acoupi updates the following files:</p> <ul> <li><code>$ACOUPI_HOME/app.py</code>: This Python script loads and exposes the currently selected program along with its configurations to Celery, effectively instructing its execution.</li> <li><code>$ACOUPI_HOME/config/program.json</code>: This JSON file stores the user-provided configurations for the program execution.</li> </ul>"},{"location":"explanation/system/#execution_files","title":"Execution Files","text":"<p>acoupi generates scripts within the <code>$ACOUPI_HOME/bin</code> folder to manage Celery operations (start, stop, restart, and schedule tasks). These scripts direct Celery to utilise the <code>$ACOUPI/app.py</code> file for the definition of the Celery app, which encapsulates the acoupi program to be executed.</p>"},{"location":"explanation/system/#logs_and_status","title":"Logs and Status","text":"<p>The <code>logs</code> directory serves as a repository for logs generated by Celery workers during program execution. Concurrently, the <code>run</code> directory stores the PID (process ID) files of actively running jobs, aiding in process management and monitoring.</p>"},{"location":"explanation/system/#code_generation","title":"Code Generation","text":"<p>acoupi employs templates located in the <code>acoupi/templates</code> folder to dynamically generate the files within <code>ACOUPI_HOME</code>. These templates are populated with user-provided configurations using the Jinja2 template engine. This ensures that the generated files within <code>ACOUPI_HOME</code> accurately reflect the user's specific settings.</p>"},{"location":"explanation/system/#3_orchestration","title":"3. Orchestration","text":"<p>Upon deployment initiation, acoupi invokes the necessary steps to prepare the device for program execution. It utilises Celery as the framework to execute and schedule tasks. acoupi initialises Celery workers and starts executing the Celery app defined within the current acoupi program. Simultaneously, systemd is employed to install acoupi as a system service, ensuring automatic restarts in case of failures or system reboots.</p>"},{"location":"explanation/system/#celery_app","title":"Celery App","text":"<p>A crucial aspect of running a program with Celery is designating a Celery\u00a0app. acoupi does this by dynamically generating an <code>app.py</code> Python script based on user configurations. This script serves as a bridge, exposing the required Celery app.</p> <p>The acoupi.system.get_celery_app() function loads the AcoupiProgram and user configurations, then executes the setup method to integrate user-defined tasks into the Celery app. More generally, the functions used to manage celery are all located in the <code>acoupi.system.celery</code> module.</p>"},{"location":"explanation/system/#workers","title":"Workers","text":"<p>Celery workers execute tasks by fetching them from queues, ensuring balanced workload distribution. Typically, one worker per machine suffices as each worker can handle multiple tasks concurrently. However, in bioacoustic sensor systems, certain tasks might necessitate exclusive hardware resources, like microphone inputs, precluding simultaneous execution.</p> <p>To address this, Celery allows the creation of multiple queues, enabling specific workers to fetch tasks from designated queues. This approach grants flexibility by permitting sequential task processing within a particular queue (concurrency of 1), while other workers handle tasks concurrently in other queues. The AcoupiWorker class allows for configuring multiple workers and organizing them into an WorkerConfig object. This configuration is then utilised when creating the AcoupiProgram.</p> <p>Example</p> <pre><code>    from acoupi.programs import WorkerConfig, AcoupiWorker, AcoupiProgram\n\n    worker_config = WorkerConfig(\n        workers=[\n            AcoupiWorker(\n                name=\"recording\",\n                queues=[\"recording\"],\n                concurrency=1,\n            ),\n            AcoupiWorker(\n                name=\"default\",\n                queues=[\"celery\"],\n            ),\n        ],\n    )\n\n    class MyProgram(AcoupiProgram):\n        worker_config = worker_config\n\n        ...\n</code></pre> <p>This approach allows precise control over task distribution and resource allocation within your acoupi programs. If not specified, a single worker is created by default.</p> <p>The program configuration is used to generate the <code>acoupi-workers-{stop|start|restart}.sh</code> files. For more info look at the <code>acoupi.system.scripts</code> module on how they are generated.</p>"},{"location":"explanation/system/#systemd_units","title":"Systemd Units","text":"<p>acoupi generates service units that are installed as user units. When deployment starts, the unit is enabled and initiated. Consequently, systemd manages the initialization, restart, and shutdown of Celery workers and their execution, ensuring robust integration of acoupi programs into the system.</p> <p>In particular, acoupi uses the <code>acoupi.system.services</code> module to generate, install and manage the systemd unit files.</p>"},{"location":"explanation/tasks/","title":"Tasks","text":""},{"location":"explanation/tasks/#tasks_acoupi_framework","title":"Tasks (acoupi framework)","text":"<p>Tasks are individual units of work performing a set of specific actions. These are built as a sequence of one or more acoupi components.  The acoupi framework defines 6 tasks recording, detection, messaging, management, summary, and heartbeat. </p>"},{"location":"explanation/tasks/#overview_tasks","title":"Overview Tasks","text":"a dummy acoupi task <pre><code>import logging\nfrom typing import Optional\n\nfrom acoupi import data\nfrom acoupi.components import types\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\ndef generate_dummy_acoupi_task(\n    component_1: types.DummyComponent1,\n    component_2: types.DummyComponent2,\n    logger: logging.Logger = logger, \n) -&gt; Optional[data.DataSchema]:\n    \"\"\"Generate a dummy task using various acoupi components.\"\"\"\n\n    def dummy_acoupi_task() -&gt; Optional[data.DataSchema]:\n        \"\"\"Create the structure of a dummy task.\"\"\"\n\n        output = component_1.associated_method_one()\n        result = component_2.associated_method_two(output)\n\n        logger.info(f\"Dummy Task result is: {result}\")\n\n    return dummy_acoupi_task\n</code></pre>"},{"location":"explanation/tasks/#recording","title":"Recording","text":"<p>The Recording task is responsible for recording an audio file and storing the metadata in the store. The recording task builds upon the acoupi components: <code>AudioRecorder</code> to capture the audio, <code>RecordingCondition</code> to determine whether a recording should occur, and <code>Store</code> to save the metadata of a recording.</p> Example of the audio recording task. The audio recording is made of various acoupi components: RecordingCondition, RecordingScheduler, AudioRecording, and Store.  <p>Structure of a recording task</p> <pre><code>from acoupi import components, tasks\n\nrecording_task = tasks.generate_recording_task(\n    recorder=components.PyAudioRecorder(),\n    store=components.SqliteStore(),\n    recording_conditions=components.IsInInterval(),\n    logger=logger.getChild(\"recording\"),\n)\n</code></pre>"},{"location":"explanation/tasks/#detection","title":"Detection","text":"<p>The Detection task is responsible for processing audio files. The task builds upon the acoupi components: <code>ProcessingFilter</code> to determine if a recording should be processed, <code>Model</code> to run an audio classifier model, <code>ModelOutputCleaner</code> to cleans the model outputs, <code>MessageBuilder</code> to generate messages with the detected information, and <code>Store</code> and <code>MessageStore</code> to save the metadata of the procesed recordings and store the messages to be sent.</p> Example of the detection task. The detection process audio recordings, it is made of various acoupi components: Model, ModelOutputCleaner, Store, MessageBuilder, and MessageStore.  <p>Structure of a detection task using BatDetect2 classifier</p> <pre><code>from typing import Optional\n\nfrom acoupi import components, data, tasks\n\nfrom acoupi_batdetect2.model import BatDetect2\n\nrecording_task = tasks.generate_detection_task(\n    store=components.SqliteStore(),\n    model=BatDetect2()\n    message_store=components.SqliteMessageStore(),\n    message_factories=[components.FullModelOutputMessageBuilder()],\n    logger=logger.getChild(\"detection\"),\n    output_cleaners=Optional[components.ThresholdDetectionCleaner()],\n)\n</code></pre>"},{"location":"explanation/tasks/#messaging","title":"Messaging","text":"<p>The Messaging task is responsible responsible for communication with a remote server. It uses the <code>Messenger</code> component to define the communication protocol for sending messages, and the <code>MessageStore</code> component to check if there are any pending messages to need to be sent.</p>"},{"location":"explanation/tasks/#management","title":"Management","text":"<p>The Management task is responsible for managing recording files. It handles the saving, deletion, and movement of files using the <code>SavingFilters</code> and <code>SavingManagers</code> components, and keep track of files movements by updating the store.</p> Example of the messaging and management tasks. The message task sends messages to a remote server, while the management task handles the movement, saving, and deletion of recordings. Components used in both tasks include: Messenger, SavingFilters, SavingManagers, Store, and MessageStore."},{"location":"explanation/tasks/#summary","title":"Summary","text":"<p>The Summary task is responsible for generating summary messages to be sent to a remote server. It uses the <code>Summariser</code> component along with the <code>Messenger</code> component to define the communication protocol for sending these messages. </p> <p>The summary task is useful for providing aggregated information on detections over specific time periods such as hourly, daily, or weekly.</p>"},{"location":"explanation/tasks/#heartbeat","title":"Heartbeat","text":"<p>The Heartbeat task is responsible for creating and sending heartbeat to a remote server. Heartbeat messages confirm that a remotely deployed device is up and running. They are sent at regular intervals so that if a message isn't received as expected, the user is alerted that there might be an issue with the system, such as a power outage or loss of connectivity.</p> <p>By default, a heartbeat message contains two key pieces of information: the device ID and the timestamp when the message was created and sent. The task uses the <code>Messenger</code> component to define the communication protocol for sending these messages.</p> <p>Heartbeat tasks are also useful for sending updates like program status or daily reports, including details about available storage and battery capacity.</p>"},{"location":"explanation/tasks/#understanding_tasks","title":"Understanding Tasks","text":"<p>In an acoupi program, tasks are characterised by three elements:</p> <ul> <li>Function: The functionality of the task. This is the sequence of acoupi components specifiying what actions the task perform.</li> <li>Schedule: When and how often the task runs (e.g., continuously, at specific intervals, triggered by an event).</li> <li>Dependencies: How the task relates to other tasks in the program (e.g., does it need to run before or after another task?).</li> </ul> Info <p>Please refer to Explanation:\u00a0System\u00a0Section to learn more about the registration and orchestration of the tasks in an acoupi program using the Celery app.</p>"},{"location":"howtoguide/","title":"How-To Guides","text":""},{"location":"howtoguide/#how-to_guides","title":"How-To Guides","text":"<p>Welcome to the How-To Guides Section of acoupi.</p> <p>This section of the documentation is intended for users who are already familiar with acoupi, and need to create new acoupi elements to meet their requirements. The How-To Guide have more in-depth detail information than the tutorials and should help users create acoupi elements for their specific use cases.</p> How-To Guides Get Stuff Done Create custom programs Learn how to create a custom program Create new components Learn how to create new components Create new data objects Learn how to create new data objects <p>New to acoupi?</p> <p>If you want to get started with acoupi, look at the Tutorials section providing step-by-step information to help you install, configure, and deploy acoupi.</p> <p>How acoupi works</p> <p>To get a better understanding of the key elements of acoupi have a read at the Explanation section of the documentation. Illustrations and examples should provide you with easy-to-follow descriptions about the structure of the code.</p> <p>acoupi Reference</p> <p>Take a look at the Reference section of the documentation to know which options are available and can be used \"out-of the box\".</p> <p>Suggest a How-To Guide</p> <p>We are interested to expand the number of how-to guides so users can gain more detailed information about specific elements of acoupi. If you feel we should do a how-to guide about \"XYZ\", please reach out!</p>"},{"location":"howtoguide/components/","title":"Create new components","text":""},{"location":"howtoguide/components/#create_custom_components","title":"Create Custom Components","text":"<p>acoupi comes with a series of pre-defined components that allow the customisation of acoupi tasks, such as recording audio at specific time of the day or sending messages to a remote server using specific messaging protocols (e.g., MQTT, HTTP).</p> <p>For use cases requiring more specialised behaviour, new custom components can be created. There are two different processes to create new components.</p> <ol> <li>Case 1: Create components from pre-built templates</li> <li>Case 2: Create components from scratch</li> </ol> Component Inheritance? <p>Pre-built templates are abstract components inherited from types. When creating a new component, it is important to understand the difference   between creating a new abstract class with an associated subclass or creating a new subclass inheriting from pre-built abstract classes. See Example Sections below for examples of pre-built abstract classes and subclass.</p>"},{"location":"howtoguide/components/#1_create_components_from_pre-built_templates","title":"1. Create components from pre-built templates","text":"<p>Pre-built templates are the abstract component classes defined in acoupi module components/types.py. These templates defined the functions of an acoupi's component, yet requires implementation to be integrated into program tasks.</p> <p>Example of abstract components (types.py).</p> <pre><code>from abc import ABC, abstractmethod\n\nfrom acoupi import data\n\nclass Component(ABC):\n      \"\"\"An abstract component.\"\"\"\n\n      @abstractmethod\n      def component_method(self, input) -&gt; output\n\n\nclass RecordingCondition(ABC):\n      \"\"\"A component to decide if a recording should be made.\"\"\"\n\n      @abstractmethod\n      def should_record(self) -&gt; bool\n\n\nclass Model(ABC):\n      \"\"\"A component to run a model on a recording and ouput predictions.\"\"\"\n\n      @abstractmethod\n      def run(self, data.Recording) -&gt; data.ModelOutput\n</code></pre> <p>Is there an abstract component that would suit a newly created component subclass? If so, the new component subclass should inherit from the abstract component. An example of a new component subclass could be one that specifies when recordings should occur.</p> <p>Create new subclass inheriting from types.RecordingConditions.</p> <pre><code>import datetime\n\nfrom astral import LocationInfo\nfrom astral.sun import sun\n\nfrom acoupi import data\nfrom acoupi.components import types\n\nclass DawnTimeInterval(types.RecordingConditions):\n      \"\"\"A RecordingCondition that records within a time interval before and after dawn.\"\"\"\n\n      duration: float\n      \"The duration of time (in minutes) where recording should occur.\"\n\n      timezone: datetime.tzinfo\n      \"\"\"The timezone of the deployed device to get the dawn time.\"\"\"\n\n      time: datetime.datetime\n      \"\"\"The current time. Check if it falls within the interval.\"\"\"\n\n      def __init__(self, duration, timezone, time):\n            self.duration = duration\n            self.timezone = timezone\n            self.time = time\n\n      def should_record(self) -&gt; bool\n            \"\"\"Determine if a recording should be made.\"\"\"\n\n            sun_info = sun(\n                  LocationInfo(str(self.timezone)).observer,\n                  date=self.time.astimezone(self.timezone),\n                  tzinfo=self.timezone,\n            )\n\n            dawntime = sun_info[\"dawn\"]\n\n            start_dawninterval = dawntime - datetime.timedelta(minutes=self.duration)\n            end_dawninterval = dawntime + datetime.timedelta(minutes=self.duration)\n\n            return start_dawninterval.time() &lt;= self.time.time() &lt;= end_dawninterval.time()\n</code></pre>"},{"location":"howtoguide/components/#2_create_components_from_scratch","title":"2. Create components from scratch","text":"<p>If the component you wish to implement does not fit into any of the pre-built abstract classes, then you should try to define a simple template as described in the example of abstract components with input and output parameters that uses the data objects such as the ones defined in <code>data_schema</code>.</p>"},{"location":"howtoguide/data_schema/","title":"Create new data schema","text":""},{"location":"howtoguide/data_schema/#creating_a_new_data_object","title":"Creating a new data object","text":"<p>Creating a new data object with Pydantic involves defining a Python class that inherits from <code>pydantic.BaseModel</code>. This class acts as a blueprint for instances of the data object, specifying the attributes and their types. The keys steps and requirements for creating a new acoupi data objects are the following:</p> <p>Step 1: In <code>/src/acoupi/data.py</code> define a data object class that inherit from <code>BaseModel</code>.</p> <p>New Data Object.</p> <pre><code>from pydantic import BaseModel\n\nclass YourDataObject(BaseModel):\n    # Attributes for the class\n</code></pre> <p>Step 2: Declare the attributes of the new data object as the class variables.       Specify the attributes' data types using Python type hints.       Optionally, set default values for the attributes.</p> <p>Adding Attributes.</p> <pre><code>from pydantic import BaseModel\nfrom pathlib import Path\n\nclass YourDataObject(BaseModel):\n    attribute1: float = 0.5\n    \"\"\"Attribute 1\"\"\"\n\n    attribute2: str\n    \"\"\"Attribute 2\"\"\"\n\n    attribute3: Path\n    \"\"\"Attribute 3\"\"\"\n</code></pre> <p>Step 3 (Optional): Implement custom validation logic using Pydantic's\u00a0validation\u00a0methods such as <code>@field_validatior</code> and <code>@model_validator</code>.</p> <p>Add custom validation logic</p> <pre><code>from pydantic import BaseModel, field_validator\n\nclass YourDataObject(BaseModel):\n    attribute1: int = 0.5\n    attribute2: str\n\n    @field_validator(\"attribute1\")\n    def validate_attribute1(cls, value):\n    \"\"\"Check that attribute1 is a float between 0 and 1.\"\"\"\n    if value &lt; 0 or value &gt; 1:\n            raise ValueError(\"attribute1 must be between 0 and 1\")\n        return value\n</code></pre>"},{"location":"howtoguide/programs/","title":"Create a custom program","text":""},{"location":"howtoguide/programs/#create_a_custom_program","title":"Create a custom Program","text":""},{"location":"howtoguide/programs/#introduction","title":"Introduction","text":"<p>While acoupi offers a variety of pre-built programs and community contributions, you might need to create a custom program for your specific needs. This guide provides a comprehensive overview of how to create a custom program using the acoupi framework.</p> <p>Here's what we'll cover:</p> <ol> <li>Building a Program: You'll learn the essential steps involved in creating a custom program.</li> <li>Tools for Program Creation: Discover the tools and features acoupi provides to simplify the development process.</li> </ol> <p>Before diving in!</p> <p>This section is aimed at individuals interested in developing their own program. Make sure you have read the sections of the Explanation of the documentation before going through this technical how-to guide. </p>"},{"location":"howtoguide/programs/#understanding_acoupi_programs","title":"Understanding acoupi Programs","text":"<p>An acoupi program is of a set of instructions that dictate how a smart bioacoustic sensor behaves. It defines the tasks the sensor performs, how those tasks are configured, and the underlying execution environment.</p> <p>To define an acoupi program, you need to specify three key elements:</p> <ul> <li>Tasks: The individual units of work carried out by your program. </li> <li>Configuration Schema: A \"blueprint\" establishing the parameters and options that users can configured to adjust the program behaviour.</li> <li>Worker Configuration: The lower-level settings defining how to orchestrate the tasks and runs the program on a device. </li> </ul> <p>To represent these program elements in code, acoupi defines a Python class called <code>AcoupiProgram</code> (<code>acoupi.programs.AcoupiProgram</code>). This class encapsulates all the necessary information for acoupi to execute a program on a device.</p>"},{"location":"howtoguide/programs/#building_a_program","title":"Building a Program","text":"<p>To create a custom program in acoupi, you'll define a new Python class that inherits from the <code>AcoupiProgram</code> class. This new class will encapsulate the tasks, configuration schema, and worker configuration for your program.</p> <p>Here's a basic example of a custom program:</p> <pre><code>from acoupi.programs import AcoupiProgram, DEFAULT_WORKER_CONFIG\nfrom pydantic import BaseModel\n\nclass MyProgramConfig(BaseModel):\n    name: str = \"acoupi\"  # Define a configuration option named 'name'\n\nclass MyCustomProgram(AcoupiProgram):\n    worker_config = DEFAULT_WORKER_CONFIG  # Use the default worker config\n    config_schema = MyProgramConfig  # Specify the configuration schema\n\n    def setup(self, config):  # Define the program's tasks\n        def my_custom_task():\n            print(f\"Hello {config.name}!\")  # Access config values within tasks\n\n        self.add_task(my_custom_task, schedule=60)  # Add a task that runs every 60 seconds\n</code></pre> <p>Let's break down the key elements:</p>"},{"location":"howtoguide/programs/#inherit_from_the_base_class","title":"Inherit from the Base Class","text":"<pre><code>class MyCustomProgram(AcoupiProgram):\n    ...\n</code></pre> <p>This line indicates that <code>MyCustomProgram</code> is a specialised type of <code>AcoupiProgram</code>, inheriting its core functionality and structure. This is essential for acoupi to recognise and execute your custom program.</p>"},{"location":"howtoguide/programs/#create_a_configuration_schema","title":"Create a Configuration Schema","text":"<pre><code>class MyProgramConfig(BaseModel):\n    name: str = \"acoupi\"\n</code></pre> <p>We use Pydantic's <code>BaseModel</code> to define the configuration schema. This schema specifies the options users can adjust to customise the program's behaviour. In this example, the schema includes a single field called <code>name</code> (of type <code>str</code>) with a default value of \"acoupi\". Pydantic offers valuable features like data validation and type hints, ensuring that configuration values are valid and match the expected types.</p> <p>To link your configuration schema to your custom program, you'll need to define the <code>config_schema</code> attribute within your <code>AcoupiProgram</code> subclass. This tells acoupi which schema to use when validating and processing configuration values for your program.</p> <pre><code>class MyCustomProgram(AcoupiProgram):\n    ...\n\n    config_schema = MyProgramConfig  # &lt;- This indicates that this is the configuration schema for this program\n</code></pre>"},{"location":"howtoguide/programs/#provide_a_worker_configuration","title":"Provide a Worker Configuration","text":"<pre><code>...\nfrom acoupi.programs import DEFAULT_WORKER_CONFIG\n...\n\nclass MyProgramConfig(AcoupiProgram):\n    ...\n    worker_config = DEFAULT_WORKER_CONFIG\n    ...\n</code></pre> <p>This line sets the <code>worker_config</code> attribute to <code>DEFAULT_WORKER_CONFIG</code>, utilising the standard worker configuration provided by acoupi. The worker configuration handles lower-level aspects of program execution, which we'll keep at their default settings for now.</p>"},{"location":"howtoguide/programs/#define_tasks","title":"Define Tasks","text":"<p>The core of your acoupi program lies in its tasks \u2013 the individual units of work that define the sensor's behaviour. You define these tasks within the setup method of your <code>AcoupiProgram</code> subclass.</p> <pre><code>    ...\n\n    def setup(self, config):\n        def my_custom_task():\n            print(f\"Hello {config.name}!\")\n\n        self.add_task(\n            my_custom_task,\n            schedule=10\n        )\n</code></pre> <p>The <code>setup</code> method is where you define the tasks your program performs. It receives the program's configuration (<code>config</code>) as an argument, allowing tasks to access and utilise those settings.</p> <p>In this example, we define a function called <code>my_custom_task</code>. This function encapsulates the logic for a single task. Here, it simply prints a greeting using the <code>name</code> value from the program's configuration.</p> <p><code>self.add_task(...)</code> is the method that registers your task with the program. It takes two key arguments: The first argument is the function that defines the task's logic (e.g., <code>my_custom_task</code>). The second argument, schedule, determines how the task is executed. In this case, <code>schedule=60</code> instructs acoupi to run this task every 60 seconds.</p>"},{"location":"howtoguide/programs/#scheduling_options","title":"Scheduling Options","text":"<p>acoupi provides flexible options for scheduling tasks:</p> <ul> <li>Intervals:</li> </ul> <p>Specify a number (in seconds) to run the task at regular intervals. For more fine-grained control over intervals, use <code>datetime.timedelta</code> objects:</p> <pre><code>import datetime\n\n...\n\n    def setup(self, config):\n        ...\n\n        self.add_task(\n            my_custom_task,\n            schedule=datetime.timedelta(minutes=34, seconds=15),  # Run every 34 minutes and 15 seconds\n        )\n</code></pre> <ul> <li>Cron Expressions</li> </ul> <p>If you're familiar with cron jobs, you can use cron syntax for more complex scheduling:</p> <pre><code>from celery.schedules import crontab\n\n...\n\n    def setup(self, config):\n        ...\n\n        self.add_task(\n            my_custom_task,\n            schedule=crontab(hour=7, minute=30, day_of_week=1),  # Run every Monday at 7:30 AM\n        )\n</code></pre>"},{"location":"howtoguide/programs/#task_dependencies","title":"Task dependencies","text":"<p>Often, tasks within a program need to execute in a specific order or depend on the output of other tasks. acoupi enables this through callbacks.</p> <p>Callbacks are functions that are executed immediately after a task completes. The output of the preceding task is passed as an argument to the callback function.</p> <pre><code>import random\n\n...\n\ndef setup(self, config):\n\n    ...\n\n    def task1():\n        random_number = random.randint(0, 6)\n        return random_number\n\n    def task2(number):\n        if number == 6:\n            print(\"you are lucky!\")\n\n        print(\"No luck yet.\")\n\n    self.add_task(\n        task1,\n        schedule=60,\n        callbacks=[task2]\n    )\n\n    ...\n</code></pre> <p>In this example, <code>task2</code> acts as a callback for <code>task1</code>. It receives the random number generated by <code>task1</code> and prints a message accordingly. This ensures that <code>task2</code> always runs after <code>task1</code> and has access to its output.</p> <p>This provides a basic framework for building an acoupi program. In the following sections, we'll explore more advanced concepts and tools to enhance your custom programs.</p>"},{"location":"howtoguide/programs/#tools_for_program_creation","title":"Tools for Program Creation","text":"<p>Now that you understand the fundamentals of program creation, let's explore the tools acoupi provides to facilitate your development process and help you to build meaningful bioacoustic monitoring solutions.</p> <p>acoupi offers several approaches to simplify and accelerate the creation of custom programs:</p> <ul> <li>Program Templates: Leverage pre-defined templates with commonly used tasks and components to expedite development.</li> <li>Predefined Configuration Schemas: Utilise existing schemas for typical program components, saving time and effort in defining configuration options.</li> <li>Task Templates: Employ templates for frequently used tasks, such as recording audio or sending data, as building blocks for your program.</li> <li>Component Selection: Modify existing tasks by replacing default components with alternatives or custom implementations to tailor functionality.</li> </ul> <p>Now we will explore each of these methods, giving insight into how to create custom programs within the acoupi framework.</p>"},{"location":"howtoguide/programs/#program_templates","title":"Program Templates","text":"<p>When building a program, you often need to incorporate basic functionality, such as audio recording and management. acoupi provides program templates that serve as foundational building blocks, saving you time and effort.</p>"},{"location":"howtoguide/programs/#basic_program","title":"Basic Program","text":"<p>The <code>BasicProgram</code> provides a convenient starting point for programs that require fundamental audio recording and management capabilities. By incorporating this template, you can quickly set up a program that captures audio data and organises recordings efficiently.</p> <p>To use the <code>BasicProgram</code>, define your custom program class that inherits from it:</p> <pre><code>from acoupi.programs.templates import BasicProgram, BasicProgramConfiguration\n\nclass CustomProgram(BasicProgram):\n\n    config_schema = BasicProgramConfiguration\n</code></pre> <p>This automatically equips your <code>CustomProgram</code> with two essential tasks:</p> <ul> <li> <p>Recording Task: This task handles the core audio recording functionality.     It checks recording conditions, captures audio segments of a defined duration at specified intervals, and temporarily stores the recordings.     This task utilises the <code>generate_recording_task</code> template (<code>acoupi.tasks.generate_recording_task</code>) for its implementation.</p> </li> <li> <p>File Management Task: This task manages the recorded audio files.     It processes the temporary recordings, determining which recordings to save permanently based on predefined criteria (by default, all recordings are saved).     Saved recordings are organised in a structured folder hierarchy: <code>&lt;base_directory&gt;/&lt;year&gt;/&lt;month&gt;/&lt;day&gt;/&lt;time&gt;_&lt;recording_id&gt;.wav</code>.     This task is based on the <code>generate_file_management_task</code> template (<code>acoupi.tasks.generate_file_management_task</code>).</p> </li> </ul> <p>The <code>BasicProgram</code> uses the <code>BasicProgramConfiguration</code> schema (<code>acoupi.programs.templates.BasicProgramConfiguration</code>) to define its configurable parameters. To extend these parameters, you can create a new configuration class that inherits from <code>BasicConfiguration</code> and adds your custom fields:</p> <pre><code>class ExpandedConfigurations(BasicConfiguration):\n    other_field: bool = True\n    # ... your additional fields ...\n</code></pre> <p>While the <code>BasicProgram</code> provides a solid foundation, you can further customise its behaviour by overriding specific methods. For instance, you can modify the recording conditions to control when audio recording occurs:</p> <pre><code>from acoupi.components.types import RecordingCondition\n\nclass IsWarmEnough(RecordingCondition):\n    def __init__(self, threshold):\n        self.threshold = threshold\n\n    def should_record(self):\n        # This is a hypothetical sensor, not included in acoupi\n        temperature = sensor.get_current_temperature()\n        return temperature &gt;= self.threshold\n\nclass CustomProgram(BasicProgram):\n    # ... other parts of your program ...\n\n    def get_recording_conditions(self, config):\n        # Get the default conditions (e.g., recording interval)\n        default_conditions = super().get_recording_conditions(config)\n        return [\n            *default_conditions,\n            IsWarmEnough(config.temperature_threshold)  # Add your custom condition\n        ]\n</code></pre> <p>For a complete understanding of the <code>BasicProgram</code>'s capabilities and customisation options, refer to its reference documentation.</p>"},{"location":"howtoguide/programs/#messaging_program","title":"Messaging Program","text":"<p>The <code>MessagingProgram</code> extends the <code>BasicProgram</code> to add messaging capabilities. This allows your programs to send messages and heartbeats to remote servers via HTTP or MQTT.</p> <p>To incorporate messaging functionality into your program, define your custom program class that inherits from <code>MessagingProgram</code>:</p> <pre><code>from acoupi.programs.templates import MessagingProgram, MessagingProgramConfig\n\nclass CustomConfig(MessagingProgramConfig):\n    # ... your custom configuration fields ...\n\nclass CustomProgram(MessagingProgram):\n\n    config_schema = CustomConfig\n</code></pre> <p>This equips your program with the following messaging features:</p> <ul> <li>Messenger: A <code>Messenger</code> object is created, allowing you to choose between HTTP or MQTT protocols for message delivery.</li> <li>Message Store: A dedicated message store is initialised to keep track of all messages generated by your device, including their delivery status.</li> <li>Send Messages Task: This periodic task (running every 2 minutes by default, but configurable) checks the message store for pending messages and attempts to deliver them.     It leverages the <code>generate_send_messages_task</code> template for its implementation.</li> <li>Heartbeat Task: This task periodically sends a heartbeat message (every 30 minutes by default, configurable) containing information about the device's status, ID, and the current time.     This provides a regular indication that the device is active and functioning correctly.</li> </ul> <p>By default, the <code>MessagingProgram</code> doesn't generate any messages on its own. Its primary purpose is to provide the underlying framework for sending messages. You can easily create and send messages from your custom tasks using the <code>message_store</code>:</p> <pre><code>from acoupi.data import Message\nimport datetime\n\nclass CustomProgram(MessagingProgram):\n\n    def setup(self, config):\n        super().setup(config)  # Initialise the messaging components\n\n        def random_task():\n            current_time = datetime.datetime.now()\n            message = Message(content=f\"Hi! The current time is {current_time}\")\n            self.message_store.store_message(message)  # Add the message to the store\n\n        self.add_task(  # Register the task in your program\n            random_task,\n            schedule=3600 # Every hour\n        )\n\n        # ... your other tasks ...\n</code></pre> <p>In this example, <code>random_task</code> creates a simple message and stores it in the <code>message_store</code>. The Send Messages Task will then handle delivering this message at its next scheduled execution.</p> <p>For detailed information about the configuration options and customisation possibilities of the <code>MessagingProgram</code>, consult its comprehensive reference documentation.</p>"},{"location":"howtoguide/programs/#detection_program","title":"Detection Program","text":"<p>To create an Acoupi program that performs audio detection and sends detection information to a remote server, you can use the <code>DetectionProgram</code> template. This template builds upon the <code>BasicProgram</code> and <code>MessagingProgram</code> templates, inheriting their functionality for audio recording, file management, heartbeats, and sending messages.</p> <p>The <code>DetectionProgram</code> adds a detection task that runs a detection model on recorded audio segments. This allows you to create \"smart\" bioacoustic detectors that can automatically identify sounds or events of interest.</p> <p>To use the <code>DetectionProgram</code> template, define your custom program class that inherits from <code>DetectionProgram</code> and implement the <code>configure_model</code> method:</p> <pre><code>from acoupi.programs.templates import DetectionProgram, DetectionProgramConfig\nfrom acoupi_birdnet.models import BirdNET\n\n\n\nclass CustomConfig(DetectionProgramConfig):\n    threshold: float = 0.5\n    # ... your custom fields ...\n\nclass CustomProgram(DetectionProgram):\n\n    config_schema = CustomConfig\n\n    #\n    def configure_model(self, config):\n        # create a model instance with your configurations\n        return BirdNET(threshold=config.threshold)\n</code></pre> <p>The <code>configure_model</code> method should return any component that inherits from the types.Model class. This allows you to use any compatible detection model with your program.</p> <p>By defining a program like this, it will automatically create a new task called \"detection_task\" that will be triggered whenever a recording has been successfully finalised.</p> <p>The <code>DetectionProgram</code> template offers several customisation options:</p> <ul> <li><code>get_message_factories</code>: Override this method to customise the messages generated based on the detection results.     For example, you can create messages that are sent whenever a particular species is detected or when there is a high level of acoustic diversity.</li> </ul> <pre><code>from acoupi.components import DetectionThresholdMessageBuilder\n\nclass CustomProgram(DetectionProgram):\n    ...\n\n    def get_message_factories(self, config):\n        return [\n            # This message factory will remove any detections below 0.8 score\n            # but otherwise will send everything\n            DetectionThresholdMessageBuilder(threshold=0.8)\n        ]\n</code></pre> <ul> <li> <p><code>get_output_cleaners</code>: Override this method to define a list of output cleaners that will be applied to the model's raw output to clean it up or extract relevant information.     By default, a single cleaner is included: a threshold cleaner.     This cleaner removes all detections with a confidence score below a specified threshold.     This threshold is configurable via the detections.     threshold field in your DetectionProgramConfiguration, enabling you to fine-tune the sensitivity of your detection program at deployment time.     You can override this method to add or customize output cleaners according to your specific needs.</p> </li> <li> <p><code>get_processing_filters</code>: Override this method to define a list of processing filters that will be applied to each recording before it is processed by the model.     These filters determine whether a recording should be processed at all.     This can be useful to avoid unnecessary model processing when it is not required by the context or based on simple heuristics on the recording content.</p> </li> </ul> <p>For more info on how this program can be configured have a look at its reference documentation.</p>"},{"location":"howtoguide/programs/#predefined_configuration_schemas","title":"Predefined Configuration Schemas","text":"<p>Defining a clear configuration schema is important when designing effective and adaptable acoupi programs. A well-structured schema promotes program flexibility, provides clear guidance to users on configurable options, and ensures that configurations are validated before deployment, preventing potential issues.</p> <p>While you'll need to create custom schemas for program-specific behaviours, acoupi strongly encourages reusing predefined schemas for common components. This approach not only saves you time and effort but also ensures compatibility with program templates and benefits from carefully designed and validated schema structures.</p> <p>acoupi provides a collection of predefined schemas for common components:</p> <ol> <li> <p>MicrophoneConfig: This schema facilitates configuration of the microphone device, including device selection, sampling rate, and the number of channels.       It's highly customised for ease of use during setup, so utilising it is recommended for streamlined microphone configuration.</p> </li> <li> <p>MQTTConfig and HTTPConfig: These schemas streamline the configuration of MQTT and HTTP messengers, respectively, for programs that require communication capabilities.</p> </li> <li> <p>PathsConfiguration: This schema defines options for configuring storage locations for audio recordings and metadata.       By default, temporary recordings are stored in memory (if available) and permanent recordings are saved in <code>$HOME/audio/</code>, but you can customise these paths according to your needs.</p> </li> <li> <p>RecordingConfiguration: This schema covers the essential parameters for the recording task, such as recording duration, recording interval, and scheduling options.</p> </li> <li> <p>MessagingConfiguration: This schema encompasses all the necessary settings for configuring the messaging task.</p> </li> </ol> <p>These predefined schemas are further grouped into higher-level schemas for broader functionalities:</p> <ol> <li> <p>BasicConfiguration: This schema combines <code>MicrophoneConfig</code>, <code>PathsConfiguration</code>, and <code>RecordingConfiguration</code>, providing all the essential configurations for a basic acoupi program.</p> </li> <li> <p>MessagingProgramConfiguration: This schema includes the necessary configurations for using the <code>MessagingProgram</code>, enabling message sending capabilities in your programs.</p> </li> </ol> <p>Leverage these predefined schemas as building blocks to construct comprehensive configuration schemas tailored to your specific program requirements. This modular approach promotes consistency, reduces redundancy, and ensures your programs are well-structured and easily configurable.</p>"},{"location":"howtoguide/programs/#task_templates","title":"Task Templates","text":"<p>For more granular control over your program's tasks and components, acoupi offers task templates. These templates are functions that generate pre-built tasks with customisable components, allowing you to assemble program logic efficiently while maintaining flexibility.</p> <ol> <li> <p><code>generate_recording_task</code>: This template creates a task that handles the fundamental aspects of audio recording.       It allows you to define custom recording conditions to specify when recording should occur and automatically stores recording metadata for future reference.</p> </li> <li> <p><code>generate_file_management_task</code>: This template generates a task that manages temporary audio recordings.       It ensures recordings are ready to be moved (e.g., after processing), selects which recordings to save permanently, and organises them in the designated storage location.</p> </li> <li> <p><code>generate_send_messages_task</code>: This template creates a task responsible for sending pending messages to remote endpoints using the configured messengers (e.g. HTTP or MQTT).</p> </li> <li> <p><code>generate_detection_task</code>: This template generates a task that performs audio analysis using a specified model.       It includes preliminary checks to determine if the model should be run on a given recording, executes the model, post-processes the results, generates messages based on detections, and stores detection information in the metadata store.</p> </li> <li> <p><code>generate_heartbeat_task</code>: This template creates a task that periodically sends heartbeat messages via the configured messengers, providing status updates and ensuring the device remains connected.</p> </li> <li> <p><code>generate_summariser_task</code>: This template generates tasks that analyse the metadata store to produce meaningful summaries of recorded data and detections.       These summaries are then packaged as messages for remote delivery.</p> </li> </ol> <p>Each task template requires specific components as arguments. However, this requirement is flexible in that you need to provide components of the correct type rather than specific instances. This allows you to integrate custom components into the pre-built task workflows.</p> <p>For example, the <code>generate_detection_task</code> function requires components such as a <code>Store</code>, <code>Model</code>, <code>MessageStore</code>, etc.:</p> <pre><code>def generate_detection_task(\n    store: types.Store,\n    model: types.Model,\n    message_store: types.MessageStore,\n    # ... other optional components ...\n) -&gt; Callable[[data.Recording], None]:\n    ...\n</code></pre> <p>As long as you provide components that adhere to the specified types, the generated task will function correctly within the defined workflow.</p> <p>To understand the specific requirements and workflows of each task template, consult their respective documentation for detailed information. This will guide you in selecting the appropriate components and customising the tasks to suit your program's needs.</p>"},{"location":"howtoguide/programs/#component_selection","title":"Component Selection","text":"<p>acoupi offers a wide array of pre-built components to streamline your program and task development. These components cover essential functionalities such as messaging, metadata storage, file management, and more. Refer to the reference documentation for a comprehensive list of available components.</p> <p>You can readily swap these pre-built components within default implementations or when creating custom tasks. As long as your chosen components adhere to the required type specifications, they should integrate seamlessly.</p> <p>Beyond the built-in components, you can also leverage community-created components. For instance, the <code>acoupi_batdetect2</code> and <code>acoupi_birdnet</code> modules provide ready-to-use <code>Batdetect2</code> and <code>BirdNET</code> models (of type <code>acoupi.components.types.Model</code>) for your custom programs. If you develop your own components that you believe would benefit the acoupi community, please reach out to us for guidance on sharing them.</p>"},{"location":"howtoguide/programs/#conclusion","title":"Conclusion","text":"<p>Here we covered what you need to get started for building your custom program. Dive into the reference documentation to see the details of the individual parts that were covered here. If you have a question, it might already be covered by our FAQ, but you can also reach out through our GitHub repository.</p>"},{"location":"reference/","title":"Acoupi Technical Reference","text":""},{"location":"reference/#acoupi_technical_reference","title":"Acoupi Technical Reference","text":"<p>The acoupi Reference Section is helpful to find technical information about the inner-workings of acoupi and how it operates. In the following section, you will find more about the available acoupi functions.</p> <ul> <li> <p>Data: Responsible for defining a standardised data structure and ensuring that the flow of information between the other layers is validated and consistent.     The data schema is composed of multiple data objects built using the Pydantic library, these correspond to attributes of Python classes.</p> </li> <li> <p>Components: Form the building blocks of acoupi.     They are individual elements (i.e., Python classes) designed to perform specific actions based on the configurations of a user.     Their inputs and outputs follow the structure of the data.</p> </li> <li> <p>Task: Integrate a sequence of one or more components executed in a specific flow.</p> </li> <li> <p>Programs: Illustrate the complete set of tasks, components, and data schema.</p> </li> <li> <p>System: Detailed functions used to manage running acoupi application.</p> </li> </ul> Data <p>Ensure data validation and consistency.</p> Components <p>Building blocks of acoupi.</p> Tasks <p>Integrate sequences of one or more components.</p> Programs <p>Complete unit running on acoupi.</p> System <p>System Function.</p>"},{"location":"reference/cli/","title":"CLI","text":""},{"location":"reference/cli/#cli_reference","title":"CLI Reference","text":"<p>This page provides documentation for our command line tools.</p>"},{"location":"reference/cli/#acoupi","title":"acoupi","text":"<p>Welcome to acoupi.</p> <p>This is the main command line interface for acoupi and allows you to setup and run acoupi programs.</p> <p>To get started run <code>acoupi setup</code> to setup your first program.</p> <p>Usage:</p> <pre><code>acoupi [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>celery: Run a celery command.</li> <li>check: Run the health checks of the current program and configurations.</li> <li>config: Manage the acoupi configuration.</li> <li>deployment: Manage acoupi deployments.</li> <li>setup: Set up acoupi.</li> <li>task: Manage acoupi tasks.</li> <li>workers: Manage acoupi workers.</li> </ul>"},{"location":"reference/cli/#acoupi-celery","title":"acoupi celery","text":"<p>Run a celery command.</p> <p>Usage:</p> <pre><code>acoupi celery [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-check","title":"acoupi check","text":"<p>Run the health checks of the current program and configurations.</p> <p>Usage:</p> <pre><code>acoupi check [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-config","title":"acoupi config","text":"<p>Manage the acoupi configuration.</p> <p>This command group provides subcommands to view and modify the acoupi configuration settings.</p> <p>Before using any subcommands, ensure that acoupi is properly set up by running <code>acoupi setup</code>.</p> <p>Usage:</p> <pre><code>acoupi config [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>get: Display the full (or a specific field of the) acoupi configuration.</li> <li>set: Set a specific field or the entire acoupi configuration to a new VALUE.</li> </ul>"},{"location":"reference/cli/#acoupi-config-get","title":"acoupi config get","text":"<p>Display the full (or a specific field of the) acoupi configuration.</p> <p>This command allows you to view the current configuration settings for acoupi. You can either retrieve the entire configuration or a specific field or nested field within the configuration.</p>"},{"location":"reference/cli/#examples","title":"Examples","text":"<p>To display the entire configuration:</p> <pre><code>acoupi config get\n</code></pre> <p>To display the value of the <code>username</code> field:</p> <pre><code>acoupi config get --field username\n</code></pre> <p>To display the value of the nested field <code>server.port</code>:</p> <pre><code>acoupi config get --field server.port\n</code></pre> <p>To display the configuration without color highlighting:</p> <pre><code>acoupi config get --no-color\n</code></pre> <p>Usage:</p> <pre><code>acoupi config get [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--field</code> text Retrieve a specific field or nested field from the configuration using dot notation (e.g., 'section.subsection.value'). If not provided, the entire configuration is displayed. None <code>--color</code> / <code>--no-color</code> boolean Enable or disable syntax highlighting for improved readability. Default is enabled. <code>True</code> <code>--indent</code>, <code>-i</code> integer Set the indentation level for the output JSON. Default is 2 spaces. <code>2</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-config-set","title":"acoupi config set","text":"<p>Set a specific field or the entire acoupi configuration to a new VALUE.</p> <p>This command allows you to update a configuration value by specifying its new value. You can:</p> <ul> <li> <p>Modify the entire configuration (if <code>--field</code> is not provided)</p> </li> <li> <p>Modify a specific field</p> </li> <li> <p>Modify nested fields using dot notation (e.g., 'section.subsection.value')</p> </li> </ul> <p>Note: Any configuration changes provided are validated against the original configuration schema to ensure data integrity.</p>"},{"location":"reference/cli/#examples_1","title":"Examples","text":"<p>To change the <code>username</code> to \"new_user\":</p> <pre><code>acoupi config set username new_user\n</code></pre> <p>To change the nested field <code>server.port</code> to 8080:</p> <pre><code>acoupi config set server.port 8080\n</code></pre> <p>To replace the entire configuration with a new one (assuming 'new_config.json' contains valid JSON):</p> <pre><code>acoupi config set \"$(cat new_config.json)\"\n</code></pre> <p>Usage:</p> <pre><code>acoupi config set [OPTIONS] VALUE\n</code></pre> <p>Options:</p> Name Type Description Default <code>--field</code> text Set a specific field of the configuration using dot notation (e.g., 'section.subsection.value'). If not provided, the entire configuration is modified. `` <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-deployment","title":"acoupi deployment","text":"<p>Manage acoupi deployments.</p> <p>Usage:</p> <pre><code>acoupi deployment [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>start: Start acoupi.</li> <li>status: Check the status of acoupi services.</li> <li>stop: Stop acoupi.</li> </ul>"},{"location":"reference/cli/#acoupi-deployment-start","title":"acoupi deployment start","text":"<p>Start acoupi.</p> <p>Usage:</p> <pre><code>acoupi deployment start [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--name</code> text N/A None <code>--latitude</code> float Latitude of the deployment None <code>--longitude</code> float N/A None <code>--check</code> / <code>--no-check</code> boolean Whether to run the health checks before starting the deployment. <code>True</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-deployment-status","title":"acoupi deployment status","text":"<p>Check the status of acoupi services.</p> <p>Usage:</p> <pre><code>acoupi deployment status [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-deployment-stop","title":"acoupi deployment stop","text":"<p>Stop acoupi.</p> <p>Usage:</p> <pre><code>acoupi deployment stop [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-setup","title":"acoupi setup","text":"<p>Set up acoupi.</p> <p>Usage:</p> <pre><code>acoupi setup [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--program</code> text N/A <code>acoupi.programs.test</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-task","title":"acoupi task","text":"<p>Manage acoupi tasks.</p> <p>Provides commands to list, run, and profile tasks within your configured acoupi program.</p> <p>Usage:</p> <pre><code>acoupi task [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>list: List all available tasks in the current acoupi program.</li> <li>profile: Profile a specified task.</li> <li>run: Run a specified task.</li> </ul>"},{"location":"reference/cli/#acoupi-task-list","title":"acoupi task list","text":"<p>List all available tasks in the current acoupi program.</p> <p>Usage:</p> <pre><code>acoupi task list [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-task-profile","title":"acoupi task profile","text":"<p>Profile a specified task.</p>"},{"location":"reference/cli/#parameters","title":"Parameters","text":"<p>task_name : str     The name of the task to profile.</p> <p>Usage:</p> <pre><code>acoupi task profile [OPTIONS] TASK_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--output</code> Path Path to save profiling output. None <code>--quiet</code> boolean Suppress printing profiling output to the console. <code>False</code> <code>--log-level</code> choice (<code>DEBUG</code> | <code>INFO</code> | <code>WARNING</code> | <code>ERROR</code> | <code>CRITICAL</code>) Set the logging level. <code>WARNING</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-task-run","title":"acoupi task run","text":"<p>Run a specified task.</p>"},{"location":"reference/cli/#parameters_1","title":"Parameters","text":"<p>task_name : str     The name of the task to run.</p> <p>Usage:</p> <pre><code>acoupi task run [OPTIONS] TASK_NAME\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-workers","title":"acoupi workers","text":"<p>Manage acoupi workers.</p> <p>Provides subcommands to manually control the Celery workers responsible for executing program tasks.</p> <p>Usage:</p> <pre><code>acoupi workers [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>purge: Purge all pending tasks from the Celery queue.</li> <li>restart: Restart the Celery workers.</li> <li>start: Start the Celery workers.</li> <li>stop: Stop the Celery workers.</li> </ul>"},{"location":"reference/cli/#acoupi-workers-purge","title":"acoupi workers purge","text":"<p>Purge all pending tasks from the Celery queue.</p> <p>Usage:</p> <pre><code>acoupi workers purge [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-workers-restart","title":"acoupi workers restart","text":"<p>Restart the Celery workers.</p> <p>Restarts the worker processes, which can be useful for applying configuration changes or resolving issues.</p> <p>Usage:</p> <pre><code>acoupi workers restart [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-workers-start","title":"acoupi workers start","text":"<p>Start the Celery workers.</p> <p>Manually starts the worker processes that handle the execution of program tasks.</p> <p>Usage:</p> <pre><code>acoupi workers start [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#acoupi-workers-stop","title":"acoupi workers stop","text":"<p>Stop the Celery workers.</p> <p>Manually stops the worker processes, gracefully shutting down the task execution environment.</p> <p>Usage:</p> <pre><code>acoupi workers stop [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/components/","title":"Components","text":""},{"location":"reference/components/#components","title":"Components","text":""},{"location":"reference/components/#acoupi.components","title":"<code>acoupi.components</code>","text":"<p>Acoupi components.</p>"},{"location":"reference/components/#component_types","title":"Component Types","text":""},{"location":"reference/components/#acoupi.components.types","title":"<code>acoupi.components.types</code>","text":"<p>Module containing the types used by the acoupi.</p>"},{"location":"reference/components/#acoupi.components.types-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.types.P","title":"<code>P = ParamSpec('P')</code>  <code>module-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.types-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.types.AudioRecorder","title":"<code>AudioRecorder</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Record audio from the microphone.</p>"},{"location":"reference/components/#acoupi.components.types.AudioRecorder-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.AudioRecorder.record","title":"<code>record(deployment)</code>  <code>abstractmethod</code>","text":"<p>Record audio from the microphone and return the recording.</p> <p>Parameters:</p> Name Type Description Default <code>deployment</code> <code>Deployment</code> <p>The deployment to use for recording the audio.</p> required <p>Returns:</p> Type Description <code>Recording</code> <p>The recording that was made. Object containing a temporary recording path, along with recording details such as datetime, duration, and samplerate.</p> Notes <p>The recording path should be saved in temporary memory until it gets processed. The path will be updated after the recording has been processed.</p>"},{"location":"reference/components/#acoupi.components.types.MessageBuilder","title":"<code>MessageBuilder</code>","text":"<p>               Bases: <code>ABC</code>, <code>Generic[P]</code></p> <p>Create messages from input data.</p> See Also <p>See the module message_factories for concrete implementations of the MessageBuilder.</p> <ul> <li> <p>DetectionThresholdMessageBuilder:     Filters detections by a score threshold.</p> </li> <li> <p>FullModelOutputMessageBuilder:     No filtering. Format the entire model output.</p> </li> </ul>"},{"location":"reference/components/#acoupi.components.types.MessageBuilder-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.MessageBuilder.build_message","title":"<code>build_message(*args, **kwargs)</code>  <code>abstractmethod</code>","text":"<p>Will build a message or return None depending on the input data.</p> <p>Returns:</p> Type Description <code>Optional[Message]</code> <p>The assembled message or None if the input data is not suitable.</p>"},{"location":"reference/components/#acoupi.components.types.MessageStore","title":"<code>MessageStore</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Keeps track of messages that have been produced and sent.</p>"},{"location":"reference/components/#acoupi.components.types.MessageStore-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.MessageStore.get_unsent_messages","title":"<code>get_unsent_messages()</code>  <code>abstractmethod</code>","text":"<p>Get the recordings that have not been synced to the server.</p> <p>Returns:</p> Type Description <code>List[Message]</code> <p>A list of unsent messages.</p>"},{"location":"reference/components/#acoupi.components.types.MessageStore.store_message","title":"<code>store_message(message)</code>  <code>abstractmethod</code>","text":"<p>Register a message with the store.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>Store a message.</p> required"},{"location":"reference/components/#acoupi.components.types.MessageStore.store_response","title":"<code>store_response(response)</code>  <code>abstractmethod</code>","text":"<p>Register a message response with the store.</p> <p>Parameters:</p> Name Type Description Default <code>response</code> <code>Response</code> <p>Store the server response.</p> required"},{"location":"reference/components/#acoupi.components.types.Messenger","title":"<code>Messenger</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Send messages.</p> <p>The Messenger is responsible for sending messages to a remote server according to communication protocol.</p> See Also <p>See the module messenger for concrete implementations of the Messenger.</p> <ul> <li> <p>MQTTMessenger:     Send messages using the MQTT protocol.</p> </li> <li> <p>HTTPMessenger:     Send messages using the HTTP POST Request.</p> </li> </ul>"},{"location":"reference/components/#acoupi.components.types.Messenger-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.Messenger.send_message","title":"<code>send_message(message)</code>  <code>abstractmethod</code>","text":"<p>Send the message to a remote server.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>The message to send.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A response containing the message, status, content, and received time.</p>"},{"location":"reference/components/#acoupi.components.types.Model","title":"<code>Model</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Model for making predictions.</p> <p>The Model is responsible for running the model on the audio file and returning the predicted detections.</p> <p>Detections should be returned as a list of Detection objects.</p>"},{"location":"reference/components/#acoupi.components.types.Model-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.Model.run","title":"<code>run(recording)</code>  <code>abstractmethod</code>","text":"<p>Run the model on the audio file and return the result.</p> <p>Can optionally use deployment info to enhance predictions.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>The recording to process.</p> required <p>Returns:</p> Type Description <code>model_output</code> <p>The model output containing the detections.</p>"},{"location":"reference/components/#acoupi.components.types.ModelOutputCleaner","title":"<code>ModelOutputCleaner</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Clean the model output.</p> <p>The ModelOutputCleaner is responsible for cleaning the model output. This can include removing detections that are too short, too long, have a specific label or low confidence.</p> Notes <p>Model output cleaners are particularly useful when using a pre-trained model that produces irrelevant predictions. This component helps prune those predictions to make them more relevant to the task at hand.</p> See Also <p>See the module output_cleaners for a concrete implementation of the ModelOutputCleaner.</p> <ul> <li>ThresholdDetectionCleaner:     Keeps only the classifcations and dectections that are equal or higher than a threshold.</li> </ul>"},{"location":"reference/components/#acoupi.components.types.ModelOutputCleaner-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.ModelOutputCleaner.clean","title":"<code>clean(model_output)</code>  <code>abstractmethod</code>","text":"<p>Clean the model output.</p> <p>This method will remove any predicted tag or detection that does not meet the specified criteria.</p> <p>Parameters:</p> Name Type Description Default <code>model_output</code> <code>ModelOutput</code> <p>The model output to clean.</p> required <p>Returns:</p> Type Description <code>ModelOutput</code> <p>The cleaned model output.</p>"},{"location":"reference/components/#acoupi.components.types.ProcessingFilter","title":"<code>ProcessingFilter</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Determine if a recording should be processed by a model.</p> <p>The ProcessingFilter is responsible for determining if a recording should be processed by the model.</p>"},{"location":"reference/components/#acoupi.components.types.ProcessingFilter-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.ProcessingFilter.should_process_recording","title":"<code>should_process_recording(recording)</code>  <code>abstractmethod</code>","text":"<p>Determine if the recording should be processed by the model.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>The recording to check.</p> required <p>Returns:</p> Type Description <code>should_process</code> <p>True if the recording should be processed, False otherwise.</p>"},{"location":"reference/components/#acoupi.components.types.RecordingCondition","title":"<code>RecordingCondition</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Decide if a recording should be made.</p> <p>Will only do a recording if the RecordingCondition is met.</p> See Also <p>See the module recording_conditions for concrete implementations of the RecordingCondition.</p> <ul> <li>IsInInterval:     Record if the current time is within a specified interval.</li> </ul>"},{"location":"reference/components/#acoupi.components.types.RecordingCondition-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.RecordingCondition.should_record","title":"<code>should_record()</code>  <code>abstractmethod</code>","text":"<p>Determine if a recording should be made.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if a recording should be made, False otherwise.</p>"},{"location":"reference/components/#acoupi.components.types.RecordingSavingFilter","title":"<code>RecordingSavingFilter</code>","text":"<p>               Bases: <code>ABC</code></p> <p>The Recording Saving Filter is responsible for determining if a recording should be saved.</p> Notes <p>The RecordingSavingFilter is responsible for determining if a recording should be saved. The RecordingSavingFilter is used by the management task. If the boolean value returned is True, the recording will be saved. If False, the recording will be deleted.</p> See Also <p>See saving_filters for concrete implementations of the RecordingSavingFilter.</p> <ul> <li>After_DawnDuskTimeInterval / Before_DawnDuskTimeInterval:     Save recordings if they falls withing a specified time interval     happening after or before astronomical dawn and dusk.</li> <li>SavingThreshold:     Save recordings if any of the detection and classification tag score associated to     the recording model output is higher or equal than a specified threshold.</li> <li>SaveIfInInterval:     Save recordings if the recording falls within a specified interval.</li> <li>FrequencySchedule:     Save recordings if the recording falls within the specified frequency schedule.</li> </ul>"},{"location":"reference/components/#acoupi.components.types.RecordingSavingFilter-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.RecordingSavingFilter.should_save_recording","title":"<code>should_save_recording(recording, model_outputs=None)</code>  <code>abstractmethod</code>","text":"<p>Determine if a recording should be saved.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>The recording to check.</p> required <code>model_outputs</code> <code>Optional[List[ModelOutput]]</code> <p>The model outputs associated to the recording. Used in some implementations when the decision to save a recording depends on the model outputs, rather the recording itself.</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the recording should be saved, False otherwise.</p>"},{"location":"reference/components/#acoupi.components.types.RecordingSavingManager","title":"<code>RecordingSavingManager</code>","text":"<p>               Bases: <code>ABC</code></p> <p>The Recording SavingManager is responsible for saving recordings.</p> Notes <p>The RecordingSavingManager is responsible for saving recordings. The RecordingSavingManager is used by the management task. The RecordingSavingManager is used to save recordings to the correct path.</p> See Also <p>See the module saving_managers for concrete implementations of the RecordingSavingManager.</p> <ul> <li>SaveRecordingManager:     Save recordings to a specified directory according to the model outputs.</li> <li>DateFileManager:     Save recordings to directories based on the date of the recording.</li> </ul>"},{"location":"reference/components/#acoupi.components.types.RecordingSavingManager-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.RecordingSavingManager.save_recording","title":"<code>save_recording(recording, model_outputs=None)</code>  <code>abstractmethod</code>","text":"<p>Save the recording.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>The recording to save.</p> required <code>model_outputs</code> <code>Optional[List[ModelOutput]]</code> <p>The model outputs associated to the recording. Used to determined where and how to save the recording.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Path]</code> <p>The path to the saved recording. Returns None if this manager is not responsible for saving the recording.</p>"},{"location":"reference/components/#acoupi.components.types.RecordingScheduler","title":"<code>RecordingScheduler</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Manage time between recordings.</p> <p>The RecordingScheduler is responsible for determining the when recording should be made.</p> See Also <p>See the module recording_schedulers for a concrete implementation of the RecordingScheduler.</p> <ul> <li>IntervalScheduler:     Record at a fixed interval.</li> </ul>"},{"location":"reference/components/#acoupi.components.types.RecordingScheduler-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.RecordingScheduler.time_until_next_recording","title":"<code>time_until_next_recording(time=None)</code>  <code>abstractmethod</code>","text":"<p>Provide the number of seconds until the next recording.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>Optional[datetime]</code> <p>The time to use for determining the next recording, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>The number of seconds until the next recording. Will return 0 if a recording should be made immediately.</p>"},{"location":"reference/components/#acoupi.components.types.Store","title":"<code>Store</code>","text":"<p>               Bases: <code>ABC</code></p> <p>The Store is responsible for storing the detections locally.</p> <p>The store keeps track of all the recordings, detections, and deployments made.</p>"},{"location":"reference/components/#acoupi.components.types.Store-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.Store.get_current_deployment","title":"<code>get_current_deployment()</code>  <code>abstractmethod</code>","text":"<p>Get the current deployment from the local filesystem.</p>"},{"location":"reference/components/#acoupi.components.types.Store.get_recordings","title":"<code>get_recordings(ids)</code>  <code>abstractmethod</code>","text":"<p>Get a list recordings from the store by their ids.</p> <p>Each recording is returned with the full list of model outputs registered.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>List[UUID]</code> <p>The ids of the recordings to get.</p> required <p>Returns:</p> Type Description <code>    A list of tuples of the recording and the model outputs.</code>"},{"location":"reference/components/#acoupi.components.types.Store.get_recordings_by_path","title":"<code>get_recordings_by_path(paths)</code>  <code>abstractmethod</code>","text":"<p>Get a list recordings from the store by their paths.</p> <p>Each recording is returned with the full list of model outputs registered.</p> <p>Parameters:</p> Name Type Description Default <code>paths</code> <code>List[Path]</code> <p>The paths of the recordings to get.</p> required <p>Returns:</p> Type Description <code>    A list of tuples of the recording and the model outputs.</code>"},{"location":"reference/components/#acoupi.components.types.Store.store_deployment","title":"<code>store_deployment(deployment)</code>  <code>abstractmethod</code>","text":"<p>Store the deployment locally.</p>"},{"location":"reference/components/#acoupi.components.types.Store.store_model_output","title":"<code>store_model_output(model_output)</code>  <code>abstractmethod</code>","text":"<p>Store the model output locally.</p>"},{"location":"reference/components/#acoupi.components.types.Store.store_recording","title":"<code>store_recording(recording, deployment=None)</code>  <code>abstractmethod</code>","text":"<p>Store the recording locally.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>The recording to store.</p> required <code>deployment</code> <code>Optional[Deployment]</code> <p>The deployment associated with the recording, by default None.</p> <code>None</code>"},{"location":"reference/components/#acoupi.components.types.Store.update_deployment","title":"<code>update_deployment(deployment)</code>  <code>abstractmethod</code>","text":"<p>Update the deployment.</p>"},{"location":"reference/components/#acoupi.components.types.Store.update_recording_path","title":"<code>update_recording_path(recording, path)</code>  <code>abstractmethod</code>","text":"<p>Update the path of the recording.</p>"},{"location":"reference/components/#acoupi.components.types.Summariser","title":"<code>Summariser</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Summarise model outputs.</p> <p>The Summariser is responsible for summarising model outputs (i.e., detections) into a message.</p> See Also <p>See the module summarisers for concrete implementations of the Summariser.</p> <ul> <li> <p>StatisticsDetectionsSummariser:     Summarises detections by calculating the mean, min, max, and count of     classification probabilities for each species.</p> </li> <li> <p>ThresholdsDetectionsSummariser:     Count the number of detections for each species that falls into three     thresholds different bands: low, medium, and high.</p> </li> </ul>"},{"location":"reference/components/#acoupi.components.types.Summariser-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.types.Summariser.build_summary","title":"<code>build_summary(now)</code>  <code>abstractmethod</code>","text":"<p>Build a summary.</p> <p>Parameters:</p> Name Type Description Default <code>now</code> <code>datetime</code> <p>The time of the summary.</p> required <p>Returns:</p> Type Description <code>Message</code> <p>The summary as a data.Message object. The message should be in JSON format.</p>"},{"location":"reference/components/#concrete_components","title":"Concrete Components","text":""},{"location":"reference/components/#acoupi.components.audio_recorder","title":"<code>acoupi.components.audio_recorder</code>","text":"<p>Implementation of AudioRecorder for acoupi.</p> <p>An AudioRecorder is used to record audio files. The PyAudioRecorder is implemented as class that inherit from <code>AudioRecorder</code>. The class should implement the record() method which return a temporary audio file based on the dataclass Recording.</p> <p>The audio recorder takes argument related to the audio device. It specifies the acoutics parameters of recording an audio file. These are the samplerate, the duration, the number of audio_channels, the chunk size, and the index of the audio device. The index of the audio device corresponds to the index of the USB port the device is connected to. The audio recorder return a temporary .wav file.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.TMP_PATH","title":"<code>TMP_PATH = Path('/run/shm/')</code>  <code>module-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.audio_recorder-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.MicrophoneConfig","title":"<code>MicrophoneConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/components/#acoupi.components.audio_recorder.MicrophoneConfig-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.MicrophoneConfig.audio_channels","title":"<code>audio_channels: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.MicrophoneConfig.device_name","title":"<code>device_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.MicrophoneConfig.samplerate","title":"<code>samplerate: int = 48000</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.MicrophoneConfig-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.MicrophoneConfig.setup","title":"<code>setup(args, prompt=True, prefix='')</code>  <code>classmethod</code>","text":"<p>Set up the microphone configuration.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder","title":"<code>PyAudioRecorder(duration, samplerate, audio_channels, device_name, chunksize=2048, audio_dir=TMP_PATH, logger=None)</code>","text":"<p>               Bases: <code>AudioRecorder</code></p> <p>Component that records fixed duration audio to a file.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.audio_channels","title":"<code>audio_channels: int = audio_channels</code>  <code>instance-attribute</code>","text":"<p>The number of audio channels.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.audio_dir","title":"<code>audio_dir: Path = audio_dir</code>  <code>instance-attribute</code>","text":"<p>The directory where to store the created recordings.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.chunksize","title":"<code>chunksize: int = chunksize</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.device_name","title":"<code>device_name: str = device_name</code>  <code>instance-attribute</code>","text":"<p>The name of the input audio device.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.duration","title":"<code>duration: float = duration</code>  <code>instance-attribute</code>","text":"<p>The duration of the audio file in seconds.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.logger","title":"<code>logger = logger</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.sample_width","title":"<code>sample_width = pyaudio.get_sample_size(pyaudio.paInt16)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.samplerate","title":"<code>samplerate: int = samplerate</code>  <code>instance-attribute</code>","text":"<p>The samplerate of the audio file in Hz.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.check","title":"<code>check()</code>","text":"<p>Check if the audio recorder is compatible with the config.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.get_input_device","title":"<code>get_input_device(p)</code>","text":"<p>Get the input device.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.get_recording_data","title":"<code>get_recording_data(duration=None, num_chunks=None)</code>","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.record","title":"<code>record(deployment)</code>","text":"<p>Record an audio file.</p> <p>Returns:</p> Type Description <code>data.Recording: A Recording object containing the temporary path of the file.</code>"},{"location":"reference/components/#acoupi.components.audio_recorder.PyAudioRecorder.save_recording","title":"<code>save_recording(data, path)</code>","text":"<p>Save the recording to a file.</p>"},{"location":"reference/components/#acoupi.components.audio_recorder-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.audio_recorder.parse_microphone_config","title":"<code>parse_microphone_config(args, prompt=True, prefix='')</code>","text":""},{"location":"reference/components/#acoupi.components.message_factories","title":"<code>acoupi.components.message_factories</code>","text":"<p>Message factories for acoupi.</p> <p>Message factories are responsible for building messages from model outputs. Messages are intended to be sent to remote servers using communication protocols (e.g., MQTT, HTTP) for further processing, storage, or analysis.</p> <p>The message factories are useful to filter outputs from the model according to various criteria, avoiding sending unnecessary information to a server, when connectivity is limited. For example, message factories can be used to filter detections with low score.</p> <p>Message factories are implemented as classes that inherit from MessageBuilder. The class should implement the build_message method, which takes a model output and returns a message. The message should be a JSON string containing the information to be sent to the remote server.</p>"},{"location":"reference/components/#acoupi.components.message_factories-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.message_factories.DetectionThresholdMessageBuilder","title":"<code>DetectionThresholdMessageBuilder(detection_threshold)</code>","text":"<p>               Bases: <code>MessageBuilder</code></p> <p>A MessageBuilder that builds message from model outputs.</p> <p>This message builder builds a message from a model output. The created message will contain the full model output as a JSON string. This includes information about the model used, the recording including deployment info, and the detections and predicted tags that meet the threshold.</p>"},{"location":"reference/components/#acoupi.components.message_factories.DetectionThresholdMessageBuilder-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.message_factories.DetectionThresholdMessageBuilder.detection_threshold","title":"<code>detection_threshold = detection_threshold</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.message_factories.DetectionThresholdMessageBuilder-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.message_factories.DetectionThresholdMessageBuilder.build_message","title":"<code>build_message(model_output)</code>","text":"<p>Build a message with only detections meeting threshold.</p> <p>Parameters:</p> Name Type Description Default <code>self</code> <p>The minimum detection score required for a detection to be included in the message.</p> required <code>self</code> <p>A list of detections from the model_output.detections to be filtered.</p> required <code>model_output</code> <code>ModelOutput</code> <p>The model output to build the message from.</p> required <p>Returns:</p> Type Description <code>    A message containing the model output or None if no valid detections.</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_output = data.ModelOutput(\n...     data.Detection(\n...         detection_score=0.5,\n...         tags=[\n...             data.PredictedTag(\n...                 tag=data.Tag(\n...                     key=\"species\", value=\"species_1\"\n...                 ),\n...                 confidence_score=0.4,\n...             )\n...         ],\n...     )\n... )\n&gt;&gt;&gt; message_builder = DetectionThresholdMessageBuilder(\n...     detection_threshold=0.6\n... )\n&gt;&gt;&gt; message_builder.build_message(model_output)\nNone\n</code></pre> <pre><code>&gt;&gt;&gt; model_output = data.ModelOutput(\n...     data.Detection(\n...         detection_score=0.9,\n...         tags=[\n...             data.PredictedTag(\n...                 tag=data.Tag(\n...                     key=\"species\", value=\"species_1\"\n...                 ),\n...                 confidence_score=0.9,\n...             )\n...         ],\n...     )\n... )\n&gt;&gt;&gt; message_builder = DetectionThresholdMessageBuilder(\n...     detection_threshold=0.6\n... )\n&gt;&gt;&gt; message_builder.build_message(model_output)\nMessage(content='{\"name_model\": \"TestModel\", \"recording\": {\"path\": \"recording.wav\", \"deployment\": {}, \"tags\": [], \"detections\": [{\"detection_score\": 0.9, \"location\": {}, \"tags\": [{\"tag\": {\"key\": \"species\", \"value\": \"species_1\"}, \"confidence_score\": 0.9}]}]}')\n</code></pre>"},{"location":"reference/components/#acoupi.components.message_factories.DetectionThresholdMessageBuilder.filter_detections","title":"<code>filter_detections(detections)</code>","text":"<p>Remove detections with low score.</p>"},{"location":"reference/components/#acoupi.components.message_factories.FullModelOutputMessageBuilder","title":"<code>FullModelOutputMessageBuilder</code>","text":"<p>               Bases: <code>MessageBuilder</code></p> <p>A MessageBuilder that builds message from model outputs.</p> <p>This message builder builds a message from a model output. The created message will contain the full model output as a JSON string.</p>"},{"location":"reference/components/#acoupi.components.message_factories.FullModelOutputMessageBuilder-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.message_factories.FullModelOutputMessageBuilder.build_message","title":"<code>build_message(model_output)</code>","text":"<p>Build a message from a recording and model outputs.</p> <p>Parameters:</p> Name Type Description Default <code>model_output</code> <code>ModelOutput</code> <p>The model output to build the message from.</p> required <p>Returns:</p> Type Description <code>    A message containing the full model output.</code>"},{"location":"reference/components/#acoupi.components.messengers","title":"<code>acoupi.components.messengers</code>","text":"<p>Messengers for acoupi.</p> <p>Messengers are responsible for sending messages to external services. The messengers are templates illustrating how to send messages using different communication protocols (e.g., MQTT, HTTP).</p> <p>The messengers are implemented as classes that inherit from Messenger. The class should implement the send_message method, which takes a message and sends it to the external service. The class should also implement the check method, which checks the connection status of the messenger.</p> <p>The MQTTMessenger sends messages using the MQTT protocol. The HTTPMessenger sends messages using HTTP POST requests.</p>"},{"location":"reference/components/#acoupi.components.messengers-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPConfig","title":"<code>HTTPConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/components/#acoupi.components.messengers.HTTPConfig-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPConfig.base_url","title":"<code>base_url: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPConfig.content_type","title":"<code>content_type: str = 'application/json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPConfig.timeout","title":"<code>timeout: int = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger","title":"<code>HTTPMessenger(base_url, base_params=None, headers=None, timeout=5, content_type='application/json', logger=None)</code>","text":"<p>               Bases: <code>Messenger</code></p> <p>Messenger that sends messages via HTTP POST requests.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The URL to send messages to. This should include the protocol (e.g. http:// or https://) and the hostname (e.g. localhost) and the path (e.g. /api/endpoint).</p> required <code>base_params</code> <code>Optional[dict]</code> <p>Base parameters to send with each request, by default None.</p> <code>None</code> <code>headers</code> <code>Optional[dict]</code> <p>Headers to send with each request, by default None.</p> <code>None</code> <code>timeout</code> <code>int</code> <p>Seconds to wait for a response before timing out, by default 5.</p> <code>5</code> <code>content_type</code> <code>str</code> <p>The content type to send with each request, by default \"application/json\".</p> <code>'application/json'</code>"},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.base_params","title":"<code>base_params: dict = base_params or {}</code>  <code>instance-attribute</code>","text":"<p>Base parameters to send with each request.</p>"},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.base_url","title":"<code>base_url: str = base_url</code>  <code>instance-attribute</code>","text":"<p>The base URL to send messages to.</p>"},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.content_type","title":"<code>content_type = self.headers['Content-Type']</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.headers","title":"<code>headers: dict = headers or {}</code>  <code>instance-attribute</code>","text":"<p>Headers to send with each request.</p>"},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.logger","title":"<code>logger = logger</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.timeout","title":"<code>timeout: int = timeout</code>  <code>instance-attribute</code>","text":"<p>Timeout for sending messages in seconds.</p>"},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.check","title":"<code>check()</code>","text":"<p>Check the connection status of the HTTP client.</p> <p>Raises:</p> Type Description <code>HealthCheckError</code> <p>If the connection is not successful. This could be due to a connection error or if the POST method is not allowed.</p>"},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.from_config","title":"<code>from_config(config, logger=None)</code>  <code>classmethod</code>","text":"<p>Create an HTTPMessenger from a configuration object.</p>"},{"location":"reference/components/#acoupi.components.messengers.HTTPMessenger.send_message","title":"<code>send_message(message)</code>","text":"<p>Send a recording message through a HTTP POST request.</p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig","title":"<code>MQTTConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig.host","title":"<code>host: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig.password","title":"<code>password: Optional[SecretStr] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig.port","title":"<code>port: int = 1884</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig.timeout","title":"<code>timeout: int = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig.topic","title":"<code>topic: str = 'acoupi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig.username","title":"<code>username: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTConfig.dump_password","title":"<code>dump_password(value)</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger","title":"<code>MQTTMessenger(host, topic, port=1884, username=None, password=None, timeout=5, logger=None)</code>","text":"<p>               Bases: <code>Messenger</code></p> <p>Messenger that sends messages via MQTT.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The host to connect to. Example: \"mqtt.localhost.org\".</p> required <code>username</code> <code>str</code> <p>The username to authenticate with.</p> <code>None</code> <code>topic</code> <code>str</code> <p>The topic to send messages to. Example: \"org/survey/device_00/\".</p> required <code>port</code> <code>int</code> <p>The port to connect to, by default 1884.</p> <code>1884</code> <code>password</code> <code>Optional[SecretStr]</code> <p>The password to authenticate with, by default None.</p> <code>None</code> Notes <p>Will use the device ID as the client ID.</p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.client","title":"<code>client: mqtt.Client = mqtt.Client(callback_api_version=CallbackAPIVersion.VERSION2, client_id=self.client_id, clean_session=False)</code>  <code>instance-attribute</code>","text":"<p>The MQTT client.</p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.client_id","title":"<code>client_id = get_device_id()</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.host","title":"<code>host = host</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.logger","title":"<code>logger: logging.Logger = logger</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.port","title":"<code>port = port</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.timeout","title":"<code>timeout: int = timeout</code>  <code>instance-attribute</code>","text":"<p>Timeout for sending messages.</p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.topic","title":"<code>topic: str = topic</code>  <code>instance-attribute</code>","text":"<p>The MQTT topic to send messages to.</p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.check","title":"<code>check()</code>","text":"<p>Check the connection status of the MQTT client.</p> <p>Raises:</p> Type Description <code>HealthCheckError</code> <p>If the connection is not successful. This could be due to a connection error or an authentication failure.</p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.check_connection","title":"<code>check_connection()</code>","text":"<p>Check the connection status of the MQTT client.</p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.from_config","title":"<code>from_config(config, logger=None)</code>  <code>classmethod</code>","text":"<p>Create an MQTTMessenger from a configuration object.</p>"},{"location":"reference/components/#acoupi.components.messengers.MQTTMessenger.send_message","title":"<code>send_message(message)</code>","text":"<p>Send a recording message.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>Message</code> <p>The message to send.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A response containing the message, status, content, and received time.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; message = data.Message(\n...     content=\"hello world\",\n... )\n&gt;&gt;&gt; messenger = MQTTMessenger(\n...     host=\"mqtt.localhost.org\",\n...     username=\"mqttusername\",\n...     topic=\"org/survey/device_00\",\n...     clientid=\"org/survey/device_00\",\n... )\n&gt;&gt;&gt; messenger.send_message(message)\n&gt;&gt;&gt; data.Response(\n...     message=data.Message(content=\"{}\"),\n...     status=ResponseStatus.SUCCESS,\n...     content=\"MQTT_ERR_SUCCESS\",\n...     received_on=datetime.datetime(),\n... )\n</code></pre>"},{"location":"reference/components/#acoupi.components.messengers-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.models","title":"<code>acoupi.components.models</code>","text":""},{"location":"reference/components/#acoupi.components.stores","title":"<code>acoupi.components.stores</code>","text":"<p>Storages for acoupi.</p> <p>Storages are used to store recordings and detections locally. The stores keep track of the recordings and detections that have been made. The stored data can be retrieved later to be sent to a remote server.</p> <p>Storages are implemented as classes that inherit from Storage. The class should implement the methods for storing and retrieving data, as well as the methods for retrieving the current deployment and the recordings and detections for a given deployment. See the Storage class for more details.</p>"},{"location":"reference/components/#acoupi.components.stores-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.stores.SqliteStore","title":"<code>SqliteStore(db_path)</code>","text":"<p>               Bases: <code>Store</code></p> <p>Sqlite store implementation.</p> <p>The store is used to store the recordings, detections and deployments locally. The data is stored in a sqlite database file in the given path.</p> <p>Under the hood, the store uses the Pony ORM to interact with the database. The database schema is defined in the database module and contains the following tables:</p> <ul> <li> <p>Deployment: Contains the deployment information. Each deployment is   associated with a device, and has a start datetime. The deployment can   also have a latitude and longitude associated with it.</p> </li> <li> <p>Recording: Contains the recording information. Each recording is   associated with a deployment, and has a datetime, duration, samplerate   and number of                 audio_channels.</p> </li> <li> <p>PredictedTag: Contains the predicted tag information. Each predicted tag   has a key, value and score.</p> </li> <li> <p>Detection: Contains the detection information. Each detection consists   of a location, score and a list of predicted tags.</p> </li> <li> <p>ModelOutput: Contains the model output information. Each model output   has the model name, the list of predicted tags at the recording level,   and a list of detections.</p> </li> </ul> <p>The store is thread-safe, and can be used from multiple threads simultaneously.</p> Notes <p>The ID of the deployment, recording, model output and detection is a UUID field. Note that sqlite stores UUIDs as a BLOB, so when querying the database with SQL, you should use the hex function to convert the UUID to a string.</p> <p>Example queries:</p> <p>.. code-block:: sql</p> <pre><code>-- Find a specific deployment by UUID\nSELECT * FROM Deployment WHERE hex(id) = '00000000000000000000000000000000';\n\n-- Get all deployment UUIDs as strings\nSELECT hex(id) FROM Deployment;\n</code></pre> <p>Will create a database file at the given path if it does not exist.</p> <p>Args:     db_path: Path to the database file. Can be set to :memory: to use         an in-memory database.</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.stores.SqliteStore.database","title":"<code>database: orm.Database = orm.Database()</code>  <code>instance-attribute</code>","text":"<p>The Pony ORM database object.</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.db_path","title":"<code>db_path: Path = db_path</code>  <code>instance-attribute</code>","text":"<p>Path to the database file.</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.models","title":"<code>models: db_types.BaseModels = create_base_models(self.database)</code>  <code>instance-attribute</code>","text":"<p>The Pony ORM models.</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.stores.SqliteStore.get_current_deployment","title":"<code>get_current_deployment()</code>","text":"<p>Get the current deployment.</p> <p>The current deployment is the one with the latest started_on datetime.</p> <p>If no deployment is found, a new deployment will be registered with the current datetime, and the latitude and longitude set to None.</p> <p>Returns:</p> Type Description <code>    The current deployment</code>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.get_detections","title":"<code>get_detections(ids=None, model_output_ids=None, score_gt=None, score_lt=None, model_names=None, after=None, before=None)</code>","text":"<p>Get a list of detections from the store based on their model_output ids.</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.get_model_outputs","title":"<code>get_model_outputs(after=None, before=None, ids=None, recording_ids=None, model_names=None, detection_ids=None, limit=None)</code>","text":"<p>Get a list of model outputs from the store by their id.</p> <p>Args:     start_time: The time to start the search from.     end_time: The time to end the search at.</p> <p>Returns:</p> Type Description <code>    List of model_outputs matching the created_on datetime.</code>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.get_predicted_tags","title":"<code>get_predicted_tags(detection_ids=None, after=None, before=None, score_gt=None, score_lt=None, keys=None, values=None)</code>","text":"<p>Get a list of predicted tags from the store based on their detection ids.</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.get_recordings","title":"<code>get_recordings(ids)</code>","text":"<p>Get a list recordings from the store by their ids.</p> <p>Each recording is returned with the full list of model outputs registered.</p> <p>Args:     ids: The ids of the recordings to get.</p> <p>Returns:</p> Type Description <code>    A list of tuples of the recording and the model outputs.</code>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.get_recordings_by_path","title":"<code>get_recordings_by_path(paths)</code>","text":"<p>Get a list of recordings from the store by their paths.</p> <p>Args:     paths: The paths of the recordings to get.</p> <p>Returns:</p> Type Description <code>    List of tuples of the recording and the corresponding model outputs.</code>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.store_deployment","title":"<code>store_deployment(deployment)</code>","text":"<p>Store the deployment locally.</p> <p>Args:     deployment: The deployment to store</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.store_model_output","title":"<code>store_model_output(model_output)</code>","text":"<p>Store the model output locally.</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.store_recording","title":"<code>store_recording(recording)</code>","text":"<p>Store the recording locally.</p> <p>If the deployment is not provided, the current deployment will be used.</p> <p>Args:     recording: The recording to store</p>"},{"location":"reference/components/#acoupi.components.stores.SqliteStore.update_deployment","title":"<code>update_deployment(deployment)</code>","text":""},{"location":"reference/components/#acoupi.components.stores.SqliteStore.update_recording_path","title":"<code>update_recording_path(recording, path)</code>","text":"<p>Update the path of a recording.</p> <p>Args:     recording: The recording to update.     path: The new path.</p>"},{"location":"reference/components/#acoupi.components.message_stores","title":"<code>acoupi.components.message_stores</code>","text":""},{"location":"reference/components/#acoupi.components.output_cleaners","title":"<code>acoupi.components.output_cleaners</code>","text":"<p>ModelOutput cleaners for acoupi.</p> <p>Model Output Cleaners are responsible for cleaning the outputs of a model (i.e., detections) that do not meet certain criteria. This can include removing low confidence tags and detections, or detections and tags that have a specific labels. For example, the ThresholdDetectionCleaner removes any predictions (i.e., detections and tags) with a score below a threshold.</p> <p>The ModelOutputCleaner is implemented as a class that inherits from ModelOutputCleaner. The class should implement the clean method, which takes a data.ModelOutput object and returns a cleaned data.ModelOutput object. The modeloutput that does not meet the criteria are removed.</p> <p>The ModelOutputCleaner is used in the detection task to clean the outputs of the model BEFORE storing them in the store. The ModelOutputCleaner is passed to the detection task as a list of ModelOutputCleaner objects. This allows to use multiple ModelOutputCleaners to clean the model output.</p>"},{"location":"reference/components/#acoupi.components.output_cleaners-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.output_cleaners.ThresholdDetectionCleaner","title":"<code>ThresholdDetectionCleaner(detection_threshold)</code>","text":"<p>               Bases: <code>ModelOutputCleaner</code></p> <p>Keeps predictions with a score higher than a threshold.</p> <p>This class implements a model output cleaner that removes any predictions with a score below a threshold. This includes removing low confidence tags and detections.</p>"},{"location":"reference/components/#acoupi.components.output_cleaners.ThresholdDetectionCleaner-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.output_cleaners.ThresholdDetectionCleaner.detection_threshold","title":"<code>detection_threshold: float = detection_threshold</code>  <code>instance-attribute</code>","text":"<p>The threshold to use to define when a detection is stored.</p>"},{"location":"reference/components/#acoupi.components.output_cleaners.ThresholdDetectionCleaner-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.output_cleaners.ThresholdDetectionCleaner.clean","title":"<code>clean(model_output)</code>","text":"<p>Clean the model output.</p> <p>Parameters:</p> Name Type Description Default <code>model_output</code> <code>ModelOutput</code> <p>The model output to clean.</p> required <p>Returns:</p> Type Description <code>ModelOutput</code> <p>The cleaned model output.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; model_output = data.ModelOutput(\n...     detections=[\n...         data.Detection(\n...             detection_score=0.8,\n...             tags=[\n...                 data.PredictedTag(\n...                     tag=data.Tag(\n...                         key=\"species\", value=\"species_1\"\n...                     ),\n...                     confidence_score=0.7,\n...                 )\n...             ],\n...             tags=[\n...                 data.PredictedTag(\n...                     tag=data.Tag(\n...                         key=\"species\", value=\"species_2\"\n...                     ),\n...                     confidence_score=0.4,\n...                 )\n...             ],\n...         )\n...     ]\n... )\n&gt;&gt;&gt; cleaner = ThresholdDetectionCleaner(detection_threshold=0.6)\n&gt;&gt;&gt; model_output = cleaner.clean(model_output)\n&gt;&gt;&gt; assert model_output == data.ModelOutput(\n...     detections=[\n...         data.Detection(\n...             detection_score=0.8,\n...             tags=[\n...                 data.PredictedTag(\n...                     tag=data.Tag(\n...                         key=\"species\", value=\"species_1\"\n...                     ),\n...                     confidence_score=0.7,\n...                 )\n...             ],\n...         )\n...     ]\n... )\n</code></pre>"},{"location":"reference/components/#acoupi.components.output_cleaners.ThresholdDetectionCleaner.clean_detection","title":"<code>clean_detection(detection)</code>","text":"<p>Remove tags with low score from detection.</p>"},{"location":"reference/components/#acoupi.components.output_cleaners.ThresholdDetectionCleaner.get_clean_detections","title":"<code>get_clean_detections(detections)</code>","text":"<p>Remove detections with low score.</p>"},{"location":"reference/components/#acoupi.components.output_cleaners.ThresholdDetectionCleaner.get_clean_tags","title":"<code>get_clean_tags(tags)</code>","text":"<p>Remove tags with low score.</p>"},{"location":"reference/components/#acoupi.components.processing_filters","title":"<code>acoupi.components.processing_filters</code>","text":"<p>Processing filters for the Acoupi project.</p> <p>Processing filters are used to determine if a recording should be processed by the model. This is useful for example if you want to only process recordings that satisfy certain criteria, such as a minimum duration or that surpass a certain amplitude threshold. This can be used to reduce the amount of computational resources required to process a large number of recordings.</p> <p>Processing filters are implemented as classes that inherit from ProcessingFilter. The class should implement the should_process_recording method, which takes a Recording object and returns a boolean indicating if the recording should be processed by the model.</p> <p>Keep in mind that the should_process_recording method is called for every recording, so it should be as efficient as possible.</p>"},{"location":"reference/components/#acoupi.components.processing_filters-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.processing_filters.TrivialProcessingFilter","title":"<code>TrivialProcessingFilter</code>","text":"<p>               Bases: <code>ProcessingFilter</code></p> <p>A ProcessingFilter that always returns True.</p>"},{"location":"reference/components/#acoupi.components.processing_filters.TrivialProcessingFilter-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.processing_filters.TrivialProcessingFilter.should_process_recording","title":"<code>should_process_recording(recording)</code>","text":"<p>Determine if the recording should be processed by the model.</p>"},{"location":"reference/components/#acoupi.components.recording_conditions","title":"<code>acoupi.components.recording_conditions</code>","text":"<p>Recording conditions for acoupi.</p> <p>Recording conditions are used to determine if a recording should be made according to a specific condition. This is useful for example if you want to only record during specific times of day, such as between 8am and 5pm, or if you want to record during specific days of the week, such as only on weekdays, or if you want to record based on the value of a sensor (e.g., readings from temperature or luminosity sensors).</p> <p>Recording conditions are implemented as classes that inherit from RecordingCondition. The class should implement the should_record method, which returns a boolean indicating if a recording should be made.</p>"},{"location":"reference/components/#acoupi.components.recording_conditions-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.DawnTimeInterval","title":"<code>DawnTimeInterval(duration, timezone)</code>","text":"<p>               Bases: <code>RecordingCondition</code></p> <p>A RecordingCondition that records only during the dawn time interval.</p> <p>Parameters:</p> Name Type Description Default <code>duration</code> <code>float</code> <p>The duration of time (in minutes) before and after dawntime.</p> required <code>timezone</code> <code>tzinfo</code> <p>The timezone that the dawn time is in.</p> required"},{"location":"reference/components/#acoupi.components.recording_conditions.DawnTimeInterval-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.DawnTimeInterval.duration","title":"<code>duration: float = duration</code>  <code>instance-attribute</code>","text":"<p>The duration of time (in minutes) before and after dawntime.</p>"},{"location":"reference/components/#acoupi.components.recording_conditions.DawnTimeInterval.timezone","title":"<code>timezone: datetime.tzinfo = timezone</code>  <code>instance-attribute</code>","text":"<p>The timezone that the dawn time is in.</p>"},{"location":"reference/components/#acoupi.components.recording_conditions.DawnTimeInterval-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.DawnTimeInterval.should_record","title":"<code>should_record()</code>","text":"<p>Determine if a recording should be made.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the current time is within the dawn time interval. False otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dawn_time = time(6, 0)\n&gt;&gt;&gt; duration = 30\n&gt;&gt;&gt; timezone = \"Europe/London\"\n&gt;&gt;&gt; time = datetime(2024, 1, 1, 6, 15, 0, tzinfo=timezone)\n&gt;&gt;&gt; DawnTimeInterval(\n...     dawn_time, duration, timezone\n... ).should_record(time)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; dawn_time = time(6, 0)\n&gt;&gt;&gt; duration = 30\n&gt;&gt;&gt; timezone = \"Europe/London\"\n&gt;&gt;&gt; time = datetime(2024, 1, 1, 5, 45, 0, tzinfo=timezone)\n&gt;&gt;&gt; DawnTimeInterval(\n...     dawn_time, duration, timezone\n... ).should_record(time)\nFalse\n</code></pre>"},{"location":"reference/components/#acoupi.components.recording_conditions.IsInInterval","title":"<code>IsInInterval(interval, timezone)</code>","text":"<p>               Bases: <code>RecordingCondition</code></p> <p>A RecordingCondition that records only during a specific interval of time.</p> <p>This class checks whether the current time falls withing a specific interval. If the current time is within the interval, recording is allowed.</p> <p>Parameters:</p> Name Type Description Default <code>interval</code> <code>TimeInterval</code> <p>An object containing a start and end time (datetime.time). The interval of time where audio recordings are allowed.</p> required <code>timezone</code> <code>tzinfo</code> <p>The timezone that the interval is in. This ensures that the interval is calculated correctly across different timezones.</p> required"},{"location":"reference/components/#acoupi.components.recording_conditions.IsInInterval-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.IsInInterval.interval","title":"<code>interval = interval</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.IsInInterval.timezone","title":"<code>timezone = timezone</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.IsInInterval-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.IsInInterval.should_record","title":"<code>should_record()</code>","text":"<p>Determine if a recording should be made.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the current time falls within the interval. False otherwise.</p> Notes <p>Uses the current time as provided by the system clock.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; interval = TimeInterval(start=time(8, 0), end=time(17, 0))\n&gt;&gt;&gt; timezone = \"Europe/London\"\n&gt;&gt;&gt; time = datetime(2024, 1, 1, 12, 0, 0, tzinfo=timezone)\n&gt;&gt;&gt; IsInInterval(interval, timezone).should_record(time)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; interval = TimeInterval(start=time(8, 0), end=time(17, 0))\n&gt;&gt;&gt; timezone = \"Europe/London\"\n&gt;&gt;&gt; time = datetime(2024, 1, 1, 18, 0, 0, tzinfo=timezone)\n&gt;&gt;&gt; IsInInterval(interval, timezone).should_record(time)\nFalse\n</code></pre>"},{"location":"reference/components/#acoupi.components.recording_conditions.IsInIntervals","title":"<code>IsInIntervals(intervals, timezone)</code>","text":"<p>               Bases: <code>RecordingCondition</code></p> <p>A RecordManager that records during multiple intervals of time.</p> <p>Parameters:</p> Name Type Description Default <code>intervals</code> <code>List[TimeInterval]</code> <p>of Interval objects.</p> required <code>timezone</code> <code>tzinfo</code> <p>should be made.</p> required"},{"location":"reference/components/#acoupi.components.recording_conditions.IsInIntervals-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.IsInIntervals.intervals","title":"<code>intervals = intervals</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.IsInIntervals.timezone","title":"<code>timezone = timezone</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.IsInIntervals-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.recording_conditions.IsInIntervals.should_record","title":"<code>should_record()</code>","text":"<p>Determine if a recording should be made.</p>"},{"location":"reference/components/#acoupi.components.recording_schedulers","title":"<code>acoupi.components.recording_schedulers</code>","text":"<p>Recording Schedulers for acoupi.</p> <p>Recording schedulers are used to determine how often recordings should be made. This is useful for example if you want to record at a constant interval, or if you want to record at a variable interval, such as every 10 minutes during the day and every 30 minutes at night.</p> <p>Recording schedulers are implemented as classes that inherit from RecordingScheduler. The class should implement the time_until_next_recording method, which returns the time in seconds until the next recording should be made.</p>"},{"location":"reference/components/#acoupi.components.recording_schedulers-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.recording_schedulers.IntervalScheduler","title":"<code>IntervalScheduler(timeinterval)</code>","text":"<p>               Bases: <code>RecordingScheduler</code></p> <p>Will wait for a constant amount of time between each recording.</p> <p>Parameters:</p> Name Type Description Default <code>timeinterval</code> <code>float</code> <p>The interval between each recording. In seconds.</p> required"},{"location":"reference/components/#acoupi.components.recording_schedulers.IntervalScheduler-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.recording_schedulers.IntervalScheduler.interval","title":"<code>interval: float</code>  <code>instance-attribute</code>","text":"<p>The interval between each recording. In seconds.</p>"},{"location":"reference/components/#acoupi.components.recording_schedulers.IntervalScheduler.timeinterval","title":"<code>timeinterval = timeinterval</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.recording_schedulers.IntervalScheduler-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.recording_schedulers.IntervalScheduler.time_until_next_recording","title":"<code>time_until_next_recording(time=None)</code>","text":"<p>Provide the number of seconds until the next recording.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>Optional[datetime]</code> <p>The time to use for determining the next recording, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>float</code> <p>The number of seconds until the next recording. Will return 0 if a recording should be made immediately.</p>"},{"location":"reference/components/#acoupi.components.saving_filters","title":"<code>acoupi.components.saving_filters</code>","text":"<p>Recording Saving Filters for acoupi.</p> <p>RecordingSavingFilters are used to determine if a recording should be saved based on specific criteria. These filters can be used to save recordings based on time intervals, detection probabilities, classification probabilities, classification tag values, and more.</p> <p>The Recording SavingFilters are implemented as classes that inherit from the RecordingSavingFilter Implementation of the RecordingSavingFilters should implement the should_save_recording method, which takes a recording object and a list of model outputs, and returns a boolean value.</p> <p>The RecordingSavingFilters are used in the acoupi.tasks.management module to determine if a recording should be saved based on the output of the models and the filters provided. If a recording pass filters, it will be kept and stored in a directory specified by the RecordingSavingManager. If a recording does not pass the filters, it is deleted.</p> <p>The RecordingSavingFilters are optional and can be ignored if no recordings should be saved.</p>"},{"location":"reference/components/#acoupi.components.saving_filters-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.saving_filters.After_DawnDuskTimeInterval","title":"<code>After_DawnDuskTimeInterval(duration, timezone)</code>","text":"<p>               Bases: <code>RecordingSavingFilter</code></p> <p>An after dawn and dusk time RecordingSavingFilter.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.After_DawnDuskTimeInterval-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_filters.After_DawnDuskTimeInterval.duration","title":"<code>duration: float = duration</code>  <code>instance-attribute</code>","text":"<p>The duration (in minutes) before dawn and dusk where recordings will be saved.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.After_DawnDuskTimeInterval.timezone","title":"<code>timezone: datetime.tzinfo = timezone</code>  <code>instance-attribute</code>","text":"<p>The timezone to use when determining dawntime and dusktime.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.After_DawnDuskTimeInterval-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_filters.After_DawnDuskTimeInterval.should_save_recording","title":"<code>should_save_recording(recording, model_outputs=None)</code>","text":"<p>Save a recording if it falls within the specified interval, after dawn and dusk.</p> Notes <p>The dawn and dusk times are calculated using the <code>astral</code> library. The <code>sun</code> function returns the dawn and dusk times for a specific location, datetime and timezone. This information is used to determine the interval after dawn and dusk dusk, and whether the current recording falls within this interval.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DawnTime GMT: 2024-01-01 07:26:00+00:00\n&gt;&gt;&gt; DuskTime GMT: 2024-01-01 16:42:00+00:00\n&gt;&gt;&gt; duration = 30\n&gt;&gt;&gt; timezone = \"Europe/London\"\n</code></pre> <pre><code>&gt;&gt;&gt; saving_filter = After_DawnDuskTimeInterval(\n...     duration, timezone\n... )\n&gt;&gt;&gt; recording = data.Recording(\n...     datetime=datetime.datetime(\n...         2024, 1, 1, 7, 0, 0, tzinfo=timezone\n...     )\n... )\n&gt;&gt;&gt; assert saving_filter.should_save_recording(recording)\nFalse\n</code></pre> <pre><code>&gt;&gt;&gt; saving_filter = After_DawnDuskTimeInterval(\n...     duration, timezone\n... )\n&gt;&gt;&gt; recording = data.Recording(\n...     datetime=datetime.datetime(\n...         2024, 1, 1, 17, 0, 0, tzinfo=timezone\n...     )\n... )\n&gt;&gt;&gt; assert saving_filter.should_save_recording(recording)\nTrue\n</code></pre>"},{"location":"reference/components/#acoupi.components.saving_filters.Before_DawnDuskTimeInterval","title":"<code>Before_DawnDuskTimeInterval(duration, timezone)</code>","text":"<p>               Bases: <code>RecordingSavingFilter</code></p> <p>A before dawn and dusk time RecordingSavingFilter.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.Before_DawnDuskTimeInterval-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_filters.Before_DawnDuskTimeInterval.duration","title":"<code>duration = duration</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.saving_filters.Before_DawnDuskTimeInterval.timezone","title":"<code>timezone = timezone</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.saving_filters.Before_DawnDuskTimeInterval-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_filters.Before_DawnDuskTimeInterval.should_save_recording","title":"<code>should_save_recording(recording, model_outputs=None)</code>","text":"<p>Save a recording if it falls within the specified interval, before dawn and dusk.</p> Notes <p>The dawn and dusk times are calculated using the <code>astral</code> library. The <code>sun</code> function returns the dawn and dusk times for a specific location, datetime and timezone. This information is used to determine the interval before dawn and dusk dusk, and whether the current recording falls within this interval.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; DawnTime GMT: 2024-01-01 07:26:00+00:00\n&gt;&gt;&gt; DuskTime GMT: 2024-01-01 16:42:00+00:00\n&gt;&gt;&gt; duration = 30\n&gt;&gt;&gt; timezone = \"Europe/London\"\n</code></pre> <pre><code>&gt;&gt;&gt; saving_filter = Before_DawnDuskTimeInterval(\n...     duration, timezone\n... )\n&gt;&gt;&gt; recording = data.Recording(\n...     datetime=datetime.datetime(\n...         2024, 1, 1, 7, 0, 0, tzinfo=timezone\n...     )\n... )\n&gt;&gt;&gt; assert saving_filter.should_save_recording(recording)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; saving_filter = Before_DawnDuskTimeInterval(\n...     duration, timezone\n... )\n&gt;&gt;&gt; recording = data.Recording(\n...     datetime=datetime.datetime(\n...         2024, 1, 1, 17, 0, 0, tzinfo=timezone\n...     )\n... )\n&gt;&gt;&gt; assert saving_filter.should_save_recording(recording)\nFalse\n</code></pre>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTagValue","title":"<code>DetectionTagValue(values)</code>","text":"<p>               Bases: <code>RecordingSavingFilter</code></p> <p>A RecordingSavingFilter that keeps recordings with specific tag values.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTagValue-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTagValue.values","title":"<code>values: List[str] = values</code>  <code>instance-attribute</code>","text":"<p>The tag values to focus on.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTagValue-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTagValue.has_confident_tagvalues","title":"<code>has_confident_tagvalues(model_output)</code>","text":"<p>Determine if a model output has a confident tag values.</p> <p>An output is considered confident if any of its tag value (e.g., species_name) is in the values list.</p> <p>Parameters:</p> Name Type Description Default <code>model_output</code> <code>ModelOutput</code> <p>The model output of the recording containing detections and tags.</p> required <p>Returns:</p> Type Description <code>    bool</code>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTagValue.should_save_recording","title":"<code>should_save_recording(recording, model_outputs=None)</code>","text":"<p>Save a recording if it contains any confident tag values.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTags","title":"<code>DetectionTags(tags, saving_threshold=0.5)</code>","text":"<p>               Bases: <code>RecordingSavingFilter</code></p> <p>A RecordingSavingFilter that keeps recordings with selected tags.</p> <p>This filter will keep recordings that contain confident tag predictions that are in the tags list.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTags-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTags.saving_threshold","title":"<code>saving_threshold: float = saving_threshold</code>  <code>instance-attribute</code>","text":"<p>The score threshold to use.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTags.tags","title":"<code>tags: List[data.Tag] = tags</code>  <code>instance-attribute</code>","text":"<p>The tags to focus on.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTags-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTags.has_confident_tag","title":"<code>has_confident_tag(model_output)</code>","text":"<p>Determine if a model output has a confident tag.</p> <p>An output is considered confident if any of its tags or detections have a score greater than or equal to the threshold.</p> <p>Parameters:</p> Name Type Description Default <code>model_output</code> <code>ModelOutput</code> <p>The model output of the recording containing detections and tags.</p> required <p>Returns:</p> Type Description <code>    bool</code>"},{"location":"reference/components/#acoupi.components.saving_filters.DetectionTags.should_save_recording","title":"<code>should_save_recording(recording, model_outputs=None)</code>","text":"<p>Save a recording if it contains any confident tags or detections.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.FrequencySchedule","title":"<code>FrequencySchedule(duration, frequency)</code>","text":"<p>               Bases: <code>RecordingSavingFilter</code></p> <p>A frequency schedule RecordingSavingFilter.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.FrequencySchedule-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_filters.FrequencySchedule.duration","title":"<code>duration: int = duration</code>  <code>instance-attribute</code>","text":"<p>The duration of time (in minutes) where recordings will be saved.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.FrequencySchedule.frequency","title":"<code>frequency: int = frequency</code>  <code>instance-attribute</code>","text":"<p>The frequency of time (in minutes) where recordings will be saved.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.FrequencySchedule-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_filters.FrequencySchedule.should_save_recording","title":"<code>should_save_recording(recording, model_outputs=None)</code>","text":"<p>Determine if a recording should be saved.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.SaveIfInInterval","title":"<code>SaveIfInInterval(interval, timezone)</code>","text":"<p>               Bases: <code>RecordingSavingFilter</code></p> <p>A time interval RecordingSavingFilter.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.SaveIfInInterval-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_filters.SaveIfInInterval.interval","title":"<code>interval: data.TimeInterval = interval</code>  <code>instance-attribute</code>","text":"<p>The interval of time where recordings will be saved.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.SaveIfInInterval.timezone","title":"<code>timezone: datetime.tzinfo = timezone</code>  <code>instance-attribute</code>","text":"<p>The timezone to use when determining if recording should be saved.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.SaveIfInInterval-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_filters.SaveIfInInterval.should_save_recording","title":"<code>should_save_recording(recording, model_outputs=None)</code>","text":"<p>Save a recording if it falls within the specified interval.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; interval = data.TimeInterval(\n...     start=datetime.time(21, 30), end=datetime.time(23, 00)\n... )\n&gt;&gt;&gt; timezone = datetime.timezone.utc\n&gt;&gt;&gt; filter = SaveIfInInterval(interval, timezone)\n&gt;&gt;&gt; recording = data.Recording(\n...     datetime=datetime.datetime(\n...         2024, 1, 1, 22, 0, 0, tzinfo=timezone\n...     )\n... )\n&gt;&gt;&gt; filter.should_save_recording(recording)\nTrue\n</code></pre>"},{"location":"reference/components/#acoupi.components.saving_filters.SavingThreshold","title":"<code>SavingThreshold(saving_threshold)</code>","text":"<p>               Bases: <code>RecordingSavingFilter</code></p> <p>A SavingThreshold RecordingSavingFilter.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.SavingThreshold-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_filters.SavingThreshold.saving_threshold","title":"<code>saving_threshold: float = saving_threshold</code>  <code>instance-attribute</code>","text":"<p>The score threshold to use.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.SavingThreshold-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_filters.SavingThreshold.has_confident_model_output","title":"<code>has_confident_model_output(model_output)</code>","text":"<p>Determine if a model output has confident detections or tags.</p> <p>An output is considered confident if any of its detection score or classification tag score is greater than or equal to the threshold.</p> <p>Parameters:</p> Name Type Description Default <code>model_output</code> <code>ModelOutput</code> <p>The model output of the recording containing detections and tags.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if any detection or classification score is above the saving threshold. False if no detection or classification score is above the saving threshold.</p>"},{"location":"reference/components/#acoupi.components.saving_filters.SavingThreshold.should_save_recording","title":"<code>should_save_recording(recording, model_outputs=None)</code>","text":"<p>Save a recording if it contains any confident detections or tags.</p>"},{"location":"reference/components/#acoupi.components.saving_managers","title":"<code>acoupi.components.saving_managers</code>","text":"<p>Saving managers for the recordings and detections of acoupi.</p> <p>Saving managers are used to determine where and how the recordings and detections of an audio file should be saved. This is helpful to handle recordings files and detections outputs. Recordings and detections outputs can be saved into a specific format (i.e, .wav files, .csv files) and at a specific location (i.e, rpi memory, external hardrive, folder XX/YY).</p> <p>The SavingManagers are implemented as class that inherit from RecordingSavingManager. The classes should implement the save_recording method. The save_recording method takes a recording object and a list of model outputs as input and returns the path where the recording should be saved.</p> <p>The save_recording method is called by the file management task to determine where the recording should be saved. The file management task is responsible for moving recordings from the memory to the disk, and remove recordings that are no longer needed.</p> <p>The SavingManagers are optional and can be ingored if the no recordings are saved.</p>"},{"location":"reference/components/#acoupi.components.saving_managers-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.saving_managers.BaseFileManager","title":"<code>BaseFileManager(directory, logger=None)</code>","text":"<p>               Bases: <code>RecordingSavingManager</code>, <code>ABC</code></p> <p>Base implementation for simple recording saving managers.</p> <p>This class can be used to implement simple recording saving managers that do not use model outputs to determine where the recording should be saved.</p> <p>All recordings are saved in a directory specified in the constructor and the relative path is determined by the get_file_path method.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.BaseFileManager-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_managers.BaseFileManager.directory","title":"<code>directory: Path = directory</code>  <code>instance-attribute</code>","text":"<p>Directory where the files are stored.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.BaseFileManager.logger","title":"<code>logger = logger</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.saving_managers.BaseFileManager-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_managers.BaseFileManager.get_file_path","title":"<code>get_file_path(recording)</code>  <code>abstractmethod</code>","text":"<p>Get the path where the file of a recording should be stored.</p> <p>The path must be relative to the directory specified in the constructor.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>Recording to get the path for.</p> required <p>Returns:</p> Type Description <code>    Path of the file.</code>"},{"location":"reference/components/#acoupi.components.saving_managers.BaseFileManager.save_recording","title":"<code>save_recording(recording, model_outputs=None)</code>","text":"<p>Save a recording to a file.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>Recording to save.</p> required <p>Returns:</p> Type Description <code>    Path of the saved file.</code>"},{"location":"reference/components/#acoupi.components.saving_managers.DateFileManager","title":"<code>DateFileManager(directory, logger=None)</code>","text":"<p>               Bases: <code>BaseFileManager</code></p> <p>FileManager that uses the date to organise the recordings.</p> <p>The recordings are organised in directories of the form</p> <p>YYYY/MM/DD/</p> <p>where YYYY is the year, MM is the month and DD is the day. The files are named using the time of the recording and its ID. The format is</p> <p>HHMMSS_ID.wav</p> <p>All the files are stored in a single directory that is specified in the constructor.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.DateFileManager-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_managers.DateFileManager.get_file_path","title":"<code>get_file_path(recording)</code>","text":"<p>Get the path where the file of a recording should be stored.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>Recording to get the path for.</p> required <p>Returns:</p> Type Description <code>    Path of the file.</code>"},{"location":"reference/components/#acoupi.components.saving_managers.IDFileManager","title":"<code>IDFileManager(directory, logger=None)</code>","text":"<p>               Bases: <code>BaseFileManager</code></p> <p>FileManager that uses the ID of the recording to organise the files.</p> <p>The recordings are saved in a single directory that is specified in the constructor. The files are named using the ID of the recording. The format is</p> <p>ID.wav</p>"},{"location":"reference/components/#acoupi.components.saving_managers.IDFileManager-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_managers.IDFileManager.get_file_path","title":"<code>get_file_path(recording)</code>","text":"<p>Get the the path where the file of a recording should be stored.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager","title":"<code>SaveRecordingManager(dirpath, dirpath_true=None, dirpath_false=None, timeformat='%Y%m%d_%H%M%S', detection_threshold=0.6, saving_threshold=0.3, logger=None)</code>","text":"<p>               Bases: <code>RecordingSavingManager</code></p> <p>A Recording SavingManager that save audio recordings.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.detection_threshold","title":"<code>detection_threshold: float = detection_threshold</code>  <code>instance-attribute</code>","text":"<p>Threshold determining if a recording contains confident detections.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.dirpath","title":"<code>dirpath: Path = dirpath</code>  <code>instance-attribute</code>","text":"<p>Directory path to save recordings.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.dirpath_false","title":"<code>dirpath_false: Path = dirpath_false</code>  <code>instance-attribute</code>","text":"<p>Directory path to save recordings if audio recording contain no confident detections (i.e., below the detection threshold).</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.dirpath_true","title":"<code>dirpath_true: Path = dirpath_true</code>  <code>instance-attribute</code>","text":"<p>Directory path to save recordings if audio recording contains confident detections (i.e., above the detection threshold).</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.logger","title":"<code>logger = logger</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.saving_threshold","title":"<code>saving_threshold: float = saving_threshold</code>  <code>instance-attribute</code>","text":"<p>Threshold determining if recordings should be saved (i.e., regardless of confident or unconfident detections).</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.timeformat","title":"<code>timeformat: str = timeformat</code>  <code>instance-attribute</code>","text":"<p>Datetime format to use to name the recording file path.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.get_saving_recording_path","title":"<code>get_saving_recording_path(model_outputs)</code>","text":"<p>Determine where the recording should be saved.</p> <p>Parameters:</p> Name Type Description Default <code>model_outputs</code> <code>Optional[List[ModelOutput]]</code> <p>List of model outputs containing detections and tags.</p> required <p>Returns:</p> Type Description <code>Path</code> <p>Path where the recording should be saved.</p>"},{"location":"reference/components/#acoupi.components.saving_managers.SaveRecordingManager.save_recording","title":"<code>save_recording(recording, model_outputs=None)</code>","text":"<p>Save a recording to a file.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; dirpath = Path(\"path/to/save\")\n&gt;&gt;&gt; dirpath_true = Path(\"path/to/save/confident_detections\")\n&gt;&gt;&gt; dirpath_false = Path(\"path/to/save/unconfident_detections\")\n&gt;&gt;&gt; detection_threshold = 0.8\n&gt;&gt;&gt; saving_threshold = 0.3\n</code></pre> <pre><code>&gt;&gt;&gt; model_outputs = [\n...     data.ModelOutput(tags=[data.Tag(confidence_score=0.7)]),\n...     data.ModelOutput(\n...         detections=[data.Detection(detection_score=0.6)]\n...     ),\n... ]\n&gt;&gt;&gt; saving_directory = self.get_saving_recording_path(\n...     model_outputs\n... )\n&gt;&gt;&gt; assert saving_directory == dirpath_false\n</code></pre>"},{"location":"reference/components/#acoupi.components.summariser","title":"<code>acoupi.components.summariser</code>","text":"<p>Summariser for acoupi.</p> <p>Summarisers are responsible for summarising model outputs (i.e., detections). Summarisers output a summary of type data.Message. The StatisticsDetectionsSummariser summarises the detections by calculating the mean, min, max, and count of classifications probabilities for each species. The ThresholdsDetectionsSummariser summarises the detections by calculating the count and mean of classifications probabilities for each species that fall within a low, mid, and high threshold.</p> <p>The message output by the Summarisers is then used by the Messenger to send the summary to a remote server. Summarisers are implemented as classes that inherit from Summariser. Implemntation of the Summarisers should refer to the database, where the classifications probabilities are stored. The class should implement the build_summary method, which takes a datetime.datetime object and returns a message in JSON format.</p>"},{"location":"reference/components/#acoupi.components.summariser-classes","title":"Classes","text":""},{"location":"reference/components/#acoupi.components.summariser.StatisticsDetectionsSummariser","title":"<code>StatisticsDetectionsSummariser(store, interval=3600)</code>","text":"<p>               Bases: <code>Summariser</code></p> <p>Summarises detections by calculating the mean, min, max, and count of classification probabilities for each species.</p>"},{"location":"reference/components/#acoupi.components.summariser.StatisticsDetectionsSummariser-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.summariser.StatisticsDetectionsSummariser.interval","title":"<code>interval: datetime.timedelta = interval</code>  <code>instance-attribute</code>","text":"<p>The interval to get the detections from in seconds.</p>"},{"location":"reference/components/#acoupi.components.summariser.StatisticsDetectionsSummariser.store","title":"<code>store: SqliteStore = store</code>  <code>instance-attribute</code>","text":"<p>The store to get the detections from.</p>"},{"location":"reference/components/#acoupi.components.summariser.StatisticsDetectionsSummariser-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.summariser.StatisticsDetectionsSummariser.build_summary","title":"<code>build_summary(now)</code>","text":"<p>Build a message from a summary.</p> <p>Parameters:</p> Name Type Description Default <code>now</code> <code>datetime</code> <p>The current time to get the detections from.</p> required <code>self</code> <p>The predicted tags from the store associated with the audio recordings that falls within the time interval (current_time - interval_minute).</p> required <p>Returns:</p> Type Description <code>Message</code> <p>A message containing the summary of the detections. The summary includes the mean, min, max, and count of classification probabilities for each species.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; store = SqliteStore(\"test.db\")\n&gt;&gt;&gt; summariser = StatisticsDetectionsSummariser(store)\n&gt;&gt;&gt; now = datetime.datetime.now()\n&gt;&gt;&gt; summariser.build_summary(now)\n... summary_message = data.Message(\n...     content='{\n...         \"species_1\": {\n...             \"mean\": 0.5,\n...             \"min\": 0.1,\n...             \"max\": 0.9,\n...             \"count\": 10},\n...         \"species_2\": {\n...             \"mean\": 0.6,\n...             \"min\": 0.2,\n...             \"max\": 0.8,\n...             \"count\": 20},\n...         \"timeinterval\": {\n...             \"starttime\": \"2021-01-01T00:00:00\",\n...             \"endtime\": \"2021-01-01T00:10:00\"}\n...     }'\n... )\n</code></pre>"},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser","title":"<code>ThresholdsDetectionsSummariser(store, interval=3600, low_band_threshold=0.1, mid_band_threshold=0.5, high_band_threshold=0.9)</code>","text":"<p>               Bases: <code>Summariser</code></p> <p>Summariser that summarises detections by classification score thresholds.</p> <p>Parameters:</p> Name Type Description Default <code>low_band_threshold</code> <code>float</code> <p>The lower threshold for the classification score, by default 0.1.</p> <code>0.1</code> <code>mid_band_threshold</code> <code>float</code> <p>The middle threshold for the classification score, by default 0.5.</p> <code>0.5</code> <code>high_band_threshold</code> <code>float</code> <p>The higher threshold for the classification score, by default 0.9.</p> <code>0.9</code>"},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser-attributes","title":"Attributes","text":""},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser.high_band_threshold","title":"<code>high_band_threshold = high_band_threshold</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser.interval","title":"<code>interval: datetime.timedelta = interval</code>  <code>instance-attribute</code>","text":"<p>The interval to get the detections from in seconds.</p>"},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser.low_band_threshold","title":"<code>low_band_threshold = low_band_threshold</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser.mid_band_threshold","title":"<code>mid_band_threshold = mid_band_threshold</code>  <code>instance-attribute</code>","text":""},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser.store","title":"<code>store: SqliteStore = store</code>  <code>instance-attribute</code>","text":"<p>The store to get the detections from.</p>"},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser-functions","title":"Functions","text":""},{"location":"reference/components/#acoupi.components.summariser.ThresholdsDetectionsSummariser.build_summary","title":"<code>build_summary(now)</code>","text":"<p>Build a message from a summary.</p> <p>Parameters:</p> Name Type Description Default <code>now</code> <code>datetime</code> <p>The current time to get the detections from.</p> required <code>self</code> <p>The predicted tags from the store associated with the audio recordings that falls within the time interval (current_time - interval_minute).</p> required <p>Returns:</p> Type Description <code>Message</code> <p>A message containing the summary of the detections. The summary includes the count and mean of classification probabilities for each species that fall within a low, mid, and high threshold.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; store = SqliteStore(\"test.db\")\n&gt;&gt;&gt; summariser = ThresholdsDetectionsSummariser(store)\n&gt;&gt;&gt; now = datetime.datetime.now()\n&gt;&gt;&gt; summariser.build_summary(now)\n... summary_message = data.Message(\n...     content='{\n...         \"species_1\": {\n...             \"count_low_threshold\": 10, \"count_mid_threshold\": 20, \"count_high_threshold\": 30,\n...             \"mean_low_threshold\": 0.1, \"mean_mid_threshold\": 0.5, \"mean_high_threshold\": 0.9},\n...         \"species_2\": {\n...             \"count_low_threshold\": 15, \"count_mid_threshold\": 25, \"count_high_threshold\": 35,\n...             \"mean_low_threshold\": 0.2, \"mean_mid_threshold\": 0.6, \"mean_high_threshold\": 0.8},\n...         \"timeinterval\": {\n...             \"starttime\": \"2021-01-01T00:00:00\",\n...             \"endtime\": \"2021-01-01T00:10:00\"}\n...    }'\n... )\n</code></pre>"},{"location":"reference/data/","title":"Data","text":""},{"location":"reference/data/#data","title":"Data","text":""},{"location":"reference/data/#acoupi.data","title":"<code>acoupi.data</code>","text":"<p>Data objects for acoupi System.</p>"},{"location":"reference/data/#acoupi.data-classes","title":"Classes","text":""},{"location":"reference/data/#acoupi.data.BoundingBox","title":"<code>BoundingBox</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>BoundingBox to locate a sound event in time and frequency.</p> <p>All time values are in seconds and all frequency values are in Hz.</p>"},{"location":"reference/data/#acoupi.data.BoundingBox-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.BoundingBox.coordinates","title":"<code>coordinates: Tuple[float, float, float, float]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/data/#acoupi.data.BoundingBox.type","title":"<code>type: str = 'BoundingBox'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/data/#acoupi.data.BoundingBox-functions","title":"Functions","text":""},{"location":"reference/data/#acoupi.data.BoundingBox.from_coordinates","title":"<code>from_coordinates(start_time, low_freq, end_time, high_freq)</code>  <code>classmethod</code>","text":"<p>Create a BoundingBox from coordinates.</p>"},{"location":"reference/data/#acoupi.data.BoundingBox.validate_coordinates","title":"<code>validate_coordinates(value)</code>","text":"<p>Validate that the coordinates are within range.</p>"},{"location":"reference/data/#acoupi.data.Deployment","title":"<code>Deployment</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Deployment captures information about the device deployment.</p> <p>This includes the latitude, longitude, and deployment start.</p>"},{"location":"reference/data/#acoupi.data.Deployment-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.Deployment.ended_on","title":"<code>ended_on: Optional[datetime.datetime] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The datetime when the deployment ended.</p>"},{"location":"reference/data/#acoupi.data.Deployment.id","title":"<code>id: UUID = Field(default_factory=uuid4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The unique ID of the deployment.</p>"},{"location":"reference/data/#acoupi.data.Deployment.latitude","title":"<code>latitude: Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The latitude of the site where the device is deployed.</p>"},{"location":"reference/data/#acoupi.data.Deployment.longitude","title":"<code>longitude: Optional[float] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The longitude of the site where the device is deployed.</p>"},{"location":"reference/data/#acoupi.data.Deployment.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>User provided name of the deployment.</p>"},{"location":"reference/data/#acoupi.data.Deployment.started_on","title":"<code>started_on: datetime.datetime = Field(default_factory=datetime.datetime.now)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The datetime when the device was deployed.</p>"},{"location":"reference/data/#acoupi.data.Deployment-functions","title":"Functions","text":""},{"location":"reference/data/#acoupi.data.Deployment.validate_latitude","title":"<code>validate_latitude(value)</code>","text":"<p>Validate that the latitude are within range.</p>"},{"location":"reference/data/#acoupi.data.Deployment.validate_longitude","title":"<code>validate_longitude(value)</code>","text":"<p>Validate that the longitude are within range.</p>"},{"location":"reference/data/#acoupi.data.Detection","title":"<code>Detection</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Detection is a single prediction from a model.</p>"},{"location":"reference/data/#acoupi.data.Detection-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.Detection.detection_score","title":"<code>detection_score: float = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The score of the detection.</p>"},{"location":"reference/data/#acoupi.data.Detection.id","title":"<code>id: UUID = Field(default_factory=uuid4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The unique ID of the detection</p>"},{"location":"reference/data/#acoupi.data.Detection.location","title":"<code>location: Optional[BoundingBox] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The location of the detection in the recording.</p>"},{"location":"reference/data/#acoupi.data.Detection.tags","title":"<code>tags: List[PredictedTag] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The tags predicted by the model for the detection.</p>"},{"location":"reference/data/#acoupi.data.Detection-functions","title":"Functions","text":""},{"location":"reference/data/#acoupi.data.Detection.sort_tags","title":"<code>sort_tags(value)</code>","text":"<p>Sort tags.</p>"},{"location":"reference/data/#acoupi.data.Detection.validate_score","title":"<code>validate_score(value)</code>","text":"<p>Validate that the score is between 0 and 1.</p>"},{"location":"reference/data/#acoupi.data.Message","title":"<code>Message</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The message to be sent to the remote server.</p>"},{"location":"reference/data/#acoupi.data.Message-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.Message.content","title":"<code>content: str</code>  <code>instance-attribute</code>","text":"<p>The message to be sent. Usually a JSON string.</p>"},{"location":"reference/data/#acoupi.data.Message.created_on","title":"<code>created_on: datetime.datetime = Field(default_factory=datetime.datetime.now)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The datetime when the message was created.</p>"},{"location":"reference/data/#acoupi.data.Message.id","title":"<code>id: UUID = Field(default_factory=uuid4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The unique ID of the message.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput","title":"<code>ModelOutput</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The output of a model.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.ModelOutput.created_on","title":"<code>created_on: datetime.datetime = Field(default_factory=datetime.datetime.now)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The datetime when the model output was created.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput.detections","title":"<code>detections: List[Detection] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of predicted sound events in the recording.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput.id","title":"<code>id: UUID = Field(default_factory=uuid4)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The unique ID of the model output.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput.name_model","title":"<code>name_model: str</code>  <code>instance-attribute</code>","text":"<p>The name of the model that produced the output.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput.recording","title":"<code>recording: Recording</code>  <code>instance-attribute</code>","text":"<p>The recording that was used as input to the model.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput.tags","title":"<code>tags: List[PredictedTag] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The tags predicted by the model at the recording level.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput-functions","title":"Functions","text":""},{"location":"reference/data/#acoupi.data.ModelOutput.sort_detections","title":"<code>sort_detections(value)</code>","text":"<p>Sort detections by ID.</p>"},{"location":"reference/data/#acoupi.data.ModelOutput.sort_tags","title":"<code>sort_tags(value)</code>","text":"<p>Sort tags.</p>"},{"location":"reference/data/#acoupi.data.PredictedTag","title":"<code>PredictedTag</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A PredictedTag is a label predicted by a model.</p> <p>It consists of a key, a value and a score.</p>"},{"location":"reference/data/#acoupi.data.PredictedTag-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.PredictedTag.confidence_score","title":"<code>confidence_score: float = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The confidence score of the predicted tag.</p>"},{"location":"reference/data/#acoupi.data.PredictedTag.tag","title":"<code>tag: Tag</code>  <code>instance-attribute</code>","text":"<p>The tag predicted by the model.</p>"},{"location":"reference/data/#acoupi.data.PredictedTag-functions","title":"Functions","text":""},{"location":"reference/data/#acoupi.data.PredictedTag.validate_score","title":"<code>validate_score(value)</code>","text":"<p>Validate that the score is between 0 and 1.</p>"},{"location":"reference/data/#acoupi.data.Recording","title":"<code>Recording</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Recording is a single audio file recorded from the microphone.</p>"},{"location":"reference/data/#acoupi.data.Recording-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.Recording.audio_channels","title":"<code>audio_channels: Optional[int] = Field(default=1, repr=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The number of audio_channels in the recording.</p>"},{"location":"reference/data/#acoupi.data.Recording.chunksize","title":"<code>chunksize: Optional[int] = Field(default=4096, repr=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The chunksize of the audio file in bytes. Defaults to 4096.</p>"},{"location":"reference/data/#acoupi.data.Recording.created_on","title":"<code>created_on: datetime.datetime = Field(default_factory=datetime.datetime.now, repr=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The datetime when the recording was made</p>"},{"location":"reference/data/#acoupi.data.Recording.deployment","title":"<code>deployment: Deployment = Field(repr=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The deployment that the recording belongs to</p>"},{"location":"reference/data/#acoupi.data.Recording.duration","title":"<code>duration: float = Field(repr=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The duration of the recording in seconds</p>"},{"location":"reference/data/#acoupi.data.Recording.id","title":"<code>id: UUID = Field(default_factory=uuid4, repr=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The unique ID of the recording</p>"},{"location":"reference/data/#acoupi.data.Recording.path","title":"<code>path: Optional[Path] = Field(None, repr=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The path to the audio file in the local filesystem</p>"},{"location":"reference/data/#acoupi.data.Recording.samplerate","title":"<code>samplerate: int = Field(repr=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The samplerate of the recording in Hz</p>"},{"location":"reference/data/#acoupi.data.Recording-functions","title":"Functions","text":""},{"location":"reference/data/#acoupi.data.Recording.validate_audio_channels","title":"<code>validate_audio_channels(value)</code>","text":"<p>Validate that the number of audio_channels is greater than 1.</p>"},{"location":"reference/data/#acoupi.data.Recording.validate_duration","title":"<code>validate_duration(value)</code>","text":"<p>Validate that the duration is greater than 0.</p>"},{"location":"reference/data/#acoupi.data.Recording.validate_samplerate","title":"<code>validate_samplerate(value)</code>","text":"<p>Validate that the samplerate is greater than 0.</p>"},{"location":"reference/data/#acoupi.data.Response","title":"<code>Response</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The response from sending a message.</p>"},{"location":"reference/data/#acoupi.data.Response-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.Response.content","title":"<code>content: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The content of the response.</p>"},{"location":"reference/data/#acoupi.data.Response.message","title":"<code>message: Message</code>  <code>instance-attribute</code>","text":"<p>The message that was sent.</p>"},{"location":"reference/data/#acoupi.data.Response.received_on","title":"<code>received_on: datetime.datetime = Field(default_factory=datetime.datetime.now)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The datetime the message was received.</p>"},{"location":"reference/data/#acoupi.data.Response.status","title":"<code>status: ResponseStatus</code>  <code>instance-attribute</code>","text":"<p>The status of the message.</p>"},{"location":"reference/data/#acoupi.data.ResponseStatus","title":"<code>ResponseStatus</code>","text":"<p>               Bases: <code>IntEnum</code></p> <p>The status of a message.</p>"},{"location":"reference/data/#acoupi.data.ResponseStatus-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.ResponseStatus.ERROR","title":"<code>ERROR = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The message was sent, but there was an error.</p>"},{"location":"reference/data/#acoupi.data.ResponseStatus.FAILED","title":"<code>FAILED = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The message failed to send.</p>"},{"location":"reference/data/#acoupi.data.ResponseStatus.SUCCESS","title":"<code>SUCCESS = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The message was received successfully.</p>"},{"location":"reference/data/#acoupi.data.ResponseStatus.TIMEOUT","title":"<code>TIMEOUT = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The message timed out.</p>"},{"location":"reference/data/#acoupi.data.Tag","title":"<code>Tag</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A Tag is a label for a recording.</p>"},{"location":"reference/data/#acoupi.data.Tag-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.Tag.key","title":"<code>key: str</code>  <code>instance-attribute</code>","text":"<p>The key of the tag.</p>"},{"location":"reference/data/#acoupi.data.Tag.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":"<p>The value of the tag.</p>"},{"location":"reference/data/#acoupi.data.Tag-functions","title":"Functions","text":""},{"location":"reference/data/#acoupi.data.Tag.validate_key","title":"<code>validate_key(value)</code>","text":"<p>Validate that the key is not empty.</p>"},{"location":"reference/data/#acoupi.data.Tag.validate_value","title":"<code>validate_value(value)</code>","text":"<p>Validate that the value is not empty.</p>"},{"location":"reference/data/#acoupi.data.TimeInterval","title":"<code>TimeInterval</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An interval of time between two times of day.</p>"},{"location":"reference/data/#acoupi.data.TimeInterval-attributes","title":"Attributes","text":""},{"location":"reference/data/#acoupi.data.TimeInterval.end","title":"<code>end: datetime.time</code>  <code>instance-attribute</code>","text":"<p>End time of the interval.</p>"},{"location":"reference/data/#acoupi.data.TimeInterval.start","title":"<code>start: datetime.time</code>  <code>instance-attribute</code>","text":"<p>Start time of the interval.</p>"},{"location":"reference/programs/","title":"Programs","text":""},{"location":"reference/programs/#programs","title":"Programs","text":""},{"location":"reference/programs/#acoupi.programs.core.workers","title":"<code>acoupi.programs.core.workers</code>","text":"<p>Acoupi Workers Module.</p> <p>This module provides the functionality for managing and configuring AcoupiWorkers, which are essential components of the Acoupi framework for building smart acoustic sensors. AcoupiWorkers are responsible for executing tasks related to acoustic sensing and analysis. Each Acoupi program relies on a set of AcoupiWorkers, each with a unique name and configuration.</p> <p>The AcoupiWorker is implemented as a Celery worker, which listens to designated queues for task execution and coordination.</p>"},{"location":"reference/programs/#acoupi.programs.core.workers-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.core.workers.DEFAULT_WORKER_CONFIG","title":"<code>DEFAULT_WORKER_CONFIG = WorkerConfig(workers=[AcoupiWorker(name='recording', queues=['recording'], concurrency=1), AcoupiWorker(name='default', queues=['celery'])])</code>  <code>module-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.workers-classes","title":"Classes","text":""},{"location":"reference/programs/#acoupi.programs.core.workers.AcoupiWorker","title":"<code>AcoupiWorker</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>AcoupiWorker Class.</p> <p>Represents an individual worker instance within the Acoupi framework. It is responsible for executing tasks related to acoustic sensing and analysis. Each worker is implemented as a Celery worker and listens to designated queues for task execution and coordination.</p>"},{"location":"reference/programs/#acoupi.programs.core.workers.AcoupiWorker-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.core.workers.AcoupiWorker.concurrency","title":"<code>concurrency: Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of concurrent tasks the worker should run.</p> <p>If None, the worker will run as many tasks as possible.</p> <p>This setting should be set to 1 if the worker if at most one task can be run at a time. This is useful for tasks that are not thread safe or that require use of a resource that can only be used by one task at a time.</p>"},{"location":"reference/programs/#acoupi.programs.core.workers.AcoupiWorker.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Name of the worker. Should be unique among different workers.</p>"},{"location":"reference/programs/#acoupi.programs.core.workers.AcoupiWorker.queues","title":"<code>queues: List[str] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Queues the worker should listen to. </p> <p>If empty, the worker will listen to all queues.</p>"},{"location":"reference/programs/#acoupi.programs.core.workers.WorkerConfig","title":"<code>WorkerConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>WorkerConfig Class.</p> <p>A configuration class used to define the set of workers to be used for an Acoupi program. It allows you to specify the details of each worker, such as its name, concurrency level, and the queues it listens to.</p>"},{"location":"reference/programs/#acoupi.programs.core.workers.WorkerConfig-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.core.workers.WorkerConfig.workers","title":"<code>workers: List[AcoupiWorker] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.workers.WorkerConfig-functions","title":"Functions","text":""},{"location":"reference/programs/#acoupi.programs.core.workers.WorkerConfig.unique_worker_names","title":"<code>unique_worker_names(workers)</code>","text":"<p>Validate that all workers have unique names.</p>"},{"location":"reference/programs/#acoupi.programs.core.base","title":"<code>acoupi.programs.core.base</code>","text":"<p>Definition of what a program is.</p>"},{"location":"reference/programs/#acoupi.programs.core.base-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.core.base.B","title":"<code>B = TypeVar('B')</code>  <code>module-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base.C","title":"<code>C = TypeVar('C', bound=BaseModel, covariant=False, contravariant=True)</code>  <code>module-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base.ProgramConfig","title":"<code>ProgramConfig = TypeVar('ProgramConfig', bound=BaseModel)</code>  <code>module-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base-classes","title":"Classes","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram","title":"<code>AcoupiProgram(program_config, app)</code>","text":"<p>               Bases: <code>ABC</code>, <code>Generic[ProgramConfig]</code></p> <p>A program is a collection of tasks.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.app","title":"<code>app: Celery = app</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.config","title":"<code>config: ProgramConfig = program_config</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.config_schema","title":"<code>config_schema: Type[ProgramConfig]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.logger","title":"<code>logger: logging.Logger = get_task_logger(self.__class__.__name__)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.tasks","title":"<code>tasks = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.worker_config","title":"<code>worker_config: Optional[WorkerConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram-functions","title":"Functions","text":""},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.add_task","title":"<code>add_task(function, callbacks=None, schedule=None, queue=None, name=None)</code>","text":"<p>Add a task to the program.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.add_task_to_queue","title":"<code>add_task_to_queue(task_name, queue)</code>","text":"<p>Add a task to a queue.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.check","title":"<code>check(config)</code>","text":"<p>Check the configurations.</p> <p>This method should raise an exception if the configurations are invalid. The exception should be an instance of HealthCheckError.</p> <p>User defined programs should override this method if they want to validate their configurations. The default implementation does nothing.</p> <p>Ideally this method should be called before a deployment is made.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.get_config_schema","title":"<code>get_config_schema()</code>  <code>classmethod</code>","text":"<p>Get the config class.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.get_queue_names","title":"<code>get_queue_names()</code>  <code>classmethod</code>","text":"<p>Get the queue names.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.get_worker_config","title":"<code>get_worker_config()</code>  <code>classmethod</code>","text":"<p>Get the worker config class.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.on_end","title":"<code>on_end(deployment)</code>","text":"<p>End a deployment.</p> <p>Called when the user ends a deployment.</p> <p>This method should be overridden by user defined programs if they want to do something when the program ends. The default implementation does nothing.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.on_start","title":"<code>on_start(deployment)</code>","text":"<p>Start a deployment.</p> <p>Called when the user starts a deployment.</p> <p>This method should be overridden by user defined programs if they want to do something when the program starts. The default implementation does nothing.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.AcoupiProgram.setup","title":"<code>setup(config)</code>","text":"<p>Set up the program.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.InvalidAcoupiConfiguration","title":"<code>InvalidAcoupiConfiguration</code>","text":"<p>               Bases: <code>ValueError</code></p> <p>Raised when a configuration is invalid.</p>"},{"location":"reference/programs/#acoupi.programs.core.base.NoUserPrompt","title":"<code>NoUserPrompt</code>","text":"<p>No user prompt annotation.</p> <p>Use this class to annotate fields that should not be prompted to the user.</p>"},{"location":"reference/programs/#acoupi.programs","title":"<code>acoupi.programs</code>","text":""},{"location":"reference/programs/#acoupi.programs-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.DEFAULT_WORKER_CONFIG","title":"<code>DEFAULT_WORKER_CONFIG = WorkerConfig(workers=[AcoupiWorker(name='recording', queues=['recording'], concurrency=1), AcoupiWorker(name='default', queues=['celery'])])</code>  <code>module-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.ProgramConfig","title":"<code>ProgramConfig = TypeVar('ProgramConfig', bound=BaseModel)</code>  <code>module-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs-classes","title":"Classes","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram","title":"<code>AcoupiProgram(program_config, app)</code>","text":"<p>               Bases: <code>ABC</code>, <code>Generic[ProgramConfig]</code></p> <p>A program is a collection of tasks.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.app","title":"<code>app: Celery = app</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.config","title":"<code>config: ProgramConfig = program_config</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.config_schema","title":"<code>config_schema: Type[ProgramConfig]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.logger","title":"<code>logger: logging.Logger = get_task_logger(self.__class__.__name__)</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.tasks","title":"<code>tasks = {}</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.worker_config","title":"<code>worker_config: Optional[WorkerConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram-functions","title":"Functions","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.add_task","title":"<code>add_task(function, callbacks=None, schedule=None, queue=None, name=None)</code>","text":"<p>Add a task to the program.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.add_task_to_queue","title":"<code>add_task_to_queue(task_name, queue)</code>","text":"<p>Add a task to a queue.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.check","title":"<code>check(config)</code>","text":"<p>Check the configurations.</p> <p>This method should raise an exception if the configurations are invalid. The exception should be an instance of HealthCheckError.</p> <p>User defined programs should override this method if they want to validate their configurations. The default implementation does nothing.</p> <p>Ideally this method should be called before a deployment is made.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.get_config_schema","title":"<code>get_config_schema()</code>  <code>classmethod</code>","text":"<p>Get the config class.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.get_queue_names","title":"<code>get_queue_names()</code>  <code>classmethod</code>","text":"<p>Get the queue names.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.get_worker_config","title":"<code>get_worker_config()</code>  <code>classmethod</code>","text":"<p>Get the worker config class.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.on_end","title":"<code>on_end(deployment)</code>","text":"<p>End a deployment.</p> <p>Called when the user ends a deployment.</p> <p>This method should be overridden by user defined programs if they want to do something when the program ends. The default implementation does nothing.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.on_start","title":"<code>on_start(deployment)</code>","text":"<p>Start a deployment.</p> <p>Called when the user starts a deployment.</p> <p>This method should be overridden by user defined programs if they want to do something when the program starts. The default implementation does nothing.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiProgram.setup","title":"<code>setup(config)</code>","text":"<p>Set up the program.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiWorker","title":"<code>AcoupiWorker</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>AcoupiWorker Class.</p> <p>Represents an individual worker instance within the Acoupi framework. It is responsible for executing tasks related to acoustic sensing and analysis. Each worker is implemented as a Celery worker and listens to designated queues for task execution and coordination.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiWorker-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.AcoupiWorker.concurrency","title":"<code>concurrency: Optional[int] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of concurrent tasks the worker should run.</p> <p>If None, the worker will run as many tasks as possible.</p> <p>This setting should be set to 1 if the worker if at most one task can be run at a time. This is useful for tasks that are not thread safe or that require use of a resource that can only be used by one task at a time.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiWorker.name","title":"<code>name: str</code>  <code>instance-attribute</code>","text":"<p>Name of the worker. Should be unique among different workers.</p>"},{"location":"reference/programs/#acoupi.programs.AcoupiWorker.queues","title":"<code>queues: List[str] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Queues the worker should listen to. </p> <p>If empty, the worker will listen to all queues.</p>"},{"location":"reference/programs/#acoupi.programs.NoUserPrompt","title":"<code>NoUserPrompt</code>","text":"<p>No user prompt annotation.</p> <p>Use this class to annotate fields that should not be prompted to the user.</p>"},{"location":"reference/programs/#acoupi.programs.WorkerConfig","title":"<code>WorkerConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>WorkerConfig Class.</p> <p>A configuration class used to define the set of workers to be used for an Acoupi program. It allows you to specify the details of each worker, such as its name, concurrency level, and the queues it listens to.</p>"},{"location":"reference/programs/#acoupi.programs.WorkerConfig-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.WorkerConfig.workers","title":"<code>workers: List[AcoupiWorker] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.WorkerConfig-functions","title":"Functions","text":""},{"location":"reference/programs/#acoupi.programs.WorkerConfig.unique_worker_names","title":"<code>unique_worker_names(workers)</code>","text":"<p>Validate that all workers have unique names.</p>"},{"location":"reference/programs/#acoupi.programs.templates","title":"<code>acoupi.programs.templates</code>","text":"<p>Acoupi program templates.</p> <p>This module provides base classes and configuration schemas to simplify the creation of Acoupi programs.</p> <p>Available Templates:</p> <ul> <li>Basic Program: Provides a foundation for building Acoupi programs,   including features for audio recording, metadata storage, and file management.</li> <li>Base class: <code>BasicProgram</code></li> <li>Configuration schema: <code>BasicProgramConfiguration</code></li> <li>Messaging Program: Extends the <code>BasicProgram</code> with messaging   capabilities, enabling programs to send messages and heartbeats via HTTP or   MQTT.</li> <li>Base class: <code>MessagingProgram</code></li> <li>Configuration schema: <code>MessagingProgramConfiguration</code></li> <li>Detection Program:  Extends the <code>MessagingProgram</code> with audio detection   capabilities, allowing programs to run detection models on recordings and   generate messages based on the results.</li> <li>Base class: <code>DetectionProgram</code></li> <li>Configuration schema: <code>DetectionProgramConfiguration</code></li> </ul> <p>Each template includes a base class that provides core functionality and a configuration schema to define the program's settings.</p> <p>For detailed usage instructions, customization options, and examples, refer to the individual template documentation.</p>"},{"location":"reference/programs/#acoupi.programs.templates-classes","title":"Classes","text":""},{"location":"reference/programs/#acoupi.programs.templates.AudioConfiguration","title":"<code>AudioConfiguration</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Audio configuration schema.</p>"},{"location":"reference/programs/#acoupi.programs.templates.AudioConfiguration-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.AudioConfiguration.chunksize","title":"<code>chunksize: Annotated[int, NoUserPrompt] = 8192</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Chunksize of audio recording.</p>"},{"location":"reference/programs/#acoupi.programs.templates.AudioConfiguration.duration","title":"<code>duration: int = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Duration of each audio recording in seconds.</p>"},{"location":"reference/programs/#acoupi.programs.templates.AudioConfiguration.interval","title":"<code>interval: int = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interval between each audio recording in seconds.</p>"},{"location":"reference/programs/#acoupi.programs.templates.AudioConfiguration.schedule_end","title":"<code>schedule_end: datetime.time = Field(default=datetime.time(hour=22, minute=30, second=0))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>End time for recording schedule.</p>"},{"location":"reference/programs/#acoupi.programs.templates.AudioConfiguration.schedule_start","title":"<code>schedule_start: datetime.time = Field(default=datetime.time(hour=6, minute=0, second=0))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Start time for recording schedule.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram","title":"<code>BasicProgram(program_config, app)</code>","text":"<p>               Bases: <code>AcoupiProgram[ProgramConfig]</code></p> <p>Basic Acoupi Program.</p> <p>This class provides a base for creating basic Acoupi programs. It offers essential features for audio recording, metadata storage, and file management.</p> <p>Components:</p> <ul> <li>Audio Recorder: Records audio clips according to the program's   configuration.</li> <li>Store: Provides an interface for storing and retrieving metadata   associated with the program and its recordings.</li> </ul> <p>Tasks:</p> <p>Using the components above, this class creates and manages the following tasks:</p> <ul> <li>Audio Recording: Records audio at regular intervals, configurable   through the <code>audio</code> settings in the <code>BasicProgramConfiguration</code> schema.</li> <li>File Management: Periodically performs file management operations,   such as moving recordings from temporary to permanent storage.</li> </ul> <p>Customization:</p> <p>customise the program's behavior by overriding these methods:</p> <ul> <li><code>get_recording_conditions</code>: Define the specific conditions that must be     met for audio recording to continue when the recording task is     triggered by the scheduler.</li> <li><code>get_recording_filters</code>:  Add filters to determine which recordings to   save.</li> <li><code>get_recording_callbacks</code>: Define actions to perform after a recording   is made.</li> </ul> <p>Examples:</p> <pre><code>import datetime\nfrom acoupi import components, data\nfrom acoupi.programs.templates import (\n    BasicProgram,\n    BasicProgramConfiguration,\n)\n\n\nclass Config(BasicProgramConfiguration):\n    pass\n\n\nclass Program(BasicProgram):\n    configuration_schema = Config\n\n    def get_recording_conditions(self, config: Config):\n        # Get the default recording conditions\n        conditions = super().get_recording_conditions(\n            config\n        )\n        return [\n            components.IsInInterval(\n                data.TimeInterval(\n                    start=datetime.time(hour=3),\n                    end=datetime.time(hour=6),\n                )\n            ),\n            *conditions,\n        ]\n</code></pre>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.recorder","title":"<code>recorder: types.AudioRecorder</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.store","title":"<code>store: types.Store</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.worker_config","title":"<code>worker_config = DEFAULT_WORKER_CONFIG</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram-functions","title":"Functions","text":""},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.check","title":"<code>check(config)</code>","text":"<p>Check the program's components.</p> <p>This method performs checks on the program's components to ensure they are functioning correctly. Currently, it only checks the PyAudio recorder if it is being used.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.configure_recorder","title":"<code>configure_recorder(config)</code>","text":"<p>Configure the audio recorder.</p> <p>This method creates and configures an instance of the <code>PyAudioRecorder</code> based on the provided configuration.</p> <p>Returns:</p> Type Description <code>AudioRecorder</code> <p>The configured audio recorder instance.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.configure_store","title":"<code>configure_store(config)</code>","text":"<p>Configure the metadata store.</p> <p>This method creates and configures an instance of the <code>SqliteStore</code> based on the provided configuration.</p> <p>Returns:</p> Type Description <code>Store</code> <p>The configured metadata store instance.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.create_file_management_task","title":"<code>create_file_management_task(config)</code>","text":"<p>Create the file management task.</p> <p>This method creates the task responsible for managing audio files.</p> <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>The file management task.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.create_recording_task","title":"<code>create_recording_task(config)</code>","text":"<p>Create the recording task.</p> <p>This method creates the task responsible for recording audio.</p> <p>Returns:</p> Type Description <code>Callable[[], Optional[Recording]]</code> <p>The recording task.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.get_file_managers","title":"<code>get_file_managers(config)</code>","text":"<p>Get the file managers.</p> <p>This method defines how audio recordings should be saved and managed. It returns a list of file managers that are responsible for determining the final storage location of each recording.</p> <p>When a recording is marked for saving, the program iterates through the list of file managers in order. Each manager can either:</p> <ul> <li>Return a path where the recording should be saved.</li> <li>Return <code>None</code> to indicate that it cannot handle the recording, allowing the next manager in the list to be used.</li> </ul> <p>By default, this method returns a list containing a single <code>DateFileManager</code>, which saves recordings in a structured folder hierarchy based on the recording date.</p> <p>Returns:</p> Type Description <code>list[RecordingSavingManager]</code> <p>A list of file manager instances.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.get_recording_callbacks","title":"<code>get_recording_callbacks(config)</code>","text":"<p>Get the recording callbacks.</p> <p>This method defines callbacks to be executed after a recording is completed. By default, it returns an empty list.</p> <p>Returns:</p> Type Description <code>list[Callable[[Optional[Recording]], None]]</code> <p>A list of recording callbacks.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.get_recording_conditions","title":"<code>get_recording_conditions(config)</code>","text":"<p>Get the recording conditions.</p> <p>This method defines the conditions under which audio recording should be performed. By default, it uses the schedule defined in the configuration.</p> <p>Returns:</p> Type Description <code>RecordingCondition</code> <p>A recording condition.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.get_recording_filters","title":"<code>get_recording_filters(config)</code>","text":"<p>Get the recording saving filters.</p> <p>This method defines filters that determine which recordings should be saved permanently. By default, it returns an empty list, meaning all recordings are saved.</p> <p>Returns:</p> Type Description <code>list[RecordingSavingFilter]</code> <p>A list of recording saving filters.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.get_required_models","title":"<code>get_required_models(config)</code>","text":"<p>Get the required models for a recording to be considered ready.</p> <p>This method specifies which bioacoustic models must process a recording before it is considered \"ready\" to be moved from temporary storage.</p> <p>By default, no models are required, meaning recordings are immediately considered ready. However, you can override this method to define specific models that must process the recordings based on the program's configuration.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>A list of model names that are required to process a recording before it is considered ready.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.on_end","title":"<code>on_end(deployment)</code>","text":"<p>Handle program end event.</p> <p>This method is called when the program ends. It updates the deployment information in the metadata store, and ensure that remaining tasks are completed before the program is stopped.</p> <p>Tasks to check are: - file_management_task (if implemented). Check if there are remaining files in the temporary directory and move them to the correct directory.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.on_start","title":"<code>on_start(deployment)</code>","text":"<p>Handle program start event.</p> <p>This method is called when the program starts and stores the deployment information in the metadata store.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.register_file_management_task","title":"<code>register_file_management_task(config)</code>","text":"<p>Register the file management task.</p> <p>This method registers the file management task with the program's scheduler.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.register_recording_task","title":"<code>register_recording_task(config)</code>","text":"<p>Register the recording task.</p> <p>This method registers the recording task with the program's scheduler.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.setup","title":"<code>setup(config)</code>","text":"<p>Set up the basic program.</p> <p>This method initialises the program's components (audio recorder, store, and file manager), registers the recording and file management tasks, and performs necessary setup operations.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgram.validate_dirs","title":"<code>validate_dirs(config)</code>","text":"<p>Validate the directories used by the program.</p> <p>This method ensures that the necessary directories for storing audio and metadata exist. If they don't, it creates them.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgramConfiguration","title":"<code>BasicProgramConfiguration</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration schema for a basic program.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgramConfiguration-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.BasicProgramConfiguration.microphone","title":"<code>microphone: MicrophoneConfig</code>  <code>instance-attribute</code>","text":"<p>Microphone configuration.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgramConfiguration.paths","title":"<code>paths: PathsConfiguration = Field(default_factory=PathsConfiguration)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Data configuration.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgramConfiguration.recording","title":"<code>recording: AudioConfiguration = Field(default_factory=AudioConfiguration)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Audio configuration.</p>"},{"location":"reference/programs/#acoupi.programs.templates.BasicProgramConfiguration.timezone","title":"<code>timezone: TimeZoneName = Field(default=TimeZoneName('Europe/London'))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time zone where the device will be deployed.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram","title":"<code>DetectionProgram(program_config, app)</code>","text":"<p>               Bases: <code>MessagingProgram[C]</code>, <code>ABC</code></p> <p>Detection Program.</p> <p>This abstract class extends the <code>MessagingProgram</code> to provide a foundation for detection programs. It includes functionality for configuring and running a detection model, processing model outputs, and generating messages based on detection results.</p> <p>Components:</p> <ul> <li>Detection Model: An audio detection model that processes recordings   to identify specific sounds or events.</li> </ul> <p>Tasks:</p> <ul> <li>Detection Task: Runs the detection model on audio recordings and   processes the results, including:<ul> <li>Cleaning the model output using <code>get_output_cleaners</code>. By default this includes a threshold cleaner that filters out detections below a specified threshold.</li> <li>Filtering the processed output using <code>get_processing_filters</code>.</li> <li>Generating messages based on the results using   <code>get_message_factories</code>.</li> </ul> </li> </ul> <p>Inherited Components:</p> <p>This class inherits the following components from <code>MessagingProgram</code>:</p> <ul> <li>Messenger: A component responsible for sending messages and   heartbeats via a configured communication protocol (HTTP or MQTT).</li> <li>Message Store: A database for storing messages before they are sent.</li> </ul> <p>This class also inherits the following components from <code>BasicProgram</code>:</p> <ul> <li>Audio Recorder: Records audio clips according to the program's   configuration.</li> <li>File Manager: Manages the storage of audio recordings, including   saving them to permanent storage and handling temporary files.</li> <li>Store: Provides an interface for storing and retrieving metadata   associated with the program and its recordings.</li> </ul> <p>Inherited Tasks:</p> <p>This program inherits the following tasks from <code>MessagingProgram</code>:</p> <ul> <li>Heartbeat Task: Periodically sends heartbeat messages to indicate   that the program is running.</li> <li>Send Messages Task: Periodically sends messages from the message   store to the configured messenger.</li> </ul> <p>This program also inherits the following tasks from <code>BasicProgram</code>:</p> <ul> <li>Audio Recording:  Records audio at regular intervals, configurable   through the <code>audio</code> settings in the <code>BasicProgramConfiguration</code> schema.</li> <li>File Management:  Periodically performs file management operations,   such as moving recordings from temporary to permanent storage.</li> </ul> <p>Customization:</p> <p>You can customise the detection process by overriding the following methods:</p> <ul> <li><code>configure_model</code>:  Required. Implement this method to configure   and return an instance of your detection model.</li> <li><code>get_output_cleaners</code>:  To clean up the model's raw output. Either   override this method completely or call <code>super().get_output_cleaners()</code>   to include the default threshold cleaner.</li> <li><code>get_processing_filters</code>:  To filter recordings before processing.</li> <li><code>get_message_factories</code>:  To customise the messages generated based on   detection results.</li> </ul> <p>Examples:</p> <pre><code>from acoupi.programs.templates import (\n    DetectionProgram,\n    DetectionProgramConfiguration,\n)\nfrom acoupi.components import types\n\n# This import should be replaced with your actual model import\n# This model does not exist in the acoupi package\nfrom acoupi.models import SimpleBirdModel\n\n\nclass MyBirdDetectionConfiguration(\n    DetectionProgramConfiguration\n):\n    # Add any configuration specific to bird detection\n    pass\n\n\nclass MyBirdDetectionProgram(\n    DetectionProgram[MyBirdDetectionConfiguration]\n):\n    configuration_schema = MyBirdDetectionConfiguration\n\n    def configure_model(\n        self, config: MyBirdDetectionConfiguration\n    ) -&gt; types.Model:\n        return (\n            SimpleBirdModel()\n        )  # Replace with your actual model\n</code></pre>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.model","title":"<code>model: types.Model</code>  <code>instance-attribute</code>","text":"<p>The configured detection model instance.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram-functions","title":"Functions","text":""},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.check","title":"<code>check(config)</code>","text":"<p>Check the program's components.</p> <p>This method performs checks on the program's components, including the detection model, to ensure they are functioning correctly.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>C</code> <p>The program's configuration.</p> required"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.configure_model","title":"<code>configure_model(config)</code>  <code>abstractmethod</code>","text":"<p>Configure the detection model.</p> <p>This method must be implemented by subclasses to configure and return an instance of the detection model.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>C</code> <p>The program's configuration.</p> required <p>Returns:</p> Type Description <code>Model</code> <p>The configured detection model instance.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.create_detection_task","title":"<code>create_detection_task(config)</code>","text":"<p>Create the detection task.</p> <p>This method creates the task responsible for running the detection model and processing its output.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>C</code> <p>The program's configuration.</p> required <p>Returns:</p> Type Description <code>Callable[[Recording], None]</code> <p>The detection task.</p> Notes <p>This method uses the <code>generate_detection_task</code> function to create the detection task. You can override this method to customise the task creation process.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.get_message_factories","title":"<code>get_message_factories(config)</code>","text":"<p>Get the message factories.</p> <p>This method can be overridden to define a list of message factories that will be used to generate messages based on the processed detection results.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>C</code> <p>The program's configuration.</p> required <p>Returns:</p> Type Description <code>List[MessageBuilder]</code> <p>A list of message factories.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.get_output_cleaners","title":"<code>get_output_cleaners(config)</code>","text":"<p>Get the model output cleaners.</p> <p>This method can be overridden to define a list of output cleaners that will be applied to the model's raw output to clean it up or extract relevant information. By default, it includes a threshold cleaner that filters out detections below a specified threshold.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>C</code> <p>The program's configuration.</p> required <p>Returns:</p> Type Description <code>List[ModelOutputCleaner]</code> <p>A list of model output cleaners.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.get_processing_filters","title":"<code>get_processing_filters(config)</code>","text":"<p>Get the processing filters.</p> <p>This method can be overridden to define a list of processing filters that will be applied to each recording before it is processed by the model. These filters determine whether a recording should be processed at all.</p> <p>This can be useful to avoid unnecessary model processing when it is not required by the context or based on simple heuristics on the recording content. Model processing can be computationally expensive, so it is beneficial to avoid it if possible.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>C</code> <p>The program's configuration.</p> required <p>Returns:</p> Type Description <code>List[ProcessingFilter]</code> <p>A list of processing filters.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.get_recording_callbacks","title":"<code>get_recording_callbacks(config)</code>","text":"<p>Get the recording callbacks.</p> <p>This method adds the detection task as a callback to be executed after each recording is completed.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>C</code> <p>The program's configuration.</p> required <p>Returns:</p> Type Description <code>List[Callable]</code> <p>A list of recording callbacks, including the detection task.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.get_required_models","title":"<code>get_required_models(config)</code>","text":""},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.on_end","title":"<code>on_end(deployment)</code>","text":"<p>Handle program end event.</p> <p>This method is called when the program ends. It updates the deployment information in the metadata store, and ensure that remaining tasks are completed before the program is stopped.</p> <p>Tasks to check are: - file_management_task (if implemented). Check if there are remaining files in the temporary directory and move them to the correct directory. - detection_task (if implemented). Check if there are remaining files to be processed and process them.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgram.setup","title":"<code>setup(config)</code>","text":"<p>Set up the Detection Program.</p> <p>This method initialises the detection model and performs any necessary setup.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgramConfiguration","title":"<code>DetectionProgramConfiguration</code>","text":"<p>               Bases: <code>MessagingProgramConfiguration</code></p> <p>Detection Program Configuration schema.</p> <p>This schema extends the <code>MessagingProgramConfiguration</code> to include any additional settings required for detection programs.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgramConfiguration-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.DetectionProgramConfiguration.detections","title":"<code>detections: DetectionsConfiguration = Field(default_factory=DetectionsConfiguration)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Detection settings.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionsConfiguration","title":"<code>DetectionsConfiguration</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Detection settings schema.</p>"},{"location":"reference/programs/#acoupi.programs.templates.DetectionsConfiguration-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.DetectionsConfiguration.threshold","title":"<code>threshold: float = 0.2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Detections with a score below this threshold will be ignored.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingConfig","title":"<code>MessagingConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Messaging configuration schema.</p> <p>This schema defines the configuration for messaging components, including the message store, message sending interval, heartbeat interval, and messenger configurations (HTTP or MQTT).</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingConfig-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.MessagingConfig.heartbeat_interval","title":"<code>heartbeat_interval: int = 60 * 60</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interval between sending heartbeats in seconds.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingConfig.http","title":"<code>http: Optional[messengers.HTTPConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>HTTP messenger configuration.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingConfig.message_send_interval","title":"<code>message_send_interval: int = 120</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interval between sending messages in seconds.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingConfig.messages_db","title":"<code>messages_db: Path = Field(default=Path.home() / 'storages' / 'messages.db')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Path to the message database.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingConfig.mqtt","title":"<code>mqtt: Optional[messengers.MQTTConfig] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>MQTT messenger configuration.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram","title":"<code>MessagingProgram(program_config, app)</code>","text":"<p>               Bases: <code>BasicProgram[ProgramConfig]</code></p> <p>Messaging Acoupi Program.</p> <p>This class extends the <code>BasicProgram</code> to provide functionality for sending messages and heartbeats with a configured messenger (HTTP or MQTT).</p> <p>Components:</p> <ul> <li>Messenger: A component responsible for sending messages and   heartbeats via a configured communication protocol (HTTP or MQTT).</li> <li>Message Store: A database for storing messages before they are sent.</li> </ul> <p>Tasks:</p> <p>Using the components above, this class creates and manages the following tasks:</p> <ul> <li>Heartbeat Task: Periodically sends heartbeat messages to indicate   that the program is running.</li> <li>Send Messages Task: Periodically sends messages from the message   store to the configured messenger.</li> </ul> <p>This program includes all the functionality of <code>BasicProgram</code>, inheriting its components and tasks for audio recording, metadata storage, and file management.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.message_store","title":"<code>message_store: types.MessageStore</code>  <code>instance-attribute</code>","text":"<p>The configured message store instance.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.messenger","title":"<code>messenger: Optional[types.Messenger]</code>  <code>instance-attribute</code>","text":"<p>The configured messenger instance.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram-functions","title":"Functions","text":""},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.check","title":"<code>check(config)</code>","text":"<p>Check the messenger connection.</p> <p>This method checks the connection to the configured messenger (HTTP or MQTT).</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.configure_message_store","title":"<code>configure_message_store(config)</code>","text":"<p>Configure the message store.</p> <p>This method creates and configures an instance of the <code>SqliteMessageStore</code> based on the provided configuration.</p> <p>Returns:</p> Type Description <code>MessageStore</code> <p>The configured message store instance.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.configure_messenger","title":"<code>configure_messenger(config)</code>","text":"<p>Configure the messenger.</p> <p>This method creates and configures an instance of the <code>HTTPMessenger</code> or <code>MQTTMessenger</code> based on the provided configuration.</p> <p>Returns:</p> Type Description <code>Messenger</code> <p>The configured messenger instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no messenger configuration is provided.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.create_heartbeat_task","title":"<code>create_heartbeat_task(config)</code>","text":"<p>Create the heartbeat task.</p> <p>This method creates the task responsible for sending heartbeats.</p> <p>Returns:</p> Type Description <code>Callable</code> <p>The heartbeat task.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.create_messaging_task","title":"<code>create_messaging_task(config)</code>","text":"<p>Create the messaging task.</p> <p>This method creates the task responsible for sending messages.</p> <p>Returns:</p> Type Description <code>Callable</code> <p>The messaging task.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.on_end","title":"<code>on_end(deployment)</code>","text":"<p>End a deployment.</p> <p>This method is called when the program is stopped. It updates the deployment information in the metadata store, and ensure and performs any necessary cleanup tasks (i.e., file_management_task, messaging_task).</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.register_heartbeat_task","title":"<code>register_heartbeat_task(config)</code>","text":"<p>Register the heartbeat task.</p> <p>This method registers the heartbeat task with the program's scheduler.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.register_messaging_task","title":"<code>register_messaging_task(config)</code>","text":"<p>Register the messaging task.</p> <p>This method registers the messaging task with the program's scheduler.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.setup","title":"<code>setup(config)</code>","text":"<p>Set up the Messaging Program.</p> <p>This method initialises the message store and messenger, registers the messaging and heartbeat tasks, and performs any necessary setup.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgram.validate_dirs","title":"<code>validate_dirs(config)</code>","text":"<p>Validate the directories used by the program.</p> <p>This method ensures that the necessary directories for storing audio and metadata exist. If they don't, it creates them.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgramConfiguration","title":"<code>MessagingProgramConfiguration</code>","text":"<p>               Bases: <code>BasicProgramConfiguration</code></p> <p>Messaging Program Configuration schema.</p> <p>This schema extends the <code>BasicProgramConfiguration</code> to include settings for messaging functionality.</p>"},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgramConfiguration-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.MessagingProgramConfiguration.messaging","title":"<code>messaging: MessagingConfig</code>  <code>instance-attribute</code>","text":""},{"location":"reference/programs/#acoupi.programs.templates.PathsConfiguration","title":"<code>PathsConfiguration</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Data configuration schema.</p>"},{"location":"reference/programs/#acoupi.programs.templates.PathsConfiguration-attributes","title":"Attributes","text":""},{"location":"reference/programs/#acoupi.programs.templates.PathsConfiguration.db_metadata","title":"<code>db_metadata: Path = Field(default_factory=lambda: Path.home() / 'storages' / 'metadata.db')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Path to the metadata database.</p>"},{"location":"reference/programs/#acoupi.programs.templates.PathsConfiguration.recordings","title":"<code>recordings: Path = Field(default_factory=lambda: Path.home() / 'storages' / 'recordings')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Directory for storing audio files permanently.</p>"},{"location":"reference/programs/#acoupi.programs.templates.PathsConfiguration.tmp_audio","title":"<code>tmp_audio: Path = Field(default_factory=get_temp_dir)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Temporary directory for storing audio files.</p>"},{"location":"reference/system/","title":"System","text":""},{"location":"reference/system/#system","title":"System","text":""},{"location":"reference/system/#acoupi.system","title":"<code>acoupi.system</code>","text":"<p>Functions that manage Acoupi system.</p> <p>This module contains utility functions for acoupi programs such as loading programs and getting celery apps from programs.</p>"},{"location":"reference/system/#acoupi.system-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.AcoupiStatus","title":"<code>AcoupiStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model representing the status of the Acoupi system.</p> <p>Attributes:</p> Name Type Description <code>acoupi_service</code> <code>ServiceStatus</code> <p>The status of the acoupi systemd service.</p> <code>beat_service</code> <code>ServiceStatus</code> <p>The status of the beat systemd service.</p> <code>celery</code> <code>CeleryStatus</code> <p>The status of the Celery workers.</p> <code>program</code> <code>ProgramStatus</code> <p>The status of the acoupi program.</p>"},{"location":"reference/system/#acoupi.system.AcoupiStatus-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.AcoupiStatus.celery","title":"<code>celery: CeleryStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.AcoupiStatus.deployment","title":"<code>deployment: Optional[Deployment]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.AcoupiStatus.program","title":"<code>program: ProgramState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.AcoupiStatus.services","title":"<code>services: ServicesStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings","title":"<code>Settings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Settings for acoupi system.</p>"},{"location":"reference/system/#acoupi.system.Settings-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.Settings.acoupi_beat_service_file","title":"<code>acoupi_beat_service_file: str = 'acoupi-beat.service'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.acoupi_service_file","title":"<code>acoupi_service_file: str = 'acoupi.service'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.app_name","title":"<code>app_name: str = 'app'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.beat_script_path","title":"<code>beat_script_path: Path = home / 'bin' / 'acoupi-beat.sh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.celery_config_file","title":"<code>celery_config_file: Path = home / 'config' / 'celery.json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.celery_pool_type","title":"<code>celery_pool_type: Literal['threads', 'prefork', 'eventlet', 'gevent', 'solo', 'processes'] = 'threads'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.deployment_file","title":"<code>deployment_file: Path = home / 'config' / 'deployment.json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.env_file","title":"<code>env_file: Path = home / 'config' / 'env'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.home","title":"<code>home: Path = Path.home() / '.acoupi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.log_dir","title":"<code>log_dir: Path = home / 'log'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.log_level","title":"<code>log_level: str = 'INFO'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.model_config","title":"<code>model_config = SettingsConfigDict(env_prefix='ACOUPI_')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.program_config_file","title":"<code>program_config_file: Path = home / 'config' / 'program.json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.program_file","title":"<code>program_file: Path = home / app_name + '.py'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.program_name_file","title":"<code>program_name_file: Path = home / 'config' / 'name'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.restart_script_path","title":"<code>restart_script_path: Path = home / 'bin' / 'acoupi-workers-restart.sh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.run_dir","title":"<code>run_dir: Path = home / 'run'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.start_script_path","title":"<code>start_script_path: Path = home / 'bin' / 'acoupi-workers-start.sh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.Settings.stop_script_path","title":"<code>stop_script_path: Path = home / 'bin' / 'acoupi-workers-stop.sh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.delete_recording","title":"<code>delete_recording(recording)</code>","text":"<p>Delete the recording.</p>"},{"location":"reference/system/#acoupi.system.disable_services","title":"<code>disable_services(settings, path=None, **kwargs)</code>","text":"<p>Disable acoupi services.</p>"},{"location":"reference/system/#acoupi.system.dump_config","title":"<code>dump_config(config, indent=2)</code>","text":"<p>Dump a configuration object to a JSON string.</p>"},{"location":"reference/system/#acoupi.system.enable_services","title":"<code>enable_services(settings, path=None, **kwargs)</code>","text":"<p>Enable acoupi services.</p>"},{"location":"reference/system/#acoupi.system.end_deployment","title":"<code>end_deployment(settings)</code>","text":"<p>End current deployment.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings to use.</p> required <p>Returns:</p> Type Description <code>Deployment</code> <p>The ended deployment.</p> <p>Raises:</p> Type Description <code>DeploymentError</code> <p>If the deployment has already ended or has not been started yet.</p>"},{"location":"reference/system/#acoupi.system.get_celery_app","title":"<code>get_celery_app(settings)</code>","text":"<p>Get the currently setup celery app.</p>"},{"location":"reference/system/#acoupi.system.get_celery_status","title":"<code>get_celery_status(settings)</code>","text":""},{"location":"reference/system/#acoupi.system.get_config_field","title":"<code>get_config_field(config, field)</code>","text":"<p>Retrieve a field or nested field from a configuration object.</p> <p>This function allows you to access configuration values by specifying the field name, including nested fields using dot notation (e.g., 'section.subsection.value'). If no field is provided, the entire configuration object is returned.</p> <p>It is possible to get nested fields by using a dot notation.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>BaseModel</code> <p>The configuration object, an instance of a Pydantic model.</p> required <code>field</code> <code>str</code> <p>The name of the field to retrieve. Use dot notation for nested fields.</p> required <p>Returns:</p> Type Description <code>Any</code> <p>The value of the specified field. The type depends on the field's definition in the Pydantic model.</p> <p>Raises:</p> Type Description <code>AttributeError</code> <p>If the specified <code>field</code> does not exist within the configuration schema.</p> <code>IndexError</code> <p>If the <code>field</code> refers to an index in a list or tuple that is out of bounds.</p> <code>NotImplementedError</code> <p>If the <code>field</code> points to a data type or structure that this function does not currently support for retrieval.</p> <p>Examples:</p> <p>Accessing a root-level field:</p> <pre><code>&gt;&gt;&gt; class Config(BaseModel):\n...     a: int\n...     b: str\n&gt;&gt;&gt; config = Config(a=1, b=\"2\")\n&gt;&gt;&gt; get_config_field(config, \"a\")\n&gt;&gt;&gt; 1\n</code></pre> <p>Accessing a nested field:</p> <pre><code>&gt;&gt;&gt; class NestedConfig(BaseModel):\n...     d: bool\n&gt;&gt;&gt; class Config(BaseModel):\n...     a: int\n...     b: str\n...     c: NestedConfig\n&gt;&gt;&gt; config = Config(a=1, b=\"2\", c=NestedConfig(d=True))\n&gt;&gt;&gt; get_config_field(config, \"c.d\")\n&gt;&gt;&gt; True\n</code></pre> <p>Accessing an element from a list:</p> <pre><code>&gt;&gt;&gt; class Config(BaseModel):\n...     a: List[int]\n&gt;&gt;&gt; config = Config(a=[1, 2, 3])\n&gt;&gt;&gt; get_config_field(config, \"a.0\")\n&gt;&gt;&gt; 1\n</code></pre>"},{"location":"reference/system/#acoupi.system.get_current_deployment","title":"<code>get_current_deployment(settings)</code>","text":"<p>Get current deployment.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings to use.</p> required <p>Returns:</p> Type Description <code>Deployment</code> <p>The current deployment.</p> <p>Raises:</p> Type Description <code>DeploymentError</code> <p>If the deployment file does not exist or the deployment has already ended.</p>"},{"location":"reference/system/#acoupi.system.get_status","title":"<code>get_status(settings)</code>","text":"<p>Get the current status of the Acoupi system.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings object containing configuration paths.</p> required <p>Returns:</p> Type Description <code>AcoupiStatus</code> <p>An object containing the status of various components of the Acoupi system.</p>"},{"location":"reference/system/#acoupi.system.get_task_list","title":"<code>get_task_list(program, include_celery_tasks=False)</code>","text":"<p>Return a list of all the tasks registered in the current program.</p> <p>Parameters:</p> Name Type Description Default <code>program</code> <code>AcoupiProgram</code> <p>The AcoupiProgram instance to get the tasks from.</p> required <code>include_celery_tasks</code> <code>bool</code> <p>Whether to include celery tasks in the list. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of the names of available tasks.</p> Notes <p>Celery registers a number of tasks by default, which can be excluded from the list by setting <code>include_celery_tasks</code> to <code>False</code>.</p>"},{"location":"reference/system/#acoupi.system.get_temp_file_id","title":"<code>get_temp_file_id(path)</code>","text":"<p>Get the temporary recording UUID from the path.</p>"},{"location":"reference/system/#acoupi.system.get_temp_files","title":"<code>get_temp_files(path=TEMP_PATH)</code>","text":"<p>Get the list of temporary recordings.</p> <p>Temporary recordings are stored in memory to avoid unnecessary writes to the SD card.</p>"},{"location":"reference/system/#acoupi.system.is_configured","title":"<code>is_configured(settings)</code>","text":"<p>Check if acoupi is configured.</p>"},{"location":"reference/system/#acoupi.system.load_config","title":"<code>load_config(path, schema)</code>","text":"<p>Load config from file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>Path to the config file.</p> required <code>schema</code> <code>Type[S]</code> <p>Pydantic model to validate the config.</p> required <p>Returns:</p> Type Description <code>S</code> <p>The loaded config.</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If the configuration is invalid.</p> <code>FileNotFoundError</code> <p>If the config file does not exist.</p>"},{"location":"reference/system/#acoupi.system.load_config_schema","title":"<code>load_config_schema(settings)</code>","text":"<p>Load the configuration schema for the program.</p>"},{"location":"reference/system/#acoupi.system.load_program","title":"<code>load_program(settings)</code>","text":"<p>Load a fully configured acoupi program.</p> <p>This function loads the acoupi program class from the specified module, instantiates it, and configures it with the specified config files.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings object containing the paths to the program and celery config files.</p> required <p>Returns:</p> Type Description <code>AcoupiProgram</code> <p>A fully configured instance of the acoupi program class.</p> <p>Raises:</p> Type Description <code>ProgramNotFoundError</code> <p>If the program module is not found.</p> <code>InvalidProgramError</code> <p>If the loaded class is not a valid acoupi program class.</p>"},{"location":"reference/system/#acoupi.system.load_program_class","title":"<code>load_program_class(program_name)</code>","text":"<p>Load the acoupi program class from a specified module.</p> <p>This function searches the given module for a valid AcoupiProgram class. If multiple such classes exist within the module, it prioritizes classes that are not further subclassed.</p> <p>Parameters:</p> Name Type Description Default <code>program_name</code> <code>str</code> <p>The name of the module containing the acoupi program class.</p> required <p>Returns:</p> Type Description <code>Type[AcoupiProgram]</code> <p>The acoupi program class.</p> <p>Raises:</p> Type Description <code>ProgramNotFoundError</code> <p>If the specified program module is not found.</p> <code>InvalidProgramError</code> <p>If the loaded class is not a valid acoupi program class.</p> Notes <p>When multiple AcoupiProgram classes are found within the module, this function will attempt to select one that is not further subclassed. If multiple such \"final\" classes exist, a warning will be issued, and the first one encountered will be selected. It is recommended that when exposing AcoupiProgram classes in a module, only one \"final\" (non-subclassable) class be made available.</p>"},{"location":"reference/system/#acoupi.system.move_recording","title":"<code>move_recording(recording, dest, logger=None)</code>","text":"<p>Move the recording to the destination.</p>"},{"location":"reference/system/#acoupi.system.parse_config_from_args","title":"<code>parse_config_from_args(schema, args=None, prompt=True)</code>","text":"<p>Parse configurations from user provided arguments.</p> <p>This function will parse the configurations from the user provided in the command line arguments. It will return the parsed configuration.</p> <p>It will override the default configuration with the user provided configuration, and ask the user for any missing configuration.</p> <p>This function will raise an error if the user provided configuration is invalid.</p> <p>Args:     schema: The configuration schema to use.     args: The arguments to parse. If None, will use an empty list.     prompt: Whether to prompt the user for missing configuration.</p> <p>Returns:</p> Type Description <code>    config: The parsed configuration.</code>"},{"location":"reference/system/#acoupi.system.profile_task","title":"<code>profile_task(program, task_name)</code>","text":"<p>Profile a task from the current program.</p> <p>Parameters:</p> Name Type Description Default <code>program</code> <code>AcoupiProgram</code> <p>The AcoupiProgram instance to profile the task from.</p> required <code>task_name</code> <code>str</code> <p>The name of the task to profile.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the specified task is not found.</p> Notes <p>This function uses cProfile to profile the task. The output can be saved to a file by providing the <code>output</code> parameter. The task is run in the current Python process and does not send the task to the Celery workers, so the profiling will only show the performance of the task without the overhead of the Celery workers.</p>"},{"location":"reference/system/#acoupi.system.purge_queues","title":"<code>purge_queues(settings)</code>","text":"<p>Purge all messages from all queues.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings object containing configuration for Celery.</p> required <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the command execution.</p>"},{"location":"reference/system/#acoupi.system.restart_workers","title":"<code>restart_workers(settings, log_level=None)</code>","text":"<p>Restart the Celery workers.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The current acoupi settings.</p> required <code>log_level</code> <code>Optional[Literal]</code> <p>The log level for the workers, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the subprocess.run function.</p>"},{"location":"reference/system/#acoupi.system.run_celery_command","title":"<code>run_celery_command(settings, args, with_app=True, quiet=False, **kwargs)</code>","text":""},{"location":"reference/system/#acoupi.system.run_task","title":"<code>run_task(program, task_name, recording=None)</code>","text":"<p>Run a task from the current program.</p> <p>Parameters:</p> Name Type Description Default <code>program</code> <code>AcoupiProgram</code> <p>The AcoupiProgram instance to run the task from.</p> required <code>task_name</code> <code>str</code> <p>The name of the task to run.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the specified task is not found.</p> Notes <p>This function runs the task in the current Python process and does not send the task to the Celery workers. This can be helpful for testing a task without setting up Celery workers. To run the task through Celery workers, use the <code>acoupi celery call &lt;task_name&gt;</code> command.</p>"},{"location":"reference/system/#acoupi.system.services_are_installed","title":"<code>services_are_installed(settings, path=None)</code>","text":"<p>Check if acoupi services are installed.</p>"},{"location":"reference/system/#acoupi.system.set_config_field","title":"<code>set_config_field(config, field, value, is_json=False, strict=False, from_attributes=False)</code>","text":"<p>Set a specific field in a config object.</p> <p>This function enables you to update configuration values by specifying the field name, including nested fields using dot notation (e.g., 'section.subsection.value'). The provided <code>value</code> is validated against the field's type definition in the Pydantic model to ensure data integrity.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>S</code> <p>The configuration object to be modified. Must be an instance of a Pydantic model.</p> required <code>field</code> <code>str</code> <p>The name of the field to set. Use dot notation for nested fields. If an empty string, the entire configuration is replaced. This is useful when setting the configuration from a JSON string.</p> required <code>value</code> <code>Any</code> <p>The new value to assign to the specified field. The type should be compatible with the field's definition in the Pydantic model.</p> required <code>is_json</code> <code>bool</code> <p>If True, the <code>value</code> is treated as a JSON string and parsed before being assigned. Default is False.</p> <code>False</code> <code>strict</code> <code>bool</code> <p>If True, type coercion is disabled, and the <code>value</code> must match the field's type exactly. If False (default), type coercion is attempted if possible.</p> <code>False</code> <code>from_attributes</code> <code>bool</code> <p>Relevant only when setting a field that is itself a Pydantic model. If True, the <code>value</code> is assumed to be an object whose attributes will be used to populate the model. See Pydantic's <code>model_validate</code> documentation for details. Default is False.</p> <code>False</code> <p>Returns:</p> Type Description <code>S</code> <p>A new configuration object with the specified field modified. The original <code>config</code> object remains unchanged.</p> <p>Raises:</p> Type Description <code>ValidationError</code> <p>If the provided <code>value</code> fails validation against the field's type definition in the Pydantic model.</p> <code>AttributeError</code> <p>If the specified <code>field</code> does not exist within the configuration schema.</p> <code>IndexError</code> <p>If the <code>field</code> refers to an index in a list or tuple that is out of bounds.</p> <code>NotImplementedError</code> <p>If the <code>field</code> points to a data type or structure that this function does not currently support for setting.</p> <p>Examples:</p> <p>Setting a root-level field:</p> <pre><code>&gt;&gt;&gt; class Config(BaseModel):\n...     a: int\n...     b: str\n&gt;&gt;&gt; config = Config(a=1, b=\"2\")\n&gt;&gt;&gt; new_config = set_config_field(config, \"a\", 3)\n&gt;&gt;&gt; new_config.a\n&gt;&gt;&gt; 3\n</code></pre> <p>Setting a nested field:</p> <pre><code>&gt;&gt;&gt; class NestedConfig(BaseModel):\n...     d: bool\n&gt;&gt;&gt; class Config(BaseModel):\n...     a: int\n...     b: str\n...     c: NestedConfig\n&gt;&gt;&gt; config = Config(a=1, b=\"2\", c=NestedConfig(d=True))\n&gt;&gt;&gt; new_config = set_config_field(config, \"c.d\", False)\n&gt;&gt;&gt; new_config.c.d\n</code></pre> <p>Setting an element in a list:</p> <pre><code>&gt;&gt;&gt; class Config(BaseModel):\n...     a: List[int]\n&gt;&gt;&gt; config = Config(a=[1, 2, 3])\n&gt;&gt;&gt; new_config = set_config_field(config, \"a.0\", 4)\n&gt;&gt;&gt; new_config.a[0]\n&gt;&gt;&gt; 4\n</code></pre> <p>Setting a field from a JSON string:</p> <pre><code>&gt;&gt;&gt; class Config(BaseModel):\n...     a: int\n...     b: str\n&gt;&gt;&gt; config = Config(a=1, b=\"2\")\n&gt;&gt;&gt; new_config = set_config_field(\n...     config,\n...     \"\",\n...     '{\"a\": 3, \"b\": \"4\"}',\n...     is_json=True,\n... )\n&gt;&gt;&gt; new_config.a\n&gt;&gt;&gt; 3\n</code></pre>"},{"location":"reference/system/#acoupi.system.setup_program","title":"<code>setup_program(settings, program_name, args=None, prompt=False)</code>","text":"<p>Set up an Acoupi Program.</p>"},{"location":"reference/system/#acoupi.system.start_deployment","title":"<code>start_deployment(settings, name, latitude=None, longitude=None)</code>","text":"<p>Start a new deployment.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings to use.</p> required <code>name</code> <code>str</code> <p>The name of the deployment.</p> required <p>Returns:</p> Type Description <code>Deployment</code> <p>Raises:</p> Type Description <code>DeploymentError</code> <p>If Acoupi has already been deployed.</p> <code>ValueError</code> <p>If the deployment data is invalid. i.e. the latitude or longitude is invalid.</p>"},{"location":"reference/system/#acoupi.system.start_program","title":"<code>start_program(settings, name, latitude=None, longitude=None)</code>","text":""},{"location":"reference/system/#acoupi.system.start_services","title":"<code>start_services(settings, path=None, **kwargs)</code>","text":"<p>Start acoupi services.</p>"},{"location":"reference/system/#acoupi.system.start_workers","title":"<code>start_workers(settings, pool='threads', log_level=None)</code>","text":"<p>Start the Celery workers.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The current acoupi settings.</p> required <code>pool</code> <code>Literal</code> <p>The pool type for the workers, by default \"threads\".</p> <code>'threads'</code> <code>log_level</code> <code>Optional[Literal]</code> <p>The log level for the workers, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the subprocess.run function.</p>"},{"location":"reference/system/#acoupi.system.status_services","title":"<code>status_services(settings, path=None, **kwargs)</code>","text":"<p>Stop acoupi services.</p>"},{"location":"reference/system/#acoupi.system.stop_program","title":"<code>stop_program(settings)</code>","text":""},{"location":"reference/system/#acoupi.system.stop_services","title":"<code>stop_services(settings, path=None, **kwargs)</code>","text":"<p>Stop acoupi services.</p>"},{"location":"reference/system/#acoupi.system.stop_workers","title":"<code>stop_workers(settings, log_level=None)</code>","text":"<p>Stop the Celery workers.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The current acoupi settings.</p> required <code>log_level</code> <code>Optional[Literal]</code> <p>The log level for the workers, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the subprocess.run function.</p>"},{"location":"reference/system/#acoupi.system.write_config","title":"<code>write_config(config, path)</code>","text":"<p>Write config to file.</p>"},{"location":"reference/system/#acoupi.system.write_program_file","title":"<code>write_program_file(program_name, settings)</code>","text":"<p>Write the python script with the celery app to run.</p>"},{"location":"reference/system/#acoupi.system.apps","title":"<code>acoupi.system.apps</code>","text":"<p>System functions for managing celery apps.</p>"},{"location":"reference/system/#acoupi.system.apps-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.apps-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.apps.get_celery_app","title":"<code>get_celery_app(settings)</code>","text":"<p>Get the currently setup celery app.</p>"},{"location":"reference/system/#acoupi.system.celery","title":"<code>acoupi.system.celery</code>","text":""},{"location":"reference/system/#acoupi.system.celery-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.celery.CeleryState","title":"<code>CeleryState</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/system/#acoupi.system.celery.CeleryState-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.celery.CeleryState.AVAILABLE","title":"<code>AVAILABLE = 'available'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery.CeleryState.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery.CeleryState.UNAVAILABLE","title":"<code>UNAVAILABLE = 'unavailable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery.CeleryStatus","title":"<code>CeleryStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/system/#acoupi.system.celery.CeleryStatus-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.celery.CeleryStatus.state","title":"<code>state: CeleryState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery.CeleryStatus.workers","title":"<code>workers: List[WorkerStatus] = Field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery.WorkerState","title":"<code>WorkerState</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/system/#acoupi.system.celery.WorkerState-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.celery.WorkerState.NOTOK","title":"<code>NOTOK = 'notok'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery.WorkerState.OK","title":"<code>OK = 'ok'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery.WorkerStatus","title":"<code>WorkerStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/system/#acoupi.system.celery.WorkerStatus-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.celery.WorkerStatus.state","title":"<code>state: WorkerState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery.WorkerStatus.worker_name","title":"<code>worker_name: str</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.celery-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.celery.get_celery_bin","title":"<code>get_celery_bin()</code>","text":"<p>Return the path to the celery binary.</p>"},{"location":"reference/system/#acoupi.system.celery.get_celery_status","title":"<code>get_celery_status(settings)</code>","text":""},{"location":"reference/system/#acoupi.system.celery.purge_queue","title":"<code>purge_queue(settings, queue_name)</code>","text":"<p>Purge all messages from the specified queue.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings object containing configuration for Celery.</p> required <code>queue_name</code> <code>str</code> <p>The name of the queue to purge.</p> required <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the command execution.</p>"},{"location":"reference/system/#acoupi.system.celery.purge_queues","title":"<code>purge_queues(settings)</code>","text":"<p>Purge all messages from all queues.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings object containing configuration for Celery.</p> required <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the command execution.</p>"},{"location":"reference/system/#acoupi.system.celery.restart_workers","title":"<code>restart_workers(settings, log_level=None)</code>","text":"<p>Restart the Celery workers.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The current acoupi settings.</p> required <code>log_level</code> <code>Optional[Literal]</code> <p>The log level for the workers, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the subprocess.run function.</p>"},{"location":"reference/system/#acoupi.system.celery.run_celery_command","title":"<code>run_celery_command(settings, args, with_app=True, quiet=False, **kwargs)</code>","text":""},{"location":"reference/system/#acoupi.system.celery.start_workers","title":"<code>start_workers(settings, pool='threads', log_level=None)</code>","text":"<p>Start the Celery workers.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The current acoupi settings.</p> required <code>pool</code> <code>Literal</code> <p>The pool type for the workers, by default \"threads\".</p> <code>'threads'</code> <code>log_level</code> <code>Optional[Literal]</code> <p>The log level for the workers, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the subprocess.run function.</p>"},{"location":"reference/system/#acoupi.system.celery.stop_workers","title":"<code>stop_workers(settings, log_level=None)</code>","text":"<p>Stop the Celery workers.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The current acoupi settings.</p> required <code>log_level</code> <code>Optional[Literal]</code> <p>The log level for the workers, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>CompletedProcess</code> <p>The result of the subprocess.run function.</p>"},{"location":"reference/system/#acoupi.system.constants","title":"<code>acoupi.system.constants</code>","text":"<p>Path constants for acoupi system.</p>"},{"location":"reference/system/#acoupi.system.constants-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.constants.CeleryConfig","title":"<code>CeleryConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration settings for Celery in Acoupi.</p> <p>This class defines the settings used to configure the Celery task queue specifically for the Acoupi application.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.accept_content","title":"<code>accept_content: List[str] = Field(default_factory=lambda: ['pickle'])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.broker_connection_retry_on_startup","title":"<code>broker_connection_retry_on_startup: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Retry to establish the connection to the AMQP broker on startup.</p> <p>Automatically try to re-establish the connection to the AMQP broke if lost after the initial connection is made.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.broker_url","title":"<code>broker_url: str = 'pyamqp://guest@localhost//'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The URL of the message broker used by Celery.</p> <p>Acoupi uses RabbitMQ with the default guest user. You may need to update this if your RabbitMQ setup is different.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.enable_utc","title":"<code>enable_utc: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable UTC for Celery.</p> <p>It's generally recommended to keep this enabled for consistency across different Acoupi deployments.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.result_backend","title":"<code>result_backend: str = 'rpc://'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The URL for storing task results. </p> <p>'rpc://' indicates that results are sent back directly to the client.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.result_persistent","title":"<code>result_persistent: bool = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to persist task results. </p> <p>In Acoupi deployments, task results are not typically needed after the task has completed, as all essential data is stored in an independent database. This setting helps to avoid unnecessary storage overhead.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.result_serializer","title":"<code>result_serializer: str = 'pickle'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.task_acks_late","title":"<code>task_acks_late: bool = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to acknowledge tasks after they have been executed. </p> <p>True means that tasks are acknowledged after they have been executed,  not right before.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.task_serializer","title":"<code>task_serializer: str = 'pickle'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.task_soft_time_limit","title":"<code>task_soft_time_limit: int = 30</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The soft time limit (in seconds) for task execution.</p> <p>If a task exceeds this limit, it will receive a warning.</p> <p>If you have tasks that are expected to run longer than this limit, you should increase this value or specify the time limit directly.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.task_time_limit","title":"<code>task_time_limit: int = 60</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The hard time limit (in seconds) for task execution.</p> <p>If a task exceeds this limit, it will be terminated.</p> <p>If you have tasks that are expected to run longer than this limit, you should increase this value or specify the time limit directly.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.timezone","title":"<code>timezone: str = 'UTC'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The timezone to use for Celery.</p>"},{"location":"reference/system/#acoupi.system.constants.CeleryConfig.worker_prefetch_multiplier","title":"<code>worker_prefetch_multiplier: int = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The number of tasks a worker can prefetch.</p> <p>Setting this to 1 prevents tasks from being delayed due to other tasks in the queue. Celery defaults to prefetching tasks in batches, which can cause a fast task to wait for a slower one in the same batch.</p>"},{"location":"reference/system/#acoupi.system.constants.Settings","title":"<code>Settings</code>","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Settings for acoupi system.</p>"},{"location":"reference/system/#acoupi.system.constants.Settings-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.acoupi_beat_service_file","title":"<code>acoupi_beat_service_file: str = 'acoupi-beat.service'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.acoupi_service_file","title":"<code>acoupi_service_file: str = 'acoupi.service'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.app_name","title":"<code>app_name: str = 'app'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.beat_script_path","title":"<code>beat_script_path: Path = home / 'bin' / 'acoupi-beat.sh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.celery_config_file","title":"<code>celery_config_file: Path = home / 'config' / 'celery.json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.celery_pool_type","title":"<code>celery_pool_type: Literal['threads', 'prefork', 'eventlet', 'gevent', 'solo', 'processes'] = 'threads'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.deployment_file","title":"<code>deployment_file: Path = home / 'config' / 'deployment.json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.env_file","title":"<code>env_file: Path = home / 'config' / 'env'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.home","title":"<code>home: Path = Path.home() / '.acoupi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.log_dir","title":"<code>log_dir: Path = home / 'log'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.log_level","title":"<code>log_level: str = 'INFO'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.model_config","title":"<code>model_config = SettingsConfigDict(env_prefix='ACOUPI_')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.program_config_file","title":"<code>program_config_file: Path = home / 'config' / 'program.json'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.program_file","title":"<code>program_file: Path = home / app_name + '.py'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.program_name_file","title":"<code>program_name_file: Path = home / 'config' / 'name'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.restart_script_path","title":"<code>restart_script_path: Path = home / 'bin' / 'acoupi-workers-restart.sh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.run_dir","title":"<code>run_dir: Path = home / 'run'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.start_script_path","title":"<code>start_script_path: Path = home / 'bin' / 'acoupi-workers-start.sh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.constants.Settings.stop_script_path","title":"<code>stop_script_path: Path = home / 'bin' / 'acoupi-workers-stop.sh'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.deployments","title":"<code>acoupi.system.deployments</code>","text":"<p>Functions that manage Acoupi system.</p> <p>This module contains utility functions for acoupi programs such as loading programs and getting celery apps from programs.</p>"},{"location":"reference/system/#acoupi.system.deployments-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.deployments-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.deployments.end_deployment","title":"<code>end_deployment(settings)</code>","text":"<p>End current deployment.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings to use.</p> required <p>Returns:</p> Type Description <code>Deployment</code> <p>The ended deployment.</p> <p>Raises:</p> Type Description <code>DeploymentError</code> <p>If the deployment has already ended or has not been started yet.</p>"},{"location":"reference/system/#acoupi.system.deployments.get_current_deployment","title":"<code>get_current_deployment(settings)</code>","text":"<p>Get current deployment.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings to use.</p> required <p>Returns:</p> Type Description <code>Deployment</code> <p>The current deployment.</p> <p>Raises:</p> Type Description <code>DeploymentError</code> <p>If the deployment file does not exist or the deployment has already ended.</p>"},{"location":"reference/system/#acoupi.system.deployments.load_deployment_from_file","title":"<code>load_deployment_from_file(path)</code>","text":"<p>Load deployment from file.</p> <p>The deployment is loaded from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Path</code> <p>The path to load the deployment from.</p> required <p>Returns:</p> Type Description <code>Deployment</code> <p>The loaded deployment.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the deployment data is invalid.</p> <code>FileNotFoundError</code> <p>If the deployment file does not exist.</p>"},{"location":"reference/system/#acoupi.system.deployments.start_deployment","title":"<code>start_deployment(settings, name, latitude=None, longitude=None)</code>","text":"<p>Start a new deployment.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings to use.</p> required <code>name</code> <code>str</code> <p>The name of the deployment.</p> required <p>Returns:</p> Type Description <code>Deployment</code> <p>Raises:</p> Type Description <code>DeploymentError</code> <p>If Acoupi has already been deployed.</p> <code>ValueError</code> <p>If the deployment data is invalid. i.e. the latitude or longitude is invalid.</p>"},{"location":"reference/system/#acoupi.system.deployments.write_deployment_to_file","title":"<code>write_deployment_to_file(deployment, path)</code>","text":"<p>Write deployment to file.</p> <p>The deployment is written as a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>deployment</code> <code>Deployment</code> <p>The deployment to write to file.</p> required <code>path</code> <code>Path</code> <p>The path to write the deployment to.</p> required"},{"location":"reference/system/#acoupi.system.exceptions","title":"<code>acoupi.system.exceptions</code>","text":"<p>Custom Exceptions for Acoupi system.</p>"},{"location":"reference/system/#acoupi.system.exceptions-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.exceptions.ConfigurationError","title":"<code>ConfigurationError(message, help=None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a configuration is invalid.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message.</p> required <code>help</code> <code>str</code> <p>An optional help message on how to fix the error.</p> <code>None</code>"},{"location":"reference/system/#acoupi.system.exceptions.ConfigurationError-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.exceptions.ConfigurationError.help","title":"<code>help = help</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.exceptions.ConfigurationError.message","title":"<code>message = message</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.exceptions.DeploymentError","title":"<code>DeploymentError(message)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a deployment fails.</p>"},{"location":"reference/system/#acoupi.system.exceptions.DeploymentError-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.exceptions.DeploymentError.message","title":"<code>message = message</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.exceptions.HealthCheckError","title":"<code>HealthCheckError(message)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a health check fails.</p>"},{"location":"reference/system/#acoupi.system.exceptions.HealthCheckError-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.exceptions.HealthCheckError.message","title":"<code>message = message</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.exceptions.InvalidProgramError","title":"<code>InvalidProgramError(program)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a program file is invalid.</p>"},{"location":"reference/system/#acoupi.system.exceptions.InvalidProgramError-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.exceptions.InvalidProgramError.program","title":"<code>program = program</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.exceptions.ParameterError","title":"<code>ParameterError(value, message, help=None)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when a parameter is invalid.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value that caused the error.</p> required <code>message</code> <code>str</code> <p>The error message.</p> required <code>help</code> <code>str</code> <p>An optional help message on how to fix the error.</p> <code>None</code>"},{"location":"reference/system/#acoupi.system.exceptions.ParameterError-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.exceptions.ParameterError.help","title":"<code>help = help</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.exceptions.ParameterError.message","title":"<code>message = message</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.exceptions.ParameterError.value","title":"<code>value = value</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.exceptions.ProgramNotFoundError","title":"<code>ProgramNotFoundError(program)</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when program is not found.</p>"},{"location":"reference/system/#acoupi.system.exceptions.ProgramNotFoundError-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.exceptions.ProgramNotFoundError.program","title":"<code>program = program</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.files","title":"<code>acoupi.system.files</code>","text":"<p>Functions to handle files.</p>"},{"location":"reference/system/#acoupi.system.files-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.files.DEFAULT_AUDIO_STORAGE","title":"<code>DEFAULT_AUDIO_STORAGE = Path.home() / 'audio'</code>  <code>module-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.files.TEMP_PATH","title":"<code>TEMP_PATH = Path('/run/shm/')</code>  <code>module-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.files.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.files-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.files.delete_recording","title":"<code>delete_recording(recording)</code>","text":"<p>Delete the recording.</p>"},{"location":"reference/system/#acoupi.system.files.get_temp_dir","title":"<code>get_temp_dir(in_memory=True)</code>","text":"<p>Get a temporary directory where to store recordings.</p> <p>Recordings are usually stored in a staging temporary directory before being moved to the final storage location. This function returns the path of the directory where the temporary recordings are stored.</p> <p>Parameters:</p> Name Type Description Default <code>in_memory</code> <code>bool</code> <p>If True, the temporary files will be stored in memory.</p> <code>True</code> Notes <p>It is recommended to store temporary files in memory to reduce the number of writes to the SD card. It can also be useful in scenarios where recordings should not be kept in disk for legal reasons.</p> <p>If <code>in_memory</code> is set to True but the system does not support in-memory storage, the function will return the default temporary and show a warning.</p>"},{"location":"reference/system/#acoupi.system.files.get_temp_file","title":"<code>get_temp_file(path)</code>","text":"<p>Get the temporary recording UUID from the path.</p>"},{"location":"reference/system/#acoupi.system.files.get_temp_file_id","title":"<code>get_temp_file_id(path)</code>","text":"<p>Get the temporary recording UUID from the path.</p>"},{"location":"reference/system/#acoupi.system.files.get_temp_files","title":"<code>get_temp_files(path=TEMP_PATH)</code>","text":"<p>Get the list of temporary recordings.</p> <p>Temporary recordings are stored in memory to avoid unnecessary writes to the SD card.</p>"},{"location":"reference/system/#acoupi.system.files.get_temp_files_paths","title":"<code>get_temp_files_paths(path)</code>","text":"<p>Get the temporary recording path.</p>"},{"location":"reference/system/#acoupi.system.files.move_recording","title":"<code>move_recording(recording, dest, logger=None)</code>","text":"<p>Move the recording to the destination.</p>"},{"location":"reference/system/#acoupi.system.lifecycle","title":"<code>acoupi.system.lifecycle</code>","text":"<p>System functions for managing Acoupi programs.</p>"},{"location":"reference/system/#acoupi.system.lifecycle-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.lifecycle-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.lifecycle.setup_program","title":"<code>setup_program(settings, program_name, args=None, prompt=False)</code>","text":"<p>Set up an Acoupi Program.</p>"},{"location":"reference/system/#acoupi.system.lifecycle.start_program","title":"<code>start_program(settings, name, latitude=None, longitude=None)</code>","text":""},{"location":"reference/system/#acoupi.system.lifecycle.stop_program","title":"<code>stop_program(settings)</code>","text":""},{"location":"reference/system/#acoupi.system.programs","title":"<code>acoupi.system.programs</code>","text":"<p>System functions for managing Acoupi programs.</p>"},{"location":"reference/system/#acoupi.system.programs-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.programs-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.programs.ProgramState","title":"<code>ProgramState</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/system/#acoupi.system.programs.ProgramState-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.programs.ProgramState.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.programs.ProgramState.OK","title":"<code>OK = 'ok'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.programs.ProgramState.UNHEALTHY","title":"<code>UNHEALTHY = 'unhealthy'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.programs-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.programs.get_program_state","title":"<code>get_program_state(settings)</code>","text":""},{"location":"reference/system/#acoupi.system.programs.load_config_schema","title":"<code>load_config_schema(settings)</code>","text":"<p>Load the configuration schema for the program.</p>"},{"location":"reference/system/#acoupi.system.programs.load_program","title":"<code>load_program(settings)</code>","text":"<p>Load a fully configured acoupi program.</p> <p>This function loads the acoupi program class from the specified module, instantiates it, and configures it with the specified config files.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings object containing the paths to the program and celery config files.</p> required <p>Returns:</p> Type Description <code>AcoupiProgram</code> <p>A fully configured instance of the acoupi program class.</p> <p>Raises:</p> Type Description <code>ProgramNotFoundError</code> <p>If the program module is not found.</p> <code>InvalidProgramError</code> <p>If the loaded class is not a valid acoupi program class.</p>"},{"location":"reference/system/#acoupi.system.programs.load_program_class","title":"<code>load_program_class(program_name)</code>","text":"<p>Load the acoupi program class from a specified module.</p> <p>This function searches the given module for a valid AcoupiProgram class. If multiple such classes exist within the module, it prioritizes classes that are not further subclassed.</p> <p>Parameters:</p> Name Type Description Default <code>program_name</code> <code>str</code> <p>The name of the module containing the acoupi program class.</p> required <p>Returns:</p> Type Description <code>Type[AcoupiProgram]</code> <p>The acoupi program class.</p> <p>Raises:</p> Type Description <code>ProgramNotFoundError</code> <p>If the specified program module is not found.</p> <code>InvalidProgramError</code> <p>If the loaded class is not a valid acoupi program class.</p> Notes <p>When multiple AcoupiProgram classes are found within the module, this function will attempt to select one that is not further subclassed. If multiple such \"final\" classes exist, a warning will be issued, and the first one encountered will be selected. It is recommended that when exposing AcoupiProgram classes in a module, only one \"final\" (non-subclassable) class be made available.</p>"},{"location":"reference/system/#acoupi.system.programs.load_worker_config","title":"<code>load_worker_config(settings)</code>","text":"<p>Load the configuration schema for the program.</p>"},{"location":"reference/system/#acoupi.system.programs.write_program_file","title":"<code>write_program_file(program_name, settings)</code>","text":"<p>Write the python script with the celery app to run.</p>"},{"location":"reference/system/#acoupi.system.scripts","title":"<code>acoupi.system.scripts</code>","text":""},{"location":"reference/system/#acoupi.system.scripts-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.scripts-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.scripts.get_celery_bin","title":"<code>get_celery_bin()</code>","text":"<p>Return the path to the celery binary.</p>"},{"location":"reference/system/#acoupi.system.scripts.give_executable_permissions","title":"<code>give_executable_permissions(path)</code>","text":"<p>Give executable permissions to a file.</p>"},{"location":"reference/system/#acoupi.system.scripts.write_beat_script","title":"<code>write_beat_script(settings, celery_bin=None)</code>","text":"<p>Write the beat script.</p>"},{"location":"reference/system/#acoupi.system.scripts.write_scripts","title":"<code>write_scripts(config, settings, celery_bin=None)</code>","text":"<p>Write the worker scripts.</p>"},{"location":"reference/system/#acoupi.system.scripts.write_workers_restart_script","title":"<code>write_workers_restart_script(config, settings, celery_bin=None)</code>","text":"<p>Write the worker restart script.</p>"},{"location":"reference/system/#acoupi.system.scripts.write_workers_start_script","title":"<code>write_workers_start_script(config, settings, celery_bin=None)</code>","text":"<p>Write the worker start script.</p>"},{"location":"reference/system/#acoupi.system.scripts.write_workers_stop_script","title":"<code>write_workers_stop_script(config, settings, celery_bin=None)</code>","text":"<p>Write the worker stop script.</p>"},{"location":"reference/system/#acoupi.system.services","title":"<code>acoupi.system.services</code>","text":"<p>System functions to manage acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus","title":"<code>ServiceStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Service status.</p>"},{"location":"reference/system/#acoupi.system.services.ServiceStatus-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus.ACTIVATING","title":"<code>ACTIVATING = 'activating'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus.ACTIVE","title":"<code>ACTIVE = 'active'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus.DEACTIVATING","title":"<code>DEACTIVATING = 'deactivating'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus.FAILED","title":"<code>FAILED = 'failed'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus.INACTIVE","title":"<code>INACTIVE = 'inactive'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus.RELOADING","title":"<code>RELOADING = 'reloading'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus.UNINSTALLED","title":"<code>UNINSTALLED = 'uninstalled'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.services.ServiceStatus.UNKNOWN","title":"<code>UNKNOWN = 'unknown'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.services-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.services.disable_services","title":"<code>disable_services(settings, path=None, **kwargs)</code>","text":"<p>Disable acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services.enable_services","title":"<code>enable_services(settings, path=None, **kwargs)</code>","text":"<p>Enable acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services.get_acoupi_beat_service_status","title":"<code>get_acoupi_beat_service_status(settings, path=None)</code>","text":"<p>Get the status of acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services.get_acoupi_service_status","title":"<code>get_acoupi_service_status(settings, path=None)</code>","text":"<p>Get the status of acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services.get_service_status","title":"<code>get_service_status(service_name)</code>","text":""},{"location":"reference/system/#acoupi.system.services.get_user_unit_dir","title":"<code>get_user_unit_dir()</code>","text":"<p>Get the user unit directory.</p> <p>Returns:</p> Type Description <code>Path</code> <p>The user unit directory.</p>"},{"location":"reference/system/#acoupi.system.services.install_services","title":"<code>install_services(settings, path=None)</code>","text":"<p>Install acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services.services_are_installed","title":"<code>services_are_installed(settings, path=None)</code>","text":"<p>Check if acoupi services are installed.</p>"},{"location":"reference/system/#acoupi.system.services.start_services","title":"<code>start_services(settings, path=None, **kwargs)</code>","text":"<p>Start acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services.status_services","title":"<code>status_services(settings, path=None, **kwargs)</code>","text":"<p>Stop acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services.stop_services","title":"<code>stop_services(settings, path=None, **kwargs)</code>","text":"<p>Stop acoupi services.</p>"},{"location":"reference/system/#acoupi.system.services.uninstall_services","title":"<code>uninstall_services(settings, path=None)</code>","text":"<p>Uninstall acoupi services.</p>"},{"location":"reference/system/#acoupi.system.state","title":"<code>acoupi.system.state</code>","text":"<p>Functions for accessing the state of the Acoupi system.</p>"},{"location":"reference/system/#acoupi.system.state-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.state.AcoupiStatus","title":"<code>AcoupiStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model representing the status of the Acoupi system.</p> <p>Attributes:</p> Name Type Description <code>acoupi_service</code> <code>ServiceStatus</code> <p>The status of the acoupi systemd service.</p> <code>beat_service</code> <code>ServiceStatus</code> <p>The status of the beat systemd service.</p> <code>celery</code> <code>CeleryStatus</code> <p>The status of the Celery workers.</p> <code>program</code> <code>ProgramStatus</code> <p>The status of the acoupi program.</p>"},{"location":"reference/system/#acoupi.system.state.AcoupiStatus-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.state.AcoupiStatus.celery","title":"<code>celery: CeleryStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.state.AcoupiStatus.deployment","title":"<code>deployment: Optional[Deployment]</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.state.AcoupiStatus.program","title":"<code>program: ProgramState</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.state.AcoupiStatus.services","title":"<code>services: ServicesStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.state.ServicesStatus","title":"<code>ServicesStatus</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"reference/system/#acoupi.system.state.ServicesStatus-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.state.ServicesStatus.acoupi","title":"<code>acoupi: ServiceStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.state.ServicesStatus.beat","title":"<code>beat: ServiceStatus</code>  <code>instance-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.state-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.state.get_status","title":"<code>get_status(settings)</code>","text":"<p>Get the current status of the Acoupi system.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>Settings</code> <p>The settings object containing configuration paths.</p> required <p>Returns:</p> Type Description <code>AcoupiStatus</code> <p>An object containing the status of various components of the Acoupi system.</p>"},{"location":"reference/system/#acoupi.system.state.is_configured","title":"<code>is_configured(settings)</code>","text":"<p>Check if acoupi is configured.</p>"},{"location":"reference/system/#acoupi.system.tasks","title":"<code>acoupi.system.tasks</code>","text":"<p>Acoupi system tasks module.</p> <p>This module provides a set of functions to help manage and interact with the tasks of the currently configured acoupi program.</p>"},{"location":"reference/system/#acoupi.system.tasks-classes","title":"Classes","text":""},{"location":"reference/system/#acoupi.system.tasks-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.tasks.get_task_list","title":"<code>get_task_list(program, include_celery_tasks=False)</code>","text":"<p>Return a list of all the tasks registered in the current program.</p> <p>Parameters:</p> Name Type Description Default <code>program</code> <code>AcoupiProgram</code> <p>The AcoupiProgram instance to get the tasks from.</p> required <code>include_celery_tasks</code> <code>bool</code> <p>Whether to include celery tasks in the list. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of the names of available tasks.</p> Notes <p>Celery registers a number of tasks by default, which can be excluded from the list by setting <code>include_celery_tasks</code> to <code>False</code>.</p>"},{"location":"reference/system/#acoupi.system.tasks.profile_task","title":"<code>profile_task(program, task_name)</code>","text":"<p>Profile a task from the current program.</p> <p>Parameters:</p> Name Type Description Default <code>program</code> <code>AcoupiProgram</code> <p>The AcoupiProgram instance to profile the task from.</p> required <code>task_name</code> <code>str</code> <p>The name of the task to profile.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the specified task is not found.</p> Notes <p>This function uses cProfile to profile the task. The output can be saved to a file by providing the <code>output</code> parameter. The task is run in the current Python process and does not send the task to the Celery workers, so the profiling will only show the performance of the task without the overhead of the Celery workers.</p>"},{"location":"reference/system/#acoupi.system.tasks.run_task","title":"<code>run_task(program, task_name, recording=None)</code>","text":"<p>Run a task from the current program.</p> <p>Parameters:</p> Name Type Description Default <code>program</code> <code>AcoupiProgram</code> <p>The AcoupiProgram instance to run the task from.</p> required <code>task_name</code> <code>str</code> <p>The name of the task to run.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the specified task is not found.</p> Notes <p>This function runs the task in the current Python process and does not send the task to the Celery workers. This can be helpful for testing a task without setting up Celery workers. To run the task through Celery workers, use the <code>acoupi celery call &lt;task_name&gt;</code> command.</p>"},{"location":"reference/system/#acoupi.system.templates","title":"<code>acoupi.system.templates</code>","text":"<p>Jinja2 environment for rendering templates.</p>"},{"location":"reference/system/#acoupi.system.templates-attributes","title":"Attributes","text":""},{"location":"reference/system/#acoupi.system.templates.env","title":"<code>env = Environment(loader=PackageLoader('acoupi'), autoescape=select_autoescape())</code>  <code>module-attribute</code>","text":""},{"location":"reference/system/#acoupi.system.templates-functions","title":"Functions","text":""},{"location":"reference/system/#acoupi.system.templates.render_template","title":"<code>render_template(template_name, **kwargs)</code>","text":"<p>Render a template with the given name and keyword arguments.</p>"},{"location":"reference/tasks/","title":"Tasks","text":""},{"location":"reference/tasks/#tasks","title":"Tasks","text":""},{"location":"reference/tasks/#acoupi.tasks","title":"<code>acoupi.tasks</code>","text":"<p>Process templates for Acoupi.</p> <p>Acoupi offers a collection of process templates to assist in the creation of recording, detecting, and data sending processes. While Acoupi includes a variety of components to construct these processes, users may prefer to use their own components. By utilizing the provided templates, users can ensure that their custom processes integrate with Acoupi and adhere to standardized building practices. The use of templates also allows for effortless customization of processes.</p> <p>The templates provided take the form of functions that return a function that can be used to start a process. Each template takes a set of arguments that are used to construct the process. The arguments are Acoupi components of the appropriate type, such as a message store, messenger, model, etc. Any object that implements the appropriate interface can be used as an argument. This allows users to use out-of-the-box components or components that they have created themselves.</p>"},{"location":"reference/tasks/#acoupi.tasks-functions","title":"Functions","text":""},{"location":"reference/tasks/#acoupi.tasks.generate_detection_task","title":"<code>generate_detection_task(store, model, message_store, logger=logger, output_cleaners=None, processing_filters=None, message_factories=None)</code>","text":"<p>Generate a detection task.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>Store</code> <p>The store to store the model output.</p> required <code>model</code> <code>Model</code> <p>The model to run on the recording.</p> required <code>message_store</code> <code>MessageStore</code> <p>The message store to store the messages.</p> required <code>logger</code> <code>Logger</code> <p>The logger to log messages, by default logger.</p> <code>logger</code> <code>output_cleaners</code> <code>Optional[List[ModelOutputCleaner]]</code> <p>The output cleaners to clean the model output, by default None.</p> <code>None</code> <code>processing_filters</code> <code>Optional[List[ProcessingFilter]]</code> <p>The processing filters to check if the recording should be processed, by default None.</p> <code>None</code> <code>message_factories</code> <code>Optional[List[MessageBuilder]]</code> <p>The message factories to create messages, by default None.</p> <code>None</code> Note <p>The detection task calls the following methods:</p> <ol> <li>filter.should_process_recording(recording) -&gt; bool<ul> <li>Check if the recording should be processed by the model.</li> <li>See components.processing_filters for implementations of types.ProcessingFilter.</li> </ul> </li> <li>model.run(recording) -&gt; data.ModelOutput<ul> <li>Run the model on the recording and return the output.</li> <li>See types.Model.</li> </ul> </li> <li>cleaner.clean(model_output) -&gt; data.ModelOutput<ul> <li>Clean the outputs of the model based on the output cleaners.</li> <li>See components.output_cleaners for implementations of types.ModelOutputCleaner.</li> </ul> </li> <li>store.store_model_output(model_output) -&gt; None<ul> <li>Store the cleaned outputs of the model in the store.</li> <li>See components.stores for implementation of types.Store.</li> </ul> </li> <li>message_factory.build_message(model_output) -&gt; data.Message<ul> <li>Create messages to be sent using the Messenger.</li> <li>See components.message_factories for implementations of types.MessageBuilder.</li> </ul> </li> <li>message_store.store_message(message) -&gt; None<ul> <li>Store the message in the message store.</li> <li>See components.message_stores for implementation of types.Store.</li> </ul> </li> </ol>"},{"location":"reference/tasks/#acoupi.tasks.generate_file_management_task","title":"<code>generate_file_management_task(store, file_managers, logger=logger, file_filters=None, required_models=None, tmp_path=TEMP_PATH)</code>","text":"<p>Generate a file management task.</p> <p>Parameters:</p> Name Type Description Default <code>store</code> <code>Store</code> <p>The store to get and update recordings.</p> required <code>file_managers</code> <code>List[RecordingSavingManager]</code> <p>The file managers to save recordings.</p> required <code>logger</code> <code>Logger</code> <p>The logger to log messages, by default logger.</p> <code>logger</code> <code>file_filters</code> <code>Optional[List[RecordingSavingFilter]]</code> <p>The file filters to determine if recordings should be saved, by default None.</p> <code>None</code> <code>required_models</code> <code>Optional[List[str]]</code> <p>The required models that need to be saved, by default None.</p> <code>None</code> <code>tmp_path</code> <code>Path</code> <p>The path where recordings are saved temporarily, by default TEMP_PATH.</p> <code>TEMP_PATH</code> Notes <p>The file management task calls the following methods:</p> <ol> <li>store.get_recordings_by_path(paths) -&gt; List[Tuple[data.Recording, List[data.ModelOutput]]]<ul> <li>Get the recordings that need to be managed.</li> <li>See components.stores for implementation of types.Store.</li> </ul> </li> <li>filter.should_save_recording(recording, model_outputs) -&gt; bool<ul> <li>Determine if the recordings should be saved.</li> <li>See components.saving_filters for implementations of types.RecordingSavingFilter.</li> </ul> </li> <li>manager.save_recording(recording, model_outputs) -&gt; Path<ul> <li>Move the recordings that should be saved outside of the temporary file system to a permanent storage location.</li> <li>See components.saving_managers for implementations of types.RecordingSavingManager.</li> </ul> </li> <li>store.update_recording_path(recording, new_path) -&gt; None<ul> <li>Update the store with the new paths of the recordings.</li> <li>See components.stores for implementation of types.Store.</li> </ul> </li> </ol>"},{"location":"reference/tasks/#acoupi.tasks.generate_heartbeat_task","title":"<code>generate_heartbeat_task(messengers, logger=logger)</code>","text":"<p>Generate a heartbeat task.</p> <p>The heartbeat task creates a heartbeat message and emits them using the provided messengers.</p> <p>Parameters:</p> Name Type Description Default <code>messengers</code> <code>Optional[List[Messenger]]</code> <p>A list of messenger instances to pass the heartbeat message to.</p> required <code>logger</code> <code>Logger</code> <p>Logger instance for logging heartbeat status.</p> <code>logger</code> <p>Returns:</p> Type Description <code>Callable[[], None]</code> <p>A function that sends a heartbeat message when called.</p>"},{"location":"reference/tasks/#acoupi.tasks.generate_recording_task","title":"<code>generate_recording_task(recorder, store, logger=logger, recording_conditions=None)</code>","text":"<p>Generate a recording task.</p> <p>Parameters:</p> Name Type Description Default <code>recorder</code> <code>AudioRecorder</code> <p>The audio recorder to record audio.</p> required <code>store</code> <code>Store</code> <p>The store to store the recording metadata.</p> required <code>logger</code> <code>Logger</code> <p>The logger to log messages, by default logger.</p> <code>logger</code> <code>recording_conditions</code> <code>Optional[List[T]]</code> <p>The recording conditions to check if audio should be recorded, by default None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Callable[[], Optional[Recording]]</code> <p>The recording metadata if the recording was successful, otherwise None.</p> Notes <p>The recording task calls the following methods:</p> <ol> <li>condition.should_record(now) -&gt; bool<ul> <li>Check if the conditions are met to record audio.</li> <li>See components.recording_conditions for implementations of types.RecordingCondition.</li> </ul> </li> <li>store.get_current_deployment() -&gt; data.Deployment<ul> <li>Get the current deployment information.</li> <li>See components.stores for implementation of types.Store.</li> </ul> </li> <li>recorder.record(deployment) -&gt; data.Recording<ul> <li>Record audio and return the recording metadata.</li> <li>See components.audio_recorders for implementation of types.AudioRecorder.</li> </ul> </li> <li>store.store_recording(recording) -&gt; None<ul> <li>Store the recording metadata in the store.</li> <li>See components.stores for implementation of types.Store.</li> </ul> </li> </ol>"},{"location":"reference/tasks/#acoupi.tasks.generate_send_messages_task","title":"<code>generate_send_messages_task(message_store, messengers=None, logger=logger)</code>","text":"<p>Generate a send data task.</p> <p>Parameters:</p> Name Type Description Default <code>message_store</code> <code>MessageStore</code> <p>The message store to get and store messages.</p> required <code>messengers</code> <code>Optional[List[Messenger]]</code> <p>The messengers to send messages, by default None.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>The logger to log messages, by default logger.</p> <code>logger</code> Notes <p>The send data task calls the following methods:</p> <ol> <li>message_store.get_unsent_messages() -&gt; List[data.Message]<ul> <li>Get the unsent messages from the message store.</li> <li>See components.message_stores for implementation of types.MessageStore.</li> </ul> </li> <li>messenger.send_message(message) -&gt; data.Response<ul> <li>Send the messages to a remote server.</li> <li>See acoupi.components.messengers for implementation of types.Messenger.</li> </ul> </li> <li>message_store.store_response(response) -&gt; None<ul> <li>Store the response from the remote server in the message store.</li> <li>See components.message_stores for implementation of types.MessageStore.</li> </ul> </li> </ol>"},{"location":"reference/tasks/#acoupi.tasks.generate_summariser_task","title":"<code>generate_summariser_task(summarisers, message_store, logger=logger)</code>","text":"<p>Generate a summariser task.</p> <p>Parameters:</p> Name Type Description Default <code>summarisers</code> <code>List[Summariser]</code> <p>The summarisers to generate the summary message.</p> required <code>message_store</code> <code>MessageStore</code> <p>The message store to store the summary message.</p> required <code>logger</code> <code>Logger</code> <p>The logger to log messages, by default logger.</p> <code>logger</code> Notes <p>The summary process calls the following methods:</p> <ol> <li>summariser.build_summary(now) -&gt; data.Message<ul> <li>Generate a summary message.</li> <li>See components.summarisers for implementations of types.Summariser.</li> </ul> </li> <li>message_store.store_message(message) -&gt; None<ul> <li>Store the summary message in the message store.</li> <li>See components.stores for implementation of types.Store.</li> </ul> </li> </ol>"},{"location":"tutorials/","title":"Acoupi Tutorials","text":""},{"location":"tutorials/#acoupi_tutorials","title":"Acoupi Tutorials","text":"<p>This section of the documentation contains step-by-step tutorials to help you getting started with acoupi. The tutorials aims to outline what acoupi is capable of while providing specific information such as installing acoupi, configuring a pre-built program, retrieving deployment information.</p> <p>We hope the tutorials are broadly accessible to anyone with an interest in using acoupi.</p> Tutorials Step-by-Step Information Installation Learn how to install acoupi Configuration Learn about the configuration options of an acoupi program. Deployment Learn about acoupi deployment <p>How acoupi works</p> <p>To get a better understanding of the key elements of acoupi have a read at the Explanation section of the documentation. Illustrations and examples should provide you with easy-to-follow descriptions about the structure of the code.</p> <p>acoupi Reference</p> <p>Take a look at the Reference section of the documentation to know which options are available and can be used \"out-of the box\".</p> <p>Contribution</p> <p>We are interested to expand the number of tutorials so users can gain more detailed information about specific elements of acoupi. If you feel we should do a tutorial about \"XYZ\", please reach out!</p>"},{"location":"tutorials/configuration/","title":"Configuration","text":""},{"location":"tutorials/configuration/#configuration","title":"Configuration","text":"<p>Once acoupi has been installed on a device, users can configure a pre-built program. acoupi comes with default settings, which users can either accept or customise through the command line interface (CLI). </p>"},{"location":"tutorials/configuration/#configuring_acoupi_programs_via_the_cli","title":"Configuring acoupi programs via the CLI","text":"<ul> <li>default program: The acoupi default program is the most simplest program, handling only two tasks: recording and managing audio files.</li> <li>connected program: The acoupi connected program extends the default program by adding messaging capabilities, allowing users to send messages to a remote server.</li> </ul> <p>To select and configure your prefered acoupi program,  use of the following commands:</p> <p>CLI Command: acoupi default program</p> <pre><code>acoupi setup --program acoupi.programs.default\n</code></pre> <p>CLI Command: acoupi connected program</p> <pre><code>acoupi setup --program acoupi.programs.connected\n</code></pre> <p>Based on the selected program, users will be prompted with several questions during setup.  To accept the default values, press the keyboard letter <code>y</code> or the key <code>Enter</code>.  To reject and modify a setting, press the keyboard letter <code>n</code> and input a new value.</p> <p>The video shows the configuration process for the acoupi default program via the CLI.  </p> <p></p>"},{"location":"tutorials/configuration/#configuration_parameters","title":"Configuration Parameters","text":""},{"location":"tutorials/configuration/#acoupiprogramsdefault","title":"acoupi.programs.default","text":"<p>Below is an example of the configured parameters for the default program in JSON format.</p> <p>Audio recordings have a duration of 10 seconds and occur every 30 seconds between 4am and 11pm. However, recordings are only saved between 11am and 3pm, and during a 30-minute window before and after dawn and dusk.</p> <p>The values <code>0</code> for <code>frequency_duration</code> and <code>frequency_interval</code> indicate that no frequency filter is applied to save recordings.</p> <p>The database storing the execution of acoupi tasks and recordings of audion files is located in the <code>storages/</code> folder in the home directory.</p> <p>CLI Command: view program configuration after setup</p> <pre><code>acoupi config get\n</code></pre> <p>CLI Output: acoupi config get</p> <pre><code>{\n  \"timezone\": \"Europe/London\",\n  \"microphone\": {\n    \"device_name\": \"UltraMic 250K 16 bit r4\",\n    \"samplerate\": 250000,\n    \"audio_channels\": 1\n  },\n  \"recording\": {\n    \"duration\": 10,\n    \"interval\": 30,\n    \"chunksize\": 8192,\n    \"schedule_start\": \"04:00:00\",\n    \"schedule_end\": \"23:00:00\"\n  },\n  \"paths\": {\n    \"tmp_audio\": \"/run/shm\",\n    \"recordings\": \"/home/pi/storages/recordings\",\n    \"db_metadata\": \"/home/pi/storages/metadata.db\"\n  },\n  \"recording_saving\": {\n    \"starttime\": \"11:00:00\",\n    \"endtime\": \"15:00:00\",\n    \"before_dawndusk_duration\": 30,\n    \"after_dawndusk_duration\": 30,\n    \"frequency_duration\": 0,\n    \"frequency_interval\": 0\n  }\n}\n</code></pre> <p>How to modify a value after setup?</p> <p>You can modify the value of a parameter after an acoupi program has been set up. This can be necessary either due to a misconfiguration or to make changes to the current program. To modify a parameter, use the command:</p> <p>CLI Command: modify a configuration parameter after setup</p> <pre><code>acoupi config set --field &lt;parameter_name&gt; &lt;new_value&gt;\n</code></pre> <p>Replace the <code>parameter_name</code> with the full name of the parameter to modified. For example, to update the recording start time to 10am, the CLI command would be as follow:</p> <p>CLI Command: modify recording start time</p> <pre><code>acoupi config set --field recording.schedule_start 10:00:00\n</code></pre> <p>The table below provides detailed information about the parameters available when setting up acoupi default program.</p> Parameter Type Default Value Definition Comment Microphone Microphone configuration. <code>microphone.device_name</code> string - Will show the name of the connected usb microphone. Ensure it matches the device in use. <code>microphone.samplerate</code> int (Hz) - Sampling rate of the microphone in Hz. Set the sampling rate according to the microphone's specifications. <code>microphone.audio_channels</code> int - Number of audio channels (i.e., 1 for mono). Configure according to the microphone's capabilities. Recording Microphone configuration. <code>recording.duration</code> int (sec.) 3 Duration in seconds for each audio recording. Best kept at 3 seconds when using acoupi with ML classifiers models (e.g., batdetect2, birdnet) for optimal performance. <code>recording.interval</code> int (sec.) 10 Interval in seconds between recordings. Some pre-built programs with ML models (e.g., batdetect2) require processing time. This interval helps maintain good performance. <code>recording.chunksize</code> int 8192 Chunksize of the audio recording. An error will occur if the chunksize is too small for the audio device. <code>schedule_start</code> time (HH:MM:SS) 06:00:00 Time of day when recordings will start (24-hour format). Adjust according to specific monitoring needs (e.g., nightime hours). <code>schedule_end</code> time (HH:MM:SS) 18:00:00 Time of day when recordings will end (24-hour format). Adjust according to specific monitoring needs (e.g., nightime hours). <code>timezone</code> string \"Europe/London\" Timezone of the sensor location. Configure this according to your deployment region. Paths Configuration for file paths. <code>paths.tmp_audio</code> str \"/run/shm\" Temporary storage path for audio recordings. Temporary in-memory path. Do not modify. <code>paths.recordings</code> str \"/home/pi/storages/recordings\" Path to directory storing recorded audio files. Modify accordingly. With default paths, recordings are stored on the SDCard, modify if using external usb hardrive. <code>paths.db_metadata</code> str \"/home/pi/storages/metadata.db\" Path to the database file storing the metadata. This .db keeps track of recorded files, ML detection results, and system information. Recording Saving (Optional) N/A - Configuration for saving recorded audio files. <code>recording_saving.starttime</code> time (HH:MM:SS) \"18:30:00\" Start time for saving recorded audio files (24-hour format). Insert 00:00:00 to not use this parameter to save audio recordings. <code>recording_saving.endtime</code> time (HH:MM:SS) \"20:00:00\" End time for saving recorded audio files (24-hour format) Insert 00:00:00 to not use this parameter to save audio recordings. <code>recording_saving.before_dawndusk_duration</code> int (min.) 10 Additional duration (in minutes) to save recordings before the dawn/dusk time. Ensure recording interval covers the dawn and dusk time if using this parameter. <code>recording_saving.after_dawndusk_duration</code> int (min.) 10 Additional duration (in minutes) to save recordings after the dawn/dusk time. Ensure recording interval covers the dawn and dusk time if using this parameter. <code>recording_saving.frequency_duration</code> int (min.) 5 Duration in minutes for storing recordings when using the frequency filter. Set to zero if not using this parameter. <code>recording_saving.frequency_interval</code> int (min.) 30 eriodic interval in minutes between two periods of storing recordings. Set to zero if not using this parameter."},{"location":"tutorials/configuration/#acoupiprogramsconnected","title":"acoupi.programs.connected","text":"<p>The acoupi connected program extends the  acoupi default program by adding configuration options for sending messages to a remote server. It retains all the settings from the acoupi default program but introduces new parameters for network communication.</p> <p>Messages can be sent using either the HTTP or MQTT protocol. At least one of these protocols must be configured. If neither protocol is setup, the program will raise an error. </p> <p>The messages and their statuses, indicating if they have been sent, and whether this was a success or a failure, are stored in a database called <code>messages.db</code>. By default, this file is located in the <code>storages/</code> folder in the home directory.</p> <p>The <code>message_send_interval</code> parameter controls how frequently the acoupi program checks for new messages to send (i.e., 120 seconds by default). Similarly, the <code>heartbeat_interval</code> determines how often a <code>heartbeat_message</code>is sent (i.e., 10 minutes by default).</p> <p>CLI Output: acoupi config get</p> <pre><code>{\n  \"recording\": {},\n  \"paths\": {},\n  \"messaging\": {\n    \"messages_db\": \"/home/pi/storages/messages.db\",\n    \"message_send_interval\": 120,\n    \"heartbeat_interval\": 600,\n    \"http\": {\n      \"base_url\": \"https://test_acoupi.org/\",\n      \"content_type\": \"application/json\",\n      \"timeout\": 5\n    },\n    \"mqtt\": {\n      \"host\": \"test_acoupi.mqtt.org\",\n      \"username\": \"test_username\",\n      \"password\": \"mqtt_password\",\n      \"topic\": \"acoupi\",\n      \"port\": 1884,\n      \"timeout\": 5\n    },\n  },\n  \"recording_saving\": {},\n}\n</code></pre> <p>The table below provides detailed information about the supplementary parameters available when setting up acoupi connected program.</p> Parameter Type Default Value Definition Comment Paths Configuration for file paths. <code>messaging.messages_db</code> str \"/home/pi/storages/messages.db\" Path to the database file storing messages. This .db keeps track of the messages to be sent to a remote server and their sending/receiving status. Messaging Configuration for sending messages to remote server. Will require access to network connectivity at the location of your device deployment. <code>messaging.message_send_interval</code> int (sec.) 120 Interval in seconds for sending messages to the remote server. Adjust for network performance and data bandwidth. <code>messaging.heartbeat_interval</code> int (sec.) 600 Interval in seconds for sending heartbeat messages to the server. Heartbeat message provides information about the device status (i.e., the correct functioning of the device). Messaging HTTP Configuration for sending messages via HTTP. <code>messaging.http.base_url</code> str - URL of the HTTP server to which messages are sent. Configure according to your server setup. <code>messaging.http.content_type</code> str application/json Content type of the HTTP messages. Messages to be sent are formated into a <code>json</code> object. <code>messaging.http.timeout</code> int (sec) - Timeout for HTTP requres in seconds.. Messaging MQTT Configuration for sending messages via MQTT. <code>messaging.mqtt.host</code> str - MQTT server hostname for message transmission. Configure according to your server setup. <code>messaging.mqtt.username</code> str - Username for authentication with the MQTT broker. Replace with your server username. <code>messaging.mqtt.password</code> str - Password for authentication with the MQTT broker. Replace with your server password. <code>messaging.mqtt.topic</code> str \"acoupi\" Topic on the MQTT broker to publish messages Replace with your server setup. <code>messaging.mqtt.port</code> int 1884 Port number of the MQTT broker. Default port is usually fine unless other setup on your server. <code>messaging.mqtt.timeout</code> int (sec) 5 Timeout for connecting to the MQTT broker in seconds."},{"location":"tutorials/deployment/","title":"Deployment","text":""},{"location":"tutorials/deployment/#deployment","title":"Deployment","text":"<p>After installing and configuring an acoupi program, users can proceed to deploy it. This means the device will start running the program, ensuring audio recordings happen according to the configured recording schedule, recorded files will be saved or deleted, and if the connected program was configured, messages will be sent to a remote server. </p> What happens when a deployment starts? <p>When starting the deployment of a program, acoupi will do the following:</p> <ul> <li>Create Storages: This step checks that the folders and database files to store recordings and metadata exist. If using the default program configuration, a <code>storages/</code> folder will be created in the home directory (i.e., <code>home/pi/</code>), containing a <code>metadata.db</code> file and a <code>recordings/</code> folder to store the <code>.wav</code> audio files. </li> <li>Schedule Tasks: This step creates special instructions called systemd unit files to ensure that the program runs automatically in the background. This means the program will keep running even when the terminal window is closed or the device restarts after power interruption.</li> </ul> How are deployments managed? <p>For more details about the system background processes and the management of a deployment, refer to the Explanation: System section.</p>"},{"location":"tutorials/deployment/#managing_the_deployment_of_acoupi_programs_via_the_cli","title":"Managing the deployment of acoupi programs via the CLI","text":"<p>The video shows how a user can start, stop, and get the status of acoupi programs.</p> <p></p>"},{"location":"tutorials/deployment/#before_starting_a_deployment","title":"Before starting a deployment","text":"<p>Before starting a deployment, it's important to run a health check to ensure there are no errors in the program configuration. If everything is in order, a green message saying <code>Health checks passed</code> will be printed. However, if there are any errors, the system will display specific error messages. To resolve them, modify the configurations settings according to the provided error messages. </p> <p>CLI Command: pre-deployment checks</p> <pre><code>acoupi check\n</code></pre>"},{"location":"tutorials/deployment/#starting_a_deployment","title":"Starting a deployment","text":"<p>When ready to start a program, use the <code>acoupi deployment start</code> command. This will prompt you to provide some additional information; a name for the deployment and the latitude and longitude coordinates of the device\u2019s location. This data will be saved in the <code>metadata.db</code> file along with the start date and time of the deployment.</p> <p>CLI Command: activating an acoupi program</p> <pre><code>acoupi deployment start\n</code></pre> Table: Additional parameters when starting a deployment Deployment Parameter Type Value Definition <code>name</code> string - Name for the specific deployment. <code>latitude</code> float - The latitude coordinate of the device location when   deployed. <code>longitude</code> float - The longitude coordinate of the device location when  deployed."},{"location":"tutorials/deployment/#getting_the_status_of_a_deployment","title":"Getting the status of a deployment","text":"<p>After starting a deployment, it\u2019s good practice to check the status of the program by running the <code>acoupi deployment status</code> command. This command provides a status report for system services, Celery workers, the program, and the overall deployment.</p> <p>CLI Command: viewing the status of an acoupi program</p> <pre><code>acoupi deployment status\n</code></pre>"},{"location":"tutorials/deployment/#stopping_a_deployment","title":"Stopping a deployment","text":"<p>Stopping the deployment can be necessary if you need to modify the program\u2019s configuration, move the device to a different location, or fix any errors that have appeared in the logs. To halt the program, use the <code>acoupi deployment stop</code> command. Remember, once a deployment is stopped, it can only be restarted by running the acoupi deployment start command again.</p> <p>CLI Command: halting an acoupi program</p> <pre><code>acoupi deployment stop\n</code></pre>"},{"location":"tutorials/deployment/#understanding_acoupi_status","title":"Understanding acoupi status","text":"<ul> <li> <p>System Services: Refer to the background processes that keep your acoupi installation running. These are the core services that manage the overall execution of the program and heartbeat monitoring. Two critical files handle these: the <code>acoupi.service</code> responsible for starting and stopping the program and the <code>acoupi-beat.service</code> that ensure the system's health at regular interval (hearbeats).</p> <ul> <li><code>status: inactive</code>: the system services are not running. This happen when the program has not been deployed.</li> <li><code>status: active</code>: the system services are running normally.</li> <li><code>status: failed</code>: an error has occured, and the services have stopped. The error message will provide information about the error.</li> </ul> </li> <li> <p>Celery: Celery is the task manager that coordinates the execution of background jobs, indlucing tasks like audio recording and file management. By default, acoupi uses two workers: the <code>recording</code> worker manages audio recording tasks, the <code>default</code> worker handles any other tasks.  </p> <ul> <li><code>status: unavailable</code>: Celery hasn't started or has stopped. The program isn't processing tasks. </li> <li><code>status: available</code> and <code>workers: ok</code> : Celery is up and running, with workers active and processing tasks normally. </li> <li><code>status: available</code> and <code>workers: notok</code> : Celery is up and running, but one or both workers are encountering problems or is not available. Check the log to identify the issue. </li> </ul> </li> <li> <p>Program: Refer to the configuration and execution of the acoupi program. </p> <ul> <li><code>status: ok</code> : the program has been configured correctly, and no issues have been detected. </li> <li><code>status: unhealthy</code> : there is an issue with the configuration of the program. This suggests that you might need to review the program's configuration setup.  </li> </ul> </li> <li> <p>Deployment: Refer to the overall state of your active acoupi instance, indicating whether everything is currently running as expected.</p> <ul> <li><code>status: active</code>: the deployment is running successfuly, the program is active and tasks are being executed.</li> <li><code>status: inactive</code>: the deployment has stopped or hasn't been started.</li> </ul> </li> </ul>"},{"location":"tutorials/installation/","title":"Installation","text":""},{"location":"tutorials/installation/#installation","title":"Installation","text":"<p>acoupi has been designed to run on single-board computer devices like the Raspberry\u00a0Pi (RPi). Users should be able to download and test acoupi software on any Linux-based machine with Python version &gt;=3.8,&lt;3.12 installed.</p>"},{"location":"tutorials/installation/#installation_requirements","title":"Installation Requirements","text":"<p>We recommend the following hardware elements to install and run acoupi.</p> <ul> <li>A Linux-based single board computer such as the Raspberry Pi 4B.</li> <li>A SD Card with 64-bit Lite OS version installed.</li> <li>A USB Microphone such as an AudioMoth\u00a0USB\u00a0Microphone or an Ultramic 192K/250K.</li> </ul> Recommended Hardware <p>The software has been extensively developed and tested with the RPi 4B. We advise users to select the RPi 4B or a device featuring similar specifications.</p>"},{"location":"tutorials/installation/#installation_steps","title":"Installation Steps","text":"Getting started with Raspberry Pi <p>If you are new to RPi, we recommend you reading and following the RPi's Getting started documentation.</p> <p>To install and use the bare-bone framework of acoupi on your embedded device follow these steps:</p> <p>Step 1: Install acoupi and its dependencies</p> <p>CLI Command: install acoupi</p> <pre><code>curl -sSL https://github.com/acoupi/acoupi/raw/main/scripts/setup.sh | bash\n</code></pre> <p>Step 2: Configure an acoupi program.</p> <p>acoupi includes a default program for recording and saving audio files based on your settings, similar to an AudioMoth setup. To start using it, enter the command:</p> <p>CLI Command: setup acoupi default program</p> <pre><code>acoupi setup --program acoupi.programs.default\n</code></pre> <p>Step 3: To start a deployment of acoupi with the configured program run the command:</p> <p>CLI Command: start a configured acoupi program</p> <pre><code>acoupi deployment start\n</code></pre> Using acoupi from the command line <p>To check what are the available commands for acoupi, enter <code>acoupi --help</code>. Also look at the CLI documentation for further info.</p>"}]}